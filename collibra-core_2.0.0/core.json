{
  "openapi": "3.0.3",
  "info": {
    "title": "Collibra Data Governance Center Core API",
    "description": "<p>The Core REST API allows you to create your own integrations with Collibra Data Governance Center.</p><p><i>Create custom applications to help users get access to the right data.</i></p>",
    "version": "2.0",
    "x-audience": "public"
  },
  "servers": [
    {
      "url": "/rest/2.0",
      "variables": {}
    }
  ],
  "paths": {
    "/activities": {
      "get": {
        "tags": [
          "Activities"
        ],
        "summary": "Returns activities matching the given search criteria.",
        "description": "Returns activities matching the given search criteria.Only parameters that are specified in this request and have not <code>null</code> values are used for filtering.All other parameters are ignored.The returned activities satisfy all constraints that are specified in this search criteria.By default a result containing 100 activities is returned.",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Parameter not used in the context of activities, for performance reasons they are not counted.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "taskId",
            "in": "query",
            "description": "The ID of the task which contains the basic find activities request.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contextId",
            "in": "query",
            "description": "The ID of the context which the activities should be searched for.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "involvedPeopleIds",
            "in": "query",
            "description": "The list of IDs of the people that should be involved in searched activities.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "involvedRoleIds",
            "in": "query",
            "description": "The list of IDs of the roles that should be involved in searched activities.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "performedByUserId",
            "in": "query",
            "description": "The ID of the user who performed searched activities.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "performedByRoleIds",
            "in": "query",
            "description": "The list of IDs of the roles assigned to users who performed searched activities.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "activityType",
            "in": "query",
            "description": "The type of the activity.",
            "schema": {
              "type": "string",
              "enum": [
                "ADD",
                "UPDATE",
                "DELETE"
              ]
            }
          },
          {
            "name": "callId",
            "in": "query",
            "description": "The ID of the call.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "The set of the categories of activities that should be searched. One of [ATTRIBUTE, ATTACHMENT, RELATION, COMMENT,<br/>STATUS, WORKFLOW, RESPONSIBILITY, USER, USER_GROUP, ROLE, TAGS, OTHERS].",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ATTRIBUTE",
                  "ATTACHMENT",
                  "RELATION",
                  "COMMENT",
                  "RATING",
                  "STATUS",
                  "WORKFLOW",
                  "RESPONSIBILITY",
                  "USER",
                  "USER_GROUP",
                  "ROLE",
                  "TAGS",
                  "OTHERS",
                  "USER_PASSWORD"
                ]
              }
            }
          },
          {
            "name": "resourceTypes",
            "in": "query",
            "description": "The set of the resource types that searched activities refer to, i.e. [Community, Asset, Domain, Attribute,<br/>Relation, WorkflowInstance].",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "View",
                  "Asset",
                  "Community",
                  "Domain",
                  "AssetType",
                  "DomainType",
                  "Status",
                  "User",
                  "ClassificationMatch",
                  "UserGroup",
                  "Attribute",
                  "StringAttribute",
                  "ScriptAttribute",
                  "BooleanAttribute",
                  "DateAttribute",
                  "NumericAttribute",
                  "SingleValueListAttribute",
                  "MultiValueListAttribute",
                  "Comment",
                  "Attachment",
                  "Responsibility",
                  "Workflow",
                  "Job",
                  "Relation",
                  "RelationType",
                  "ComplexRelation",
                  "ComplexRelationType",
                  "ArticulationRule",
                  "Assignment",
                  "Scope",
                  "RelationTrace",
                  "ValidationRule",
                  "DataQualityRule",
                  "DataQualityMetric",
                  "Address",
                  "InstantMessagingAccount",
                  "Email",
                  "PhoneNumber",
                  "Website",
                  "Activity",
                  "FormProperty",
                  "WorkflowTask",
                  "ActivityChange",
                  "WorkflowInstance",
                  "Role",
                  "AttributeType",
                  "BooleanAttributeType",
                  "DateAttributeType",
                  "DateTimeAttributeType",
                  "MultiValueListAttributeType",
                  "NumericAttributeType",
                  "ScriptAttributeType",
                  "SingleValueListAttributeType",
                  "StringAttributeType",
                  "ViewSharingRule",
                  "ViewAssignmentRule",
                  "JdbcDriverFile",
                  "JdbcDriver",
                  "JdbcIngestionProperties",
                  "CsvIngestionProperties",
                  "ExcelIngestionProperties",
                  "ConnectionStringParameter",
                  "AssignedCharacteristicType",
                  "Notification",
                  "Tag",
                  "ComplexRelationLegType",
                  "ComplexRelationAttributeType",
                  "ComplexRelationLeg",
                  "BaseDataType",
                  "AdvancedDataType",
                  "DiagramPicture",
                  "DiagramPictureSharingRule",
                  "DiagramPictureAssignmentRule",
                  "Rating",
                  "Classification",
                  "PhysicalDataConnector",
                  "Context"
                ]
              }
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date of the searched activities, expressed as a Unix timestamp in milliseconds.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date of the searched activities, expressed as a Unix timestamp in milliseconds.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "callCountEnabled",
            "in": "query",
            "description": "Flag to indicate if the number of calls standing behind the activity should be returned or not.<br/>Note that by default that count will be not calculated as it brings an important performance penalty.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response with found Activity information. The total number of results is not calculated and should be ignored"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/application/info": {
      "get": {
        "tags": [
          "Application"
        ],
        "summary": "Returns the basic information about the application.",
        "description": "Returns the basic information about the application.",
        "operationId": "getInfo",
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assignments": {
      "post": {
        "tags": [
          "Assignments"
        ],
        "summary": "Adds a new Assignment.",
        "description": "Adds a new Assignment.",
        "operationId": "addAssignment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAssignmentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assignment successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentImpl"
                }
              }
            }
          },
          "400": {
            "description": "An assignment with the given ID already exists"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assignments/{assignmentId}": {
      "delete": {
        "tags": [
          "Assignments"
        ],
        "summary": "Removes the Assignment identified by the given id.",
        "description": "Removes the Assignment identified by the given id.",
        "operationId": "removeAssignment",
        "parameters": [
          {
            "name": "assignmentId",
            "in": "path",
            "description": "The unique identifier of the Assignment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment removed."
          },
          "404": {
            "description": "Assignment not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Assignments"
        ],
        "summary": "Changes the assignment with the information that is provided in the request.",
        "description": "Changes the assignment with the information that is provided in the request. Only properties that are specified in the request and are not NULL are updated. All other properties are ignored.",
        "operationId": "changeAssignment",
        "parameters": [
          {
            "name": "assignmentId",
            "in": "path",
            "description": "The unique identifier of the Assignment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAssignmentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assignment successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assignments/forResource": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "summary": "Find the assignments where a given resource is assigned.",
        "description": "Find the assignments where a given resource is assigned.",
        "operationId": "findAssignmentsForResource",
        "parameters": [
          {
            "name": "resourceId",
            "in": "query",
            "description": "The ID of the resource on which the assignment applies.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "resourceType",
            "in": "query",
            "description": "The type of resource that is assigned.",
            "schema": {
              "type": "string",
              "enum": [
                "View",
                "Asset",
                "Community",
                "Domain",
                "AssetType",
                "DomainType",
                "Status",
                "User",
                "ClassificationMatch",
                "UserGroup",
                "Attribute",
                "StringAttribute",
                "ScriptAttribute",
                "BooleanAttribute",
                "DateAttribute",
                "NumericAttribute",
                "SingleValueListAttribute",
                "MultiValueListAttribute",
                "Comment",
                "Attachment",
                "Responsibility",
                "Workflow",
                "Job",
                "Relation",
                "RelationType",
                "ComplexRelation",
                "ComplexRelationType",
                "ArticulationRule",
                "Assignment",
                "Scope",
                "RelationTrace",
                "ValidationRule",
                "DataQualityRule",
                "DataQualityMetric",
                "Address",
                "InstantMessagingAccount",
                "Email",
                "PhoneNumber",
                "Website",
                "Activity",
                "FormProperty",
                "WorkflowTask",
                "ActivityChange",
                "WorkflowInstance",
                "Role",
                "AttributeType",
                "BooleanAttributeType",
                "DateAttributeType",
                "DateTimeAttributeType",
                "MultiValueListAttributeType",
                "NumericAttributeType",
                "ScriptAttributeType",
                "SingleValueListAttributeType",
                "StringAttributeType",
                "ViewSharingRule",
                "ViewAssignmentRule",
                "JdbcDriverFile",
                "JdbcDriver",
                "JdbcIngestionProperties",
                "CsvIngestionProperties",
                "ExcelIngestionProperties",
                "ConnectionStringParameter",
                "AssignedCharacteristicType",
                "Notification",
                "Tag",
                "ComplexRelationLegType",
                "ComplexRelationAttributeType",
                "ComplexRelationLeg",
                "BaseDataType",
                "AdvancedDataType",
                "DiagramPicture",
                "DiagramPictureSharingRule",
                "DiagramPictureAssignmentRule",
                "Rating",
                "Classification",
                "PhysicalDataConnector",
                "Context"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignments found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentImpl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The parameter is invalid"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assignments/asset/{assetId}": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "summary": "Returns the Assignment identified by the given Asset.",
        "description": "Returns the Assignment identified by the given Asset.",
        "operationId": "getAssignmentsForAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The unique identifier of the Asset.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentImpl"
                }
              }
            }
          },
          "404": {
            "description": "Assignment not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assignments/assetType/{assetTypeId}": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "summary": "Returns Assignments for given asset type id.",
        "description": "Returns Assignments for given asset type id.",
        "operationId": "getAssignmentsForAssetType",
        "parameters": [
          {
            "name": "assetTypeId",
            "in": "path",
            "description": "The unique identifier of the AssetType.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignments found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assignments/domain/{domainId}/assetTypes": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "summary": "Returns available asset types for domain identified by given id.",
        "description": "Returns available asset types for domain identified by given id.",
        "operationId": "getAvailableAssetTypesForDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "The unique identifier of the Domain.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AssetTypes found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTypeImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assignments/asset/{assetId}/attributeTypes": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "summary": "Returns available attribute types for asset identified by given id.",
        "description": "Returns available attribute types for asset identified by given id.",
        "operationId": "getAvailableAttributeTypesForAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The unique identifier of the Asset.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "AttributeTypes found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeType"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assignments/asset/{assetId}/complexRelationTypes": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "summary": "Returns the available ComplexRelationTypes for the Asset identified by the given id.",
        "description": "Returns the available ComplexRelationTypes for the Asset identified by the given id.",
        "operationId": "getAvailableComplexRelationTypesForAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The unique identifier of the Asset.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ComplexRelationTypes found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComplexRelationTypeImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assignments/asset/{assetId}/relationTypes": {
      "get": {
        "tags": [
          "Assignments"
        ],
        "summary": "Returns the available RelationTypes for the Asset identified by the given id.",
        "description": "Returns the available RelationTypes for the Asset identified by the given id.",
        "operationId": "getAvailableRelationTypesForAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The unique identifier of the Asset.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "RelationTypes found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RelationTypeImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/scopes": {
      "get": {
        "tags": [
          "Scopes"
        ],
        "summary": "Find scopes",
        "description": "Returns all scopes.",
        "operationId": "getAllScopes",
        "responses": {
          "200": {
            "description": "The found scopes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopePagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Scopes"
        ],
        "summary": "Add scope",
        "description": "Adds a new scope.",
        "operationId": "addScope",
        "requestBody": {
          "description": "the properties of the scope to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddScopeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Scope successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopeImpl"
                }
              }
            }
          },
          "400": {
            "description": "A scope with the given ID already exists"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/scopes/{scopeId}": {
      "get": {
        "tags": [
          "Scopes"
        ],
        "summary": "Get scope",
        "description": "Returns scope identified by given id.",
        "operationId": "getScope",
        "parameters": [
          {
            "name": "scopeId",
            "in": "path",
            "description": "The unique identifier of the scope.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The found scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopeImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Scopes"
        ],
        "summary": "Remove scope",
        "description": "Removes scope identified by given id.",
        "operationId": "removeScope",
        "parameters": [
          {
            "name": "scopeId",
            "in": "path",
            "description": "the id of the scope",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The scope has been successfully removed."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Scopes"
        ],
        "summary": "Change scope",
        "description": "Changes the scope with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeScope",
        "parameters": [
          {
            "name": "scopeId",
            "in": "path",
            "description": "the id of the scope to be changed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the properties of the scope to be changed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeScopeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The changed scope",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopeImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/diagramPictures": {
      "post": {
        "tags": [
          "Diagram Pictures"
        ],
        "summary": "Adds a diagram picture.",
        "description": "Take a diagram picture for a given asset and diagram view.\nA diagram picture is a copy of traceability diagram (result diagram) at a given time (for more information on traceability diagram check DGC User Guide).\n\nThe motivation behind diagram picture is to be able to reopen them at a later point in time and be able to see them them exactly as they were created. This feature is not possible for result diagram which are always showing the current situation.",
        "operationId": "addDiagramPicture",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDiagramPictureRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Diagram picture successfully added.The response contains a UUID of the added diagram picture. The UUID can be used to compose an URL to retrive the diagram picture.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/files": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload files",
        "description": "Upload files",
        "operationId": "addFiles",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUpload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Files successfully uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfoImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/files/{fileId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Download file",
        "description": "Downloads file identified by given id.  Keep in mind to use GET /attachments/{attachmentId}/file instead of this endpoint when you want to get the file of an attachment.  A File and its id can be temporary so it's possible this endpoint will not get you the desired file.",
        "operationId": "getFile",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "the id of the file",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file has been downloaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The found file",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Delete file",
        "description": "Delete file for a given Id",
        "operationId": "deleteFile",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "the id of the file",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/files/bulk": {
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Delete multiple files",
        "description": "Deletes files that are older than the given time to live.",
        "operationId": "deleteFiles",
        "parameters": [
          {
            "name": "timeToLive",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/files/{fileId}/info": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Get file information",
        "description": "Returns information about the file identified by given id. Keep in mind to use GET /attachments/{attachmentId} instead of this endpoint when you want to get information of an attachment. A File and its id can be temporary so it's possible this endpoint will not get you the information of the desired file.",
        "operationId": "getFileInfo",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "the id of the file",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScopeImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Find assets",
        "description": "Returns assets matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. By default a result containing 1000 assets is returned.",
        "operationId": "findAssets",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. Cursor should be preferred over offset for better performance and stable results. It is forbidden to use both in the same request.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped. For cursor pagination this parameter is ignored and count is skipped.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for the current page of results. To retrieve the first page with cursor pagination you need to pass this parameter with an empty value (must be non-null). For the next pages, the value must be taken from the response (<code>nextCursor</code> property).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the asset to search for (either display name or full name).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "The ID of the domain to find the assets in.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "communityId",
            "in": "query",
            "description": "The ID of the community to find the assets in.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "typeIds",
            "in": "query",
            "description": "The list of IDs of the asset types. The returned assets are of one of types specified by this parameter.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "The list of IDs of the asset types. The returned assets are of one of types specified by this parameter.  Deprecated in favour of 'typeIds'",
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "statusIds",
            "in": "query",
            "description": "The list of IDs of the statuses. The returned assets have one of statuses specified by this parameter.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "statusId",
            "in": "query",
            "description": "The list of IDs of the statuses. The returned assets have one of statuses specified by this parameter. Deprecated in favour of 'statusIds'.",
            "deprecated": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "tagNames",
            "in": "query",
            "description": "The list of names of tags. The returned assets have one of tags with names specified by this parameter.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "typeInheritance",
            "in": "query",
            "description": "Whether the type inheritance for the asset type filtering should be applied or not.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "excludeMeta",
            "in": "query",
            "description": "The exclude meta flag. If this is set to true then the assets from meta domains will not be returned (meta domains are the domains which were not created by the user manually).",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field on which the results are sorted.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "NAME",
                "DISPLAY_NAME",
                "ID"
              ],
              "default": "NAME"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The sorting order.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "ASC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPagedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Add asset",
        "description": "Adds a new asset to a domain",
        "operationId": "addAsset",
        "requestBody": {
          "description": "The properties of the asset to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAssetRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assets/bulk": {
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Add multiple assets",
        "description": "Adds multiple assets in one go",
        "operationId": "addAssets",
        "requestBody": {
          "description": "The properties of the assets to be added",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddAssetRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetImpl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Remove assets",
        "description": "Removes multiple assets.",
        "operationId": "removeAssets",
        "requestBody": {
          "description": "The IDs of the assets to be removed",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Assets"
        ],
        "summary": "Change multiple assets",
        "description": "Changes multiple assets in one go",
        "operationId": "changeAssets",
        "requestBody": {
          "description": "The properties of the assets to be changed",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeAssetRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetImpl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assets/{assetId}/tags": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get asset tags",
        "description": "Returns all tags of the asset with the given ID.",
        "operationId": "getAssetTags",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Set asset tags",
        "description": "Sets tags for the asset with the given ID. The asset will contain only those tags specified in the request.",
        "operationId": "setTagsForAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The tags to be set on given asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAssetTagsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Add tags",
        "description": "Adds tags to the asset with the given ID.",
        "operationId": "addTagsToAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The tags to be added to a given asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAssetTagsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Remove tags",
        "description": "Removes tags from the asset with the given ID.",
        "operationId": "removeTagsFromAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The tags to be removed from given asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAssetTagsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assets/{assetId}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get asset",
        "description": "Returns the asset having the given ID.",
        "operationId": "getAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetImpl"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Remove asset",
        "description": "Removes an asset identified by given ID.",
        "operationId": "removeAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Assets"
        ],
        "summary": "Change asset",
        "description": "Changes the asset with the given ID as specified by the given request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeAsset",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset to be changed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The properties of the assets to be changed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAssetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assets/{assetId}/breadcrumb": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get asset breadcrumb",
        "description": "Returns the list of resources that lead to the asset identified by the given ID.",
        "operationId": "getAssetBreadcrumb",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NamedResourceReferenceImpl"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assets/{assetId}/attributes": {
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Set asset attributes",
        "description": "Replaces all attributes of the asset with the given ID (of given attribute type) with the attributes from the request, except matching attributes, which are retained.",
        "operationId": "setAssetAttributes",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The attributes to be set on the given asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAssetAttributesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attribute"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assets/{assetId}/relations": {
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Set asset relations",
        "description": "Sets relations for the asset with the given ID. All the relations described by this request will replace the existing ones (identified with asset as one end, relation type and direction of the relation).",
        "operationId": "setAssetRelations",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The relations to be set on given asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAssetRelationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RelationImpl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assets/{assetId}/responsibilities": {
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Set asset responsibilities",
        "description": "Sets responsibilities for the asset with the given ID.",
        "operationId": "setAssetResponsibilities",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The responsibilities to be set on given asset",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAssetResponsibilitiesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponsibilityImpl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/attachments": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "Find attachments",
        "description": "Returns attachments matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned attachments satisfy all constraints that are specified in this search criteria.\tBy default a result containing 1000 attachments is returned.",
        "operationId": "findAttachments",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The name of the file representing searched attachment.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileContentType",
            "in": "query",
            "description": "The type of the content of the file representing searched attachment.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploadDate",
            "in": "query",
            "description": "The date of attachment upload. It is the timestamp (in UTC time standard).",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The ID of the user who uploaded the attachment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "baseResourceId",
            "in": "query",
            "description": "The ID of the resource the attachment refers to.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field that should be used as reference for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "FILE_CONTENT_TYPE",
                "CREATED_BY",
                "FILE_NAME",
                "CREATED_ON",
                "BASE_RESOURCE_ID",
                "LAST_MODIFIED"
              ],
              "default": "LAST_MODIFIED"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "DESC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentPagedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Attachments"
        ],
        "summary": "Add attachment",
        "description": "Adds new attachment.",
        "operationId": "addAttachment",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "the file - attachment content",
                    "format": "binary"
                  },
                  "fileName": {
                    "type": "string",
                    "description": "the display name of the file of this attachment"
                  },
                  "resourceType": {
                    "type": "string",
                    "description": "the type of the resource the attachment should refer to.\nAn attachment can be added on those resource types: User, Community, Domain, Asset, Role, ValidationRule, Workflow.",
                    "enum": [
                      "View",
                      "Asset",
                      "Community",
                      "Domain",
                      "AssetType",
                      "DomainType",
                      "Status",
                      "User",
                      "ClassificationMatch",
                      "UserGroup",
                      "Attribute",
                      "StringAttribute",
                      "ScriptAttribute",
                      "BooleanAttribute",
                      "DateAttribute",
                      "NumericAttribute",
                      "SingleValueListAttribute",
                      "MultiValueListAttribute",
                      "Comment",
                      "Attachment",
                      "Responsibility",
                      "Workflow",
                      "Job",
                      "Relation",
                      "RelationType",
                      "ComplexRelation",
                      "ComplexRelationType",
                      "ArticulationRule",
                      "Assignment",
                      "Scope",
                      "RelationTrace",
                      "ValidationRule",
                      "DataQualityRule",
                      "DataQualityMetric",
                      "Address",
                      "InstantMessagingAccount",
                      "Email",
                      "PhoneNumber",
                      "Website",
                      "Activity",
                      "FormProperty",
                      "WorkflowTask",
                      "ActivityChange",
                      "WorkflowInstance",
                      "Role",
                      "AttributeType",
                      "BooleanAttributeType",
                      "DateAttributeType",
                      "DateTimeAttributeType",
                      "MultiValueListAttributeType",
                      "NumericAttributeType",
                      "ScriptAttributeType",
                      "SingleValueListAttributeType",
                      "StringAttributeType",
                      "ViewSharingRule",
                      "ViewAssignmentRule",
                      "JdbcDriverFile",
                      "JdbcDriver",
                      "JdbcIngestionProperties",
                      "CsvIngestionProperties",
                      "ExcelIngestionProperties",
                      "ConnectionStringParameter",
                      "AssignedCharacteristicType",
                      "Notification",
                      "Tag",
                      "ComplexRelationLegType",
                      "ComplexRelationAttributeType",
                      "ComplexRelationLeg",
                      "BaseDataType",
                      "AdvancedDataType",
                      "DiagramPicture",
                      "DiagramPictureSharingRule",
                      "DiagramPictureAssignmentRule",
                      "Rating",
                      "Classification",
                      "PhysicalDataConnector",
                      "Context"
                    ]
                  },
                  "resourceId": {
                    "type": "string",
                    "description": "the id of the resource the attachment should refer to",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "Get attachment",
        "description": "Returns information about the attachment identified by id.",
        "operationId": "getAttachment",
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "the id of the attachment",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentImpl"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Attachments"
        ],
        "summary": "Remove attachment",
        "description": "Removes attachment identified by given id.",
        "operationId": "removeAttachment",
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "the id of the attachment",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/attachments/{attachmentId}/file": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "Get attachment content",
        "description": "Returns content of the attachment identified by given id.",
        "operationId": "getAttachmentContent",
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "the id of the attachment",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The attachment content",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/attributes": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Find attributes",
        "description": "Returns attributes matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned attributes satisfy all constraints that are specified in this search criteria. By default a result containing 1000 attributes is returned.",
        "operationId": "findAttributes",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. Cursor should be preferred over offset for better performance and stable results. It is forbidden to use both in the same request.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped. For cursor pagination this parameter is ignored and count is skipped.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for the current page of results. To retrieve the first page with cursor pagination you need to pass this parameter with an empty value (must be non-null). For the next pages, the value must be taken from the response (<code>nextCursor</code> property).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "typeIds",
            "in": "query",
            "description": "The list of IDs of the attribute types the found attributes should have, or null or empty if no type filtering should be applied.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "assetId",
            "in": "query",
            "description": "The ID of the asset to find the attributes in, or null if no asset filtering should be applied.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The sorting order.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "DESC"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field on which the results are sorted.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CREATED_BY",
                "CREATED_ON",
                "LAST_MODIFIED",
                "ID"
              ],
              "default": "LAST_MODIFIED"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributePagedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Add attribute",
        "description": "Adds a new attribute to an asset.",
        "operationId": "addAttribute",
        "requestBody": {
          "description": "the properties of the attribute to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAttributeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/attributes/bulk": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Add attributes",
        "description": "Adds multiple attributes.",
        "operationId": "addAttributes",
        "requestBody": {
          "description": "the list of the properties of the attributes to be added",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddAttributeRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attribute"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Remove attributes",
        "description": "Removes the attributes identified by given ids.",
        "operationId": "removeAttributes",
        "requestBody": {
          "description": "the ids of the attributes to remove",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Attributes"
        ],
        "summary": "Change attributes",
        "description": "Changes multiple attributes with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeAttributes",
        "requestBody": {
          "description": "the list of properties of the attributes to be changed",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeAttributeRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attribute"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/attributes/{attributeId}": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Get attribute",
        "description": "Returns the attribute identified by given id.",
        "operationId": "getAttribute",
        "parameters": [
          {
            "name": "attributeId",
            "in": "path",
            "description": "the id of the attribute",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attribute"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Remove attribute",
        "description": "Removes the attribute identified by given id.",
        "operationId": "removeAttribute",
        "parameters": [
          {
            "name": "attributeId",
            "in": "path",
            "description": "the id of the attribute",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Attributes"
        ],
        "summary": "Change attribute",
        "description": "Changes the attribute with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeAttribute",
        "parameters": [
          {
            "name": "attributeId",
            "in": "path",
            "description": "the id of the attribute",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the properties of the attribute to be changed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAttributeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attribute"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/comments": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Find comments.",
        "description": "<p>Returns comments matching the given search criteria.</p><p>Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored.</p><p>The returned comments satisfy all constraints that are specified in this search criteria.</p><p>By default, the result contains up to 1000 comments.</p>",
        "operationId": "findComments",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "The ID of the comment which the reply comments should be searched for",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "8253ed81-0889-49d7-98db-defef5b5cd3b"
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The ID of the user who created the comment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "8253ed81-0889-49d7-98db-defef5b5cd3b"
          },
          {
            "name": "baseResourceId",
            "in": "query",
            "description": "The ID of the resource which the searched comments refer to.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "8253ed81-0889-49d7-98db-defef5b5cd3b"
          },
          {
            "name": "rootComment",
            "in": "query",
            "description": "Whether the searched comments should be root comments (not reply comments).",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sorting on the date the comment was created.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "DESC"
            },
            "example": "DESC"
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response with found comments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Add comment.",
        "description": "Adds a new comment.",
        "operationId": "addComment",
        "requestBody": {
          "description": "The properties of new comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCommentRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/comments/{commentId}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get comment.",
        "description": "Returns the comment with the specified ID.",
        "operationId": "getComment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The response with found comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Remove comment.",
        "description": "Removes the comment with the specified ID.",
        "operationId": "removeComment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment to be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment successfully removed."
          },
          "404": {
            "description": "Comment not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Comments"
        ],
        "summary": "Change comment.",
        "description": "<p>Modifies the comment with the specified ID.</p><p>Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.</p>",
        "operationId": "changeComment",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The ID of the comment to be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The properties to change comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "404": {
            "description": "Comment not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/communities/bulk": {
      "post": {
        "tags": [
          "Communities"
        ],
        "summary": "Add multiple communities",
        "description": "Adds multiple communities with the given parameters",
        "operationId": "addCommunities",
        "requestBody": {
          "description": "List of the properties of the communities to be added.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddCommunityRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommunityImpl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Communities"
        ],
        "summary": "Remove multiple communities",
        "description": "This endpoint will be removed in the future. Please use POST /communities/removalJobs.",
        "operationId": "removeCommunities",
        "requestBody": {
          "description": "the IDs of the communities to be removed, i.e. [\"6f685f90-1036-4d30-983a-a9bbcdd7b8f6\", \"6f685f90-1036-4d30-983a-a9bbcdd7b123\"]",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Communities"
        ],
        "summary": "Change multiple communities",
        "description": "Changes multiple communities using the given request parameters",
        "operationId": "changeCommunities",
        "requestBody": {
          "description": "List of the properties of the communities to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeCommunityRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommunityImpl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/communities": {
      "get": {
        "tags": [
          "Communities"
        ],
        "summary": "Find communities",
        "description": "Returns communities matching the given search criteria. Only parameters that are specified in this request and have non-<code>null</code> values are used for filtering. All other parameters are ignored. By default a result containing 1000 communities is returned.",
        "operationId": "findCommunities",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. Cursor should be preferred over offset for better performance and stable results. It is forbidden to use both in the same request.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped. For cursor pagination this parameter is ignored and count is skipped.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for the current page of results. To retrieve the first page with cursor pagination you need to pass this parameter with an empty value (must be non-null). For the next pages, the value must be taken from the response (<code>nextCursor</code> property).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the community to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "The ID of the parent community to find the communities in.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "excludeMeta",
            "in": "query",
            "description": "The exclude meta flag. If this is set to true then the meta communities will not be returned (meta communities are i.e. communities not created manually by the user).",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field on which the results are sorted.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "NAME",
                "CREATED_BY",
                "CREATED_ON",
                "LAST_MODIFIED",
                "ID"
              ],
              "default": "NAME"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The sorting order.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "ASC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityPagedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Communities"
        ],
        "summary": "Add community",
        "description": "Adds a new community with the given parameters.",
        "operationId": "addCommunity",
        "requestBody": {
          "description": "the properties of the community to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCommunityRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/communities/{communityId}": {
      "get": {
        "tags": [
          "Communities"
        ],
        "summary": "Get community",
        "description": "Returns the community with the given ID.",
        "operationId": "getCommunity",
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "description": "the ID of the community",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityImpl"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Communities"
        ],
        "summary": "Remove community",
        "description": "This endpoint will be removed in the future. Please use POST /communities/removalJobs",
        "operationId": "removeCommunity",
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "description": "the ID of the community to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Communities"
        ],
        "summary": "Change community",
        "description": "Changes the community with the information that is present in the request. Only properties that are specified in this request and have non-<code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeCommunity",
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "description": "the id of the community to be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the properties of the community to be changed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCommunityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/communities/{communityId}/root": {
      "post": {
        "tags": [
          "Communities"
        ],
        "summary": "Change to root community",
        "description": "Changes the community with given ID to a root community.",
        "operationId": "changeToRootCommunity",
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "description": "The ID of the community that will be changed to a root community",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunityImpl"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/communities/{communityId}/breadcrumb": {
      "get": {
        "tags": [
          "Communities"
        ],
        "summary": "Get community breadcrumb",
        "description": "Returns the list of communities that lead to the community identified by the given ID.",
        "operationId": "getCommunityBreadcrumb",
        "parameters": [
          {
            "name": "communityId",
            "in": "path",
            "description": "The ID of the community",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NamedResourceReferenceImpl"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/communities/removalJobs": {
      "post": {
        "tags": [
          "Communities"
        ],
        "summary": "Remove multiple communities asynchronously",
        "description": "Removes multiple communities in a job.",
        "operationId": "removeCommunitiesInJob",
        "requestBody": {
          "description": "the IDs of the communities to be removed, i.e. [\"6f685f90-1036-4d30-983a-a9bbcdd7b8f6\", \"6f685f90-1036-4d30-983a-a9bbcdd7b123\"]",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/complexRelations": {
      "get": {
        "tags": [
          "Complex Relations"
        ],
        "summary": "Returns complex relations matching the given search criteria.",
        "description": "Returns complex relations matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering.  All other parameters are ignored.  The returned complex relations satisfy all constraints that are specified in this search criteria.  By default a result containing 1000 complex relations is returned.",
        "operationId": "findComplexRelations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. Cursor should be preferred over offset for better performance and stable results. It is forbidden to use both in the same request.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped. For cursor pagination this parameter is ignored and count is skipped.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for the current page of results. To retrieve the first page with cursor pagination you need to pass this parameter with an empty value (must be non-null). For the next pages, the value must be taken from the response (<code>nextCursor</code> property).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetId",
            "in": "query",
            "description": "The ID of the asset for which complex relations should be found.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "The ID of the type of complex relations to search for.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexRelationPagedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Complex Relations"
        ],
        "summary": "Adds new complex relation.",
        "description": "Adds new complex relation.",
        "operationId": "addComplexRelation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddComplexRelationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexRelationImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/complexRelations/{complexRelationId}": {
      "get": {
        "tags": [
          "Complex Relations"
        ],
        "summary": "Returns a ComplexRelation identified by given id.",
        "description": "Returns a complex relation identified by given <code>id</code>.",
        "operationId": "getComplexRelation",
        "parameters": [
          {
            "name": "complexRelationId",
            "in": "path",
            "description": "the id of the complex relation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexRelationImpl"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Complex Relations"
        ],
        "summary": "Removes complex relation identified by given id.",
        "description": "Removes complex relation identified by given id.",
        "operationId": "removeComplexRelation",
        "parameters": [
          {
            "name": "complexRelationId",
            "in": "path",
            "description": "the id of the complex relation to be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Complex Relations"
        ],
        "summary": "Change the complex relation with the information that is present in the request.",
        "description": "Change the complex relation with the information that is present in the request.  Only properties that are specified in this request and have not <code>null</code> values are updated.  All other properties are ignored.",
        "operationId": "changeComplexRelation",
        "parameters": [
          {
            "name": "complexRelationId",
            "in": "path",
            "description": "the id of the complex relation to be modified.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeComplexRelationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexRelationImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/complexRelations/export/csv-job": {
      "post": {
        "tags": [
          "Complex Relations"
        ],
        "summary": "Export complex relations of the given type to CSV.",
        "description": "Export complex relations of the given type to CSV.",
        "operationId": "exportToCSV",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportComplexRelationsToCSVRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/complexRelations/export/csv": {
      "post": {
        "tags": [
          "Complex Relations"
        ],
        "summary": "Export all complex relations of the given type to CSV as a String.",
        "description": "Export all complex relations of the given type to CSV as a String.",
        "operationId": "exportToCSVAsString",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportComplexRelationsToCSVRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/complexRelations/export/csv-file": {
      "post": {
        "tags": [
          "Complex Relations"
        ],
        "summary": "Export all complex relations of the given type to a CSV file.",
        "description": "Export all complex relations of the given type to a CSV file.",
        "operationId": "exportToCSVWithoutJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportComplexRelationsToCSVRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfoImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/complexRelations/export/excel-job": {
      "post": {
        "tags": [
          "Complex Relations"
        ],
        "summary": "Export complex relations of the given type to Excel.",
        "description": "Export complex relations of the given type to Excel.",
        "operationId": "exportToEXCEL",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportComplexRelationsToExcelRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/complexRelations/export/excel-file": {
      "post": {
        "tags": [
          "Complex Relations"
        ],
        "summary": "Export all complex relations of the given type to an Excel file.",
        "description": "Export all complex relations of the given type to an Excel file.",
        "operationId": "exportToEXCELWithoutJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportComplexRelationsToExcelRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfoImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Search domains",
        "description": "Finds the domains that match the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. By default a result containing 1000 domains is returned.",
        "operationId": "findDomains",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. Cursor should be preferred over offset for better performance and stable results. It is forbidden to use both in the same request.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped. For cursor pagination this parameter is ignored and count is skipped.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for the current page of results. To retrieve the first page with cursor pagination you need to pass this parameter with an empty value (must be non-null). For the next pages, the value must be taken from the response (<code>nextCursor</code> property).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the domain to search for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          },
          {
            "name": "excludeMeta",
            "in": "query",
            "description": "The exclude meta flag. If this is set to true then the meta domains will not be returned (meta domains are i.e. domains not created manually by the user).",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "communityId",
            "in": "query",
            "description": "The ID of the community to find the domains in",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "The ID of the domain type to search for. Returned domains are of this type",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeSubCommunities",
            "in": "query",
            "description": "The include sub-communities flag. When set to true, sub-communities (of the community indicated via the <code>communityId</code> parameter) will be searched in.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainPagedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Add domain",
        "description": "Adds a new domain with given data into a community.",
        "operationId": "addDomain",
        "requestBody": {
          "description": "the properties of the domain to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDomainRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/domains/bulk": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Add multpile domains",
        "description": "Adds multiple domains using the given parameters",
        "operationId": "addDomains",
        "requestBody": {
          "description": "List of the properties of the domains to be added.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddDomainRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DomainImpl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "summary": "Remove multiple domains",
        "description": "This endpoint will be removed in the future. Please use POST /domains/removalJobs.",
        "operationId": "removeDomains",
        "requestBody": {
          "description": "the IDs of the domains to be removed, i.e. [\"6f685f90-1036-4d30-983a-a9bbcdd7b8f6\", \"6f685f90-1036-4d30-983a-a9bbcdd7b123\"]",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Domains"
        ],
        "summary": "Change multiple domains",
        "description": "Changes multiple domains using the given parameters",
        "operationId": "changeDomains",
        "requestBody": {
          "description": "List of the properties of the domains to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeDomainRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DomainImpl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/domains/{domainId}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Get domain",
        "description": "Returns the domain with the given ID",
        "operationId": "getDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "the ID of the domain",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainImpl"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "summary": "Remove domain",
        "description": "This endpoint will be removed in the future. Please use POST /domains/removalJobs.",
        "operationId": "removeDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "the ID of the domain to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Domains"
        ],
        "summary": "Change domain",
        "description": "Changes the domain with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "the ID of the domain to be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the properties of the domain to be changed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeDomainRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/domains/{domainId}/breadcrumb": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Get domain breadcrumb",
        "description": "Returns the list of resources that lead to the domain identified by the given ID.",
        "operationId": "getDomainBreadcrumb",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "The ID of the domain",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NamedResourceReferenceImpl"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/domains/removalJobs": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Remove multiple domains asynchronously",
        "description": "Removes multiple domains with the given IDs in a job.",
        "operationId": "removeDomainsInJob",
        "requestBody": {
          "description": "the IDs of the domains to be removed, i.e. [\"6f685f90-1036-4d30-983a-a9bbcdd7b8f6\", \"6f685f90-1036-4d30-983a-a9bbcdd7b123\"]",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/issues": {
      "get": {
        "tags": [
          "Issues"
        ],
        "summary": "Returns issues matching the given search criteria.",
        "description": "Returns issues matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned issues satisfy all constraints that are specified in this search criteria. By default a result containing 1000 issues is returned.",
        "operationId": "findIssues",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The sorting order of the results.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "ASC"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field on which the results are sorted. Default is NAME.",
            "schema": {
              "type": "string",
              "enum": [
                "NAME",
                "PRIORITY",
                "RESOLUTION",
                "CREATED_BY"
              ],
              "default": "NAME"
            }
          },
          {
            "name": "onlyOpenIssues",
            "in": "query",
            "description": "Whether only open issues should be returned.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "userRelation",
            "in": "query",
            "description": "The relation of the user with the issues to be returned. By default all issues for the current user will be returned.",
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "ASSIGNED",
                "CREATED"
              ],
              "default": "ALL"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetPagedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Issues"
        ],
        "summary": "Adds a new issue.",
        "description": "Adds a new issue with the given parameters.",
        "operationId": "addIssue",
        "requestBody": {
          "description": "The properties of the issue to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddIssueRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/issues/{issueId}/community/{communityId}": {
      "patch": {
        "tags": [
          "Issues"
        ],
        "summary": "Moves an issue to another community.",
        "description": "Moves an issue to another community.",
        "operationId": "moveIssue",
        "parameters": [
          {
            "name": "issueId",
            "in": "path",
            "description": "ID of the issue to be moved",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "communityId",
            "in": "path",
            "description": "ID of the community to move the issue to",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetImpl"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/jdbc": {
      "get": {
        "tags": [
          "JDBC Driver"
        ],
        "summary": "Find JDBC Drivers",
        "description": "Finds JDBC drivers that match the given search criteria. By default a result containing 1000 JDBC drivers are returned.<br />This operation is deprecated and it will be removed in the future.",
        "operationId": "findJdbcDrivers",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "databaseName",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "the database name of the JDBC driver to find. The exact name must be used to find the JDBC driver case sensitive, and 'equals' style of match)."
            }
          },
          {
            "name": "databaseVersion",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "the database version of the JDBC driver to find. The exact value must be used to find the JDBC driver."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JDBC drivers searched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JdbcDriverPagedResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/ratings": {
      "get": {
        "tags": [
          "Ratings"
        ],
        "summary": "Find ratings.",
        "description": "Returns ratings matching the given search criteria.<p>Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored.</p><p>The returned ratings satisfy all constraints that are specified in this search criteria. By default, the result contains up to 1000 ratings.</p>",
        "operationId": "findRatings",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sorting (on creation date) the found ratings.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "DESC"
            }
          },
          {
            "name": "assetId",
            "in": "query",
            "description": "The ID of the asset the rating belongs to.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The ID of the rating author.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response with found ratings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingsPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Ratings"
        ],
        "summary": "Add rating.",
        "description": "Adds a new rating.",
        "operationId": "addRating",
        "requestBody": {
          "description": "The properties of the rating to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRatingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rating successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rating"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/ratings/{ratingId}": {
      "get": {
        "tags": [
          "Ratings"
        ],
        "summary": "Get rating.",
        "description": "Returns the rating with the specified ID.",
        "operationId": "getRating",
        "parameters": [
          {
            "name": "ratingId",
            "in": "path",
            "description": "The ID of the rating.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rating found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rating"
                }
              }
            }
          },
          "404": {
            "description": "Rating with given ID could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Ratings"
        ],
        "summary": "Remove rating.",
        "description": "Removes the rating with the specified ID.",
        "operationId": "removeRating",
        "parameters": [
          {
            "name": "ratingId",
            "in": "path",
            "description": "The ID of the rating to be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rating successfully removed."
          },
          "404": {
            "description": "Rating with given ID could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Ratings"
        ],
        "summary": "Change rating.",
        "description": "Modifies the rating with the specified ID.<p>Only properties that are specified in these requests and have not <code>null</code> values are updated. All other properties are ignored.</p>",
        "operationId": "changeRating",
        "parameters": [
          {
            "name": "ratingId",
            "in": "path",
            "description": "The ID of the rating to be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The properties of the rating to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeRatingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rating successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rating"
                }
              }
            }
          },
          "404": {
            "description": "Rating with given ID could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/relations": {
      "get": {
        "tags": [
          "Relations"
        ],
        "summary": "Returns relations matching the given search criteria.",
        "description": "Returns relations matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned relations satisfy all constraints that are specified in this search criteria. By default a result containing 1000 relations is returned.",
        "operationId": "findRelations",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>. Cursor should be preferred over offset for better performance and stable results. It is forbidden to use both in the same request.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped. For cursor pagination this parameter is ignored and count is skipped.",
            "deprecated": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Cursor for the current page of results. To retrieve the first page with cursor pagination you need to pass this parameter with an empty value (must be non-null). For the next pages, the value must be taken from the response (<code>nextCursor</code> property).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relationTypeId",
            "in": "query",
            "description": "The ID of the type of relations to search for.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sourceId",
            "in": "query",
            "description": "The ID of the source of relations to search for.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "targetId",
            "in": "query",
            "description": "The ID of the target of relations to search for.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sourceTargetLogicalOperator",
            "in": "query",
            "description": "The logical operator determining how to combine the source and target criteria: AND or OR.",
            "schema": {
              "type": "string",
              "enum": [
                "AND",
                "OR"
              ],
              "default": "AND"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationPagedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Relations"
        ],
        "summary": "Adds a new relation.",
        "description": "Adds a new relation.",
        "operationId": "addRelation",
        "requestBody": {
          "description": "The properties of the relation to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRelationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/relations/bulk": {
      "post": {
        "tags": [
          "Relations"
        ],
        "summary": "Adds multiple relations in one go.",
        "description": "Adds multiple relations in one gos.",
        "operationId": "addRelations",
        "requestBody": {
          "description": "List of the properties of the relations to be added.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddRelationRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created - The request has been fulfilled and resulted in a new resource being created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RelationImpl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Relations"
        ],
        "summary": "Removes multiple relations.",
        "description": "Removes multiple relations.",
        "operationId": "removeRelations",
        "requestBody": {
          "description": "the IDs of the relations to be removed",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Relations"
        ],
        "summary": "Changes multiple relations.",
        "description": "Changes multiple relations.",
        "operationId": "changeRelations",
        "requestBody": {
          "description": "The list of properties of the relations to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeRelationRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RelationImpl"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/relations/{relationId}": {
      "get": {
        "tags": [
          "Relations"
        ],
        "summary": "Returns a relation identified by given id.",
        "description": "Returns a relation identified by given id.",
        "operationId": "getRelation",
        "parameters": [
          {
            "name": "relationId",
            "in": "path",
            "description": "the ID of the relation",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationImpl"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Relations"
        ],
        "summary": "Removes a relation identified by given id.",
        "description": "Removes a relation identified by given id.",
        "operationId": "removeRelation",
        "parameters": [
          {
            "name": "relationId",
            "in": "path",
            "description": "the ID of the relation to remove",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - The server has fulfilled the request but does not need to return an entity-body."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Relations"
        ],
        "summary": "Changes the relation with the information that is present in the request.",
        "description": "Changes the relation with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeRelation",
        "parameters": [
          {
            "name": "relationId",
            "in": "path",
            "description": "The ID of the relation to be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The properties of the relation to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeRelationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK - The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationImpl"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Request data is malformed or illegal. The request body will contain additional information."
          },
          "401": {
            "description": "Unauthorized - Authentication has failed or has not been provided."
          },
          "402": {
            "description": "License Problem - There was a problem related to the license."
          },
          "403": {
            "description": "Forbidden - Insufficient permissions to perform the requested operation."
          },
          "404": {
            "description": "Not Found - One of the requested resources could not be found or the requested URI is invalid."
          },
          "500": {
            "description": "Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request. Please report a problem as this situation should not occur."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/responsibilities/bulk": {
      "post": {
        "tags": [
          "Responsibilities"
        ],
        "summary": "Adds multiple responsibilities in one go.",
        "description": "Adds multiple responsibilities in one go. Assigns the given users to the resources with the given roles.",
        "operationId": "addResponsibilities",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddResponsibilityRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Responsibilities successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponsibilityImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Responsibilities"
        ],
        "summary": "Removes multiple responsibilities in one go.",
        "description": "Removes multiple responsibilities in one go identified by given ids.",
        "operationId": "removeResponsibilities",
        "requestBody": {
          "description": "The unique identifiers of the responsibilities.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/responsibilities": {
      "get": {
        "tags": [
          "Responsibilities"
        ],
        "summary": "Finds responsibilities.",
        "description": "Returns responsibilities matching the given search criteria.  Only parameters that are specified in this request and have not <code>null</code> values are used for filtering.  All other parameters are ignored.  The returned responsibilities satisfy all constraints that are specified in this search criteria.  By default a result containing 1000 responsibilities is returned.",
        "operationId": "findResponsibilities",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "resourceIds",
            "in": "query",
            "description": "The list of IDs of the resources for which the responsibilities should be found.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "ownerIds",
            "in": "query",
            "description": "The list of IDs of the owners for which the responsibilities should be found.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "roleIds",
            "in": "query",
            "description": "The list of IDs of the roles for which the responsibilities should be found.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "includeInherited",
            "in": "query",
            "description": "Whether inherited responsibilities should be included in the search results.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "globalOnly",
            "in": "query",
            "description": "Whether only global responsibilities should be searched.",
            "deprecated": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field that should be used as reference for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "CREATED_BY",
                "CREATED_ON",
                "LAST_MODIFIED"
              ],
              "default": "LAST_MODIFIED"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "DESC"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Indicates which type of responsibilities should be searched for. Usage is mutually exclusive with the deprecated globalOnly flag.",
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "GLOBAL",
                "RESOURCE"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResponseResponsibility"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Responsibilities"
        ],
        "summary": "Adds a new responsibility.",
        "description": "Adds new responsibility. Assigns given user to resource with given role.",
        "operationId": "addResponsibility",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddResponsibilityRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Responsibility successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsibilityImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/responsibilities/{responsibilityId}": {
      "get": {
        "tags": [
          "Responsibilities"
        ],
        "summary": "Returns the responsibility identified by the given id.",
        "description": "Returns the responsibility identified by the given id.",
        "operationId": "getResponsibility",
        "parameters": [
          {
            "name": "responsibilityId",
            "in": "path",
            "description": "The unique identifier of the responsibility.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsibilityImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Responsibilities"
        ],
        "summary": "Removes the responsibility identified by the given id.",
        "description": "Removes the responsibility identified by the given id.",
        "operationId": "removeResponsibility",
        "parameters": [
          {
            "name": "responsibilityId",
            "in": "path",
            "description": "The unique identifier of the responsibility.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/tags/{tagId}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get tag.",
        "description": "Returns the tag with the specified ID.",
        "operationId": "getTag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The ID of the tag.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "404": {
            "description": "Tag could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Remove tag.",
        "description": "Removes the tag with the specified ID.",
        "operationId": "removeTag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The ID of the tag.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Tag successfully removed."
          },
          "404": {
            "description": "Tag with given ID could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Tags"
        ],
        "summary": "Change tag.",
        "description": "Modifies the tag with the specified ID.",
        "operationId": "changeTag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The ID of the tag to be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The properties of the tag to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeTagRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "404": {
            "description": "Tag could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/tags/exists/{tagName}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Check tag name.",
        "description": "Checks whether a tag with given name exists. Returns <code>true</code> if a tag with given name exists, <code>false</code> otherwise.",
        "operationId": "exists",
        "parameters": [
          {
            "name": "tagName",
            "in": "path",
            "description": "The name of the tag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encoded",
            "in": "query",
            "description": "Whether the tag name is encoded using URL and Filename safe type base64 encoding scheme.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "true if a tag exists, false otherwise.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Find tags.",
        "description": "Returns tags matching the given search criteria.The returned tags satisfy all constraints that are specified in this search criteria. By default, the result contains 1000 tags.",
        "operationId": "findTags",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the tag to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response with found tags.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/tags/asset/{assetId}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get asset tags.",
        "description": "Returns all the tags of the asset with the specified ID.",
        "operationId": "getTagsByAssetId",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "The ID of the asset.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tags of given asset.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No tags found for asset."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/tags/merge": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Merge tags.",
        "description": "Merges two tags into one. All assets tagged with the fromId tag receive the toId tag and the fromId tag is removed.",
        "operationId": "mergeTags",
        "requestBody": {
          "description": "The IDs of the tags to be merged.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeTagsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Tags successfully merged."
          },
          "404": {
            "description": "Tag with ID fromId or toId could not be found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/tags/bulk": {
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Remove tags.",
        "description": "Removes multiple tags with the specified IDs.",
        "operationId": "removeTags",
        "requestBody": {
          "description": "The IDs of the tags to be removed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "All tags successfully removed."
          },
          "404": {
            "description": "Any tag with given ID could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/jobs/{jobId}/canceled": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Cancels given Job.",
        "description": "Calling this endpoint will return immediately and not wait until the Job is actually stopped.",
        "operationId": "cancelJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The unique identifier of the Job.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelJobRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Job cancellation accepted."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Find jobs",
        "description": "Returns jobs matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored.",
        "operationId": "findJobs",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "The ID of the user who created the searched job.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the job to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          },
          {
            "name": "states",
            "in": "query",
            "description": "The list of states which the jobs should be searched for.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "WAITING",
                  "RUNNING",
                  "CANCELING",
                  "COMPLETED",
                  "CANCELED",
                  "ERROR"
                ]
              }
            }
          },
          {
            "name": "results",
            "in": "query",
            "description": "The list of results which the jobs should be searched for.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "NOT_SET",
                  "SUCCESS",
                  "COMPLETED_WITH_ERROR",
                  "FAILURE",
                  "ABORTED"
                ]
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "The list of types of the jobs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "maxVisibility",
            "in": "query",
            "description": "The maximum visibility of the job. Ignored, use visible instead",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 2147483647
            }
          },
          {
            "name": "visible",
            "in": "query",
            "description": "The visibility of the jobs. Defaults to all jobs (both visible and non-visible).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "DESC"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field that should be used as reference for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "NAME",
                "TYPE",
                "CREATED_ON",
                "CREATED_BY",
                "START_DATE",
                "END_DATE",
                "STATE",
                "RESULT"
              ],
              "default": "CREATED_ON"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response with jobs matching filter criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Returns the Job identified by the given UUID.",
        "description": "Returns the Job identified by the given UUID.",
        "operationId": "getJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The ID of the job.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "404": {
            "description": "Job not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/mappings": {
      "get": {
        "tags": [
          "Mappings"
        ],
        "summary": "Returns mappings matching the given search criteria.",
        "description": "Returns mappings matching the given search criteria.<p>Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored.</p>The returned synchronization information satisfies all constraints that are specified in this search criteria. By default a result containing 1000 mappings is returned.</p>",
        "operationId": "findMappings",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "externalSystemId",
            "in": "query",
            "description": "The ID of the external system that the mapped resource belongs to.",
            "schema": {
              "maxLength": 36,
              "minLength": 1,
              "type": "string"
            },
            "example": "EXT_BI_SYS"
          },
          {
            "name": "externalEntityId",
            "in": "query",
            "description": "The external ID of the mapped resource.",
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "type": "string"
            },
            "example": "ID_1234"
          },
          {
            "name": "mappedResourceType",
            "in": "query",
            "description": "The type of the mapped resource.",
            "schema": {
              "type": "string",
              "enum": [
                "Asset",
                "Domain",
                "Community"
              ]
            },
            "example": "Asset"
          },
          {
            "name": "syncAction",
            "in": "query",
            "description": "The type of the action performed during last successful synchronization.",
            "schema": {
              "type": "string",
              "description": "Represents the type of the action performed during last successful synchronization",
              "enum": [
                "ADD",
                "UPDATE",
                "REMOVE"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response with found synchronization information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MappingPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Mappings"
        ],
        "summary": "Adds a new mapping.",
        "description": "Adds a new mapping.",
        "operationId": "addMapping",
        "requestBody": {
          "description": "The properties of the mapping to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMappingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Mapping successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                }
              }
            }
          },
          "400": {
            "description": "A mapping with the given ID already exists"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/mappings/bulk": {
      "post": {
        "tags": [
          "Mappings"
        ],
        "summary": "Adds new mappings.",
        "description": "Adds new mappings.",
        "operationId": "addMappings",
        "requestBody": {
          "description": "The properties of the mappings to be added.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddMappingRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Mappings successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Mapping"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Mappings"
        ],
        "summary": "Changes multiple mappings identified by their ids.",
        "description": "Changes multiple mappings identified by their <code>id</code>s.<p>Change the mappings identified by its <code>id</code>s with the information that is present in the requests. Only properties that are specified in these requests and have not <code>null</code> values are updated. All other properties are ignored.</p>",
        "operationId": "changeMappings",
        "requestBody": {
          "description": "The properties of the mappings to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeMappingRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mappings successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Mapping"
                  }
                }
              }
            }
          },
          "404": {
            "description": "One of the mappings could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/mappings/{mappingId}": {
      "get": {
        "tags": [
          "Mappings"
        ],
        "summary": "Returns a mapping identified by given id.",
        "description": "Returns a mapping identified by given <code>id</code>.",
        "operationId": "getMapping",
        "parameters": [
          {
            "name": "mappingId",
            "in": "path",
            "description": "The id of the mapping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mapping successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                }
              }
            }
          },
          "404": {
            "description": "Mapping could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Mappings"
        ],
        "summary": "Removes the mapping identified by its id.",
        "description": "Removes the mapping identified by its <code>id</code>.<p>If the mapping does not exist, an exception is NOT thrown.",
        "operationId": "removeMapping",
        "parameters": [
          {
            "name": "mappingId",
            "in": "path",
            "description": "The id of the mapping.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Mapping successfully removed."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Mappings"
        ],
        "summary": "Changes the mapping identified by its id.",
        "description": "Changes the mapping identified by its <code>id</code>.<p>Change the mapping identified by its <code>id</code> with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.</p>",
        "operationId": "changeMapping",
        "parameters": [
          {
            "name": "mappingId",
            "in": "path",
            "description": "The ID of the mapping to be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The properties of the mapping to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMappingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mapping successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                }
              }
            }
          },
          "404": {
            "description": "Mapping could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/mappings/externalSystem/{externalSystemId}/externalEntity/{externalEntityId}": {
      "get": {
        "tags": [
          "Mappings"
        ],
        "summary": "Returns a mapping identified by its external ids.",
        "description": "Returns a mapping identified by its external <code>id</code>s.",
        "operationId": "getMappingByExternalEntity",
        "parameters": [
          {
            "name": "externalSystemId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 1,
              "type": "string",
              "description": "The ID of the external system that the mapped resource belongs to.",
              "example": "EXT_BI_SYS"
            }
          },
          {
            "name": "externalEntityId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "type": "string",
              "description": "The external ID of the mapped resource.",
              "example": "ID_1234"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mapping successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                }
              }
            }
          },
          "404": {
            "description": "Mapping could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Mappings"
        ],
        "summary": "Removes the mapping identified by its external ids.",
        "description": "Removes the mapping identified by its external <code>id</code>s.<p>If the mapping does not exist, an exception is NOT thrown.",
        "operationId": "removeMappingByExternalEntity",
        "parameters": [
          {
            "name": "externalSystemId",
            "in": "path",
            "description": "The external system id of the mapping to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalEntityId",
            "in": "path",
            "description": "The external entity id of the mapping to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Mapping successfully removed."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Mappings"
        ],
        "summary": "Changes the mapping identified by its external ids.",
        "description": "Changes the mapping identified by its external <code>id</code>s.<p>Changes the mapping identified by its external <code>id</code>s with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.</p>",
        "operationId": "changeMappingByExternalEntity",
        "parameters": [
          {
            "name": "externalSystemId",
            "in": "path",
            "description": "The external system ID of the mapping to be changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalEntityId",
            "in": "path",
            "description": "The external entity ID of the mapping to be changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The properties of the mapping to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMappingByExternalEntityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mapping successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                }
              }
            }
          },
          "404": {
            "description": "Mapping could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/mappings/externalSystem/{externalSystemId}/mappedResource/{mappedResourceId}": {
      "get": {
        "tags": [
          "Mappings"
        ],
        "summary": "Returns a mapping identified by its external system id and mapped resource id.",
        "description": "Returns a mapping identified by its external system <code>id</code> and mapped resource <code>id</code>.",
        "operationId": "getMappingByMappedResource",
        "parameters": [
          {
            "name": "externalSystemId",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 36,
              "minLength": 1,
              "type": "string",
              "description": "The ID of the external system that the mapped resource belongs to.",
              "example": "EXT_BI_SYS"
            }
          },
          {
            "name": "mappedResourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the mapped resource.",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mapping successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                }
              }
            }
          },
          "404": {
            "description": "Mapping could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Mappings"
        ],
        "summary": "Removes the mapping identified by its external system id and mapped resource id.",
        "description": "Removes the mapping identified by its external system <code>id</code> and mapped resource <code>id</code>.<p>If the mapping does not exist, an exception is NOT thrown.",
        "operationId": "removeMappingByMappedResource",
        "parameters": [
          {
            "name": "externalSystemId",
            "in": "path",
            "description": "The external system id of the mapping to be changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mappedResourceId",
            "in": "path",
            "description": "The mapped resource id of the mapping to be changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Mapping successfully removed."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Mappings"
        ],
        "summary": "Changes the mapping identified by its external system id and mapped resource id.",
        "description": "Changes the mapping identified by its external system <code>id</code> and mapped resource <code>id</code>.<p>Changes the mapping identified by its external system <code>id</code> and mapped resource <code>id</code> with the information that is present in the requests. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.</p>",
        "operationId": "changeMappingByMappedResource",
        "parameters": [
          {
            "name": "externalSystemId",
            "in": "path",
            "description": "The external system id of the mapping to be changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mappedResourceId",
            "in": "path",
            "description": "The mapped resource id of the mapping to be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The properties of the mapping to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMappingByMappedResourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mapping successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mapping"
                }
              }
            }
          },
          "404": {
            "description": "Mapping could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/mappings/externalSystem/externalEntity/bulk": {
      "patch": {
        "tags": [
          "Mappings"
        ],
        "summary": "Changes the mappings identified by their external ids.",
        "description": "Changes the mappings identified by their external <code>id</code>s.<p>Changes the mappings identified by their external <code>id</code>s with the information that is present in the requests. Only properties that are specified in these requests and have not <code>null</code> values are updated. All other properties are ignored.</p>",
        "operationId": "changeMappingsByExternalEntities",
        "requestBody": {
          "description": "The properties of the mappings to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeMappingByExternalEntityRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mappings successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Mapping"
                  }
                }
              }
            }
          },
          "404": {
            "description": "One of the mappings could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/mappings/externalSystem/mappedResource/bulk": {
      "patch": {
        "tags": [
          "Mappings"
        ],
        "summary": "Changes the mapping identified by their external system ids and mapped resource ids.",
        "description": "Changes the mapping identified by their external system <code>id</code>s and mapped resource <code>id</code>s.<p>Changes the mapping identified by their external system <code>id</code>s and mapped resource <code>id</code>s with the information that is present in the requests. Only properties that are specified in these requests and have not <code>null</code> values are updated. All other properties are ignored.</p>",
        "operationId": "changeMappingsByMappedResources",
        "requestBody": {
          "description": "The properties of the mappings to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeMappingByMappedResourceRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mappings successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Mapping"
                  }
                }
              }
            }
          },
          "404": {
            "description": "One of the mappings could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/mappings/externalSystem/{externalSystemId}/removalJobs": {
      "post": {
        "tags": [
          "Mappings"
        ],
        "summary": "Removes all the mappings identified by given external system id.",
        "description": "Removes all the mappings identified by given external system <code>id</code>.",
        "operationId": "removeMappingsByExternalSystemInJob",
        "parameters": [
          {
            "name": "externalSystemId",
            "in": "path",
            "description": "The id of the external system of the mappings that will be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mappings removal successfully started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/mappings/removalJobs": {
      "post": {
        "tags": [
          "Mappings"
        ],
        "summary": "Removes multiple mappings in job.",
        "description": "Removes multiple mappings in job.<p>If any mapping does not exist, an exception is NOT thrown.",
        "operationId": "removeMappingsInJob",
        "requestBody": {
          "description": "The ids of the mappings to be removed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Mappings removal successfully started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assetTypes": {
      "get": {
        "tags": [
          "Asset Types"
        ],
        "summary": "Find asset types matching criteria",
        "description": "Returns asset types matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. By default a result containing 1000 asset types is returned.",
        "operationId": "findAssetTypes",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the Asset Type to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "The ID of the parent to find the Asset Types in.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "excludeMeta",
            "in": "query",
            "description": "Whether the meta Asset Types should be excluded from the results or not.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "excludeFinal",
            "in": "query",
            "description": "Whether the final Asset Types should be excluded from the results or not.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "topLevel",
            "in": "query",
            "description": "Whether only top level Asset Types should be searched or not.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "displayNameEnabled",
            "in": "query",
            "description": "Whether only Asset Types with display names enabled (or disabled) should be searched.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search ran successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTypePagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Asset Types"
        ],
        "summary": "Add asset type",
        "description": "Adds a new asset type with the given parameters.",
        "operationId": "addAssetType",
        "requestBody": {
          "description": "The properties of the asset type to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAssetTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Asset type successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTypeImpl"
                }
              }
            }
          },
          "400": {
            "description": "An asset type with the given ID already exists"
          },
          "404": {
            "description": "Parent asset type not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assetTypes/bulk": {
      "post": {
        "tags": [
          "Asset Types"
        ],
        "summary": "Add multiple asset types",
        "description": "Adds multiple asset types in one go.",
        "operationId": "addAssetTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddAssetTypeRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Asset types successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTypeImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Asset Types"
        ],
        "summary": "Remove multiple asset types",
        "description": "Removes multiple asset types identified by the given IDs.",
        "operationId": "removeAssetTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Asset types removed"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Asset Types"
        ],
        "summary": "Change multiple asset types",
        "description": "Changes multiple asset types using the given parameters.",
        "operationId": "changeAssetTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeAssetTypeRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset types changed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTypeImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assetTypes/{assetTypeId}": {
      "get": {
        "tags": [
          "Asset Types"
        ],
        "summary": "Get asset type by ID",
        "description": "Returns the asset type having the given ID.",
        "operationId": "getAssetType",
        "parameters": [
          {
            "name": "assetTypeId",
            "in": "path",
            "description": "The ID of the asset type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset type found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTypeImpl"
                }
              }
            }
          },
          "404": {
            "description": "Asset type not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Asset Types"
        ],
        "summary": "Remove asset type by ID",
        "description": "Removes the asset type having the given ID.",
        "operationId": "removeAssetType",
        "parameters": [
          {
            "name": "assetTypeId",
            "in": "path",
            "description": "The ID of the asset type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Asset Types"
        ],
        "summary": "Change asset type",
        "description": "Changes the asset type using the given parameters. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeAssetType",
        "parameters": [
          {
            "name": "assetTypeId",
            "in": "path",
            "description": "The ID of the asset type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAssetTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Asset type changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTypeImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assetTypes/{assetTypeId}/parents": {
      "get": {
        "tags": [
          "Asset Types"
        ],
        "summary": "Find parent types",
        "description": "Finds all the parent asset types of the asset with the given ID.",
        "operationId": "findParentTypes",
        "parameters": [
          {
            "name": "assetTypeId",
            "in": "path",
            "description": "The unique identifier of the AssetType.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Parent asset types found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetTypeImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/assetTypes/{assetTypeId}/subTypes": {
      "get": {
        "tags": [
          "Asset Types"
        ],
        "summary": "Find asset subtypes",
        "description": "Finds all asset subtypes of an asset type, as specified by the request parameters.",
        "operationId": "findSubAssetTypes",
        "parameters": [
          {
            "name": "assetTypeId",
            "in": "path",
            "description": "The ID of the AssetType",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeParent",
            "in": "query",
            "description": "Whether parent Asset Type should be included in the search result.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "directSubTypesOnly",
            "in": "query",
            "description": "Whether we should only list the direct subtypes, or all subtypes.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Asset types found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTypePagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/attributeTypes": {
      "get": {
        "tags": [
          "Attribute Types"
        ],
        "summary": "Returns attribute types matching the given search criteria.",
        "description": "Returns attribute types matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned attribute types satisfy all constraints that are specified in this search criteria. By default a result containing 1000 attribute types is returned.",
        "operationId": "findAttributeTypes",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the Attribute Type to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          },
          {
            "name": "kind",
            "in": "query",
            "description": "The kind of the Attribute Type to search for.",
            "schema": {
              "type": "string",
              "enum": [
                "BOOLEAN",
                "STRING",
                "NUMERIC",
                "DATE",
                "SINGLE_VALUE_LIST",
                "MULTI_VALUE_LIST",
                "SCRIPT"
              ]
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "The language of the Attribute Type to search for. This property is only applicable to Attribute Types of kind \"Script\".",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statisticsEnabled",
            "in": "query",
            "description": "Whether the Attribute Types should be searched with statistics enabled or not. This property is only applicable to Attribute Types of kind \"Numeric\" or \"Boolean\".",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isInteger",
            "in": "query",
            "description": "Whether only integer-type Attribute Types should be searched or not. This property is only applicable to Attribute Types of kind \"Numeric\".",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field that should be used as reference for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "NAME",
                "KIND",
                "STATISTICS_ENABLED",
                "IS_INTEGER",
                "ALLOWED_VALUES"
              ],
              "default": "NAME"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "ASC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response of found Attribute Types.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeTypePagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Attribute Types"
        ],
        "summary": "Adds a new Attribute Type.",
        "description": "Adds a new Attribute Type.",
        "operationId": "addAttributeType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAttributeTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attribute Type successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeType"
                }
              }
            }
          },
          "400": {
            "description": "An attribute type with the given ID already exists"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/attributeTypes/bulk": {
      "post": {
        "tags": [
          "Attribute Types"
        ],
        "summary": "Adds multiple Attribute Types.",
        "description": "Adds multiple Attribute Types.",
        "operationId": "addAttributeTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddAttributeTypeRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attribute Types successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeType"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Attribute Types"
        ],
        "summary": "Removes multiple attribute types.",
        "description": "Removes multiple attribute types identified by the UUIDs passed as parameter.",
        "operationId": "removeAttributeTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Attribute Types"
        ],
        "summary": "Changes multiple attribute types.",
        "description": "Changes multiple attribute types with the information present in the request.",
        "operationId": "changeAttributeTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeAttributeTypeRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attribute Types successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeType"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/attributeTypes/{attributeTypeId}": {
      "get": {
        "tags": [
          "Attribute Types"
        ],
        "summary": "Returns the attribute type identified by given UUID.",
        "description": "Returns the attribute type identified by given UUID.",
        "operationId": "getAttributeType",
        "parameters": [
          {
            "name": "attributeTypeId",
            "in": "path",
            "description": "the unique identifier of the attribute type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute Type found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeType"
                }
              }
            }
          },
          "404": {
            "description": "Attribute Type not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Attribute Types"
        ],
        "summary": "Removes attribute type identified by given UUID.",
        "description": "Removes attribute type identified by given UUID.",
        "operationId": "removeAttributeType",
        "parameters": [
          {
            "name": "attributeTypeId",
            "in": "path",
            "description": "the unique identifier of the attribute type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Attribute Types"
        ],
        "summary": "Changes the attribute types.",
        "description": "Changes the attribute types with the information present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored. ",
        "operationId": "changeAttributeType",
        "parameters": [
          {
            "name": "attributeTypeId",
            "in": "path",
            "description": "the unique identifier of the attribute type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAttributeTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attribute Type successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeType"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/attributeTypes/name/{attributeTypeName}": {
      "get": {
        "tags": [
          "Attribute Types"
        ],
        "summary": "Returns the attribute type identified by given name.",
        "description": "Returns the attribute type identified by given name.",
        "operationId": "getAttributeTypeByName",
        "parameters": [
          {
            "name": "attributeTypeName",
            "in": "path",
            "description": "the unique identifier of the attribute type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attribute Type found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeType"
                }
              }
            }
          },
          "404": {
            "description": "Attribute Type not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/complexRelationTypes": {
      "get": {
        "tags": [
          "Complex Relation Types"
        ],
        "summary": "Returns complex relation types matching the given search criteria.",
        "description": "Returns complex relation types matching the given search criteria.\nOnly parameters that are specified in this request and have not <code>null</code> values are used for filtering.\nAll other parameters are ignored.\nThe returned complex relation types satisfy all constraints that are specified in this search criteria.\nBy default a result containing 1000 complex relation types is returned.",
        "operationId": "findComplexRelationTypes",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the Complex Relation Type to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response of found Complex Relation Types.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexRelationTypePagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Complex Relation Types"
        ],
        "summary": "Adds a new complex relation type.",
        "description": "Adds a new complex relation type.",
        "operationId": "addComplexRelationType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddComplexRelationTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Complex relation type successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexRelationTypeImpl"
                }
              }
            }
          },
          "400": {
            "description": "A complex relation type with the given ID already exists"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/complexRelationTypes/{complexRelationTypeId}": {
      "get": {
        "tags": [
          "Complex Relation Types"
        ],
        "summary": "Returns complex relation type identified by given UUID.",
        "description": "Returns complex relation type identified by given UUID.",
        "operationId": "getComplexRelationType",
        "parameters": [
          {
            "name": "complexRelationTypeId",
            "in": "path",
            "description": "the unique identifier of the complex relation type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Complex relation type found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexRelationTypeImpl"
                }
              }
            }
          },
          "404": {
            "description": "Complex relation type not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Complex Relation Types"
        ],
        "summary": "Removes complex relation type identified by given UUID.",
        "description": "Removes complex relation type identified by given UUID.",
        "operationId": "removeComplexRelationType",
        "parameters": [
          {
            "name": "complexRelationTypeId",
            "in": "path",
            "description": "the unique identifier of the complex relation type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Complex Relation Types"
        ],
        "summary": "Changes the complex relation type.",
        "description": "Changes the complex relation type with the information that is present in the request.\nOnly properties that are specified in this request and have not <code>null</code> values are updated.\nAll other properties are ignored.",
        "operationId": "changeComplexRelationType",
        "parameters": [
          {
            "name": "complexRelationTypeId",
            "in": "path",
            "description": "the unique identifier of the complex relation type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeComplexRelationTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Complex relation type successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplexRelationTypeImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/domainTypes": {
      "get": {
        "tags": [
          "Domain Types"
        ],
        "summary": "Returns domain types matching the given search criteria.",
        "description": "Returns domain types matching the given search criteria.\nOnly parameters that are specified in this request and have not <code>null</code> values are used for filtering.\nAll other parameters are ignored.\nThe returned domain types satisfy all constraints that are specified in this search criteria.\nBy default a result containing 1000 domain types is returned.",
        "operationId": "findDomainTypes",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the Domain Type to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. The search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "The ID of the parent to find the Domain Types in.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "excludeMeta",
            "in": "query",
            "description": "Whether the meta Domain Types should be excluded from search or not.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "topLevel",
            "in": "query",
            "description": "Whether only top level Domain Types should be searched or not.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response of found Domain types.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainTypePagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Domain Types"
        ],
        "summary": "Adds a new domain type.",
        "description": "Adds a new domain type.",
        "operationId": "addDomainType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDomainTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Domain type successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainTypeImpl"
                }
              }
            }
          },
          "400": {
            "description": "A domain type with the given ID already exists"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/domainTypes/bulk": {
      "post": {
        "tags": [
          "Domain Types"
        ],
        "summary": "Adds multiple new domain types.",
        "description": "Adds multiple new domain types.",
        "operationId": "addDomainTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddDomainTypeRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Domain types successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DomainTypeImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Domain Types"
        ],
        "summary": "Removes multiple domain types.",
        "description": "Removes multiple domain types identified by the UUIDs passed as parameter.",
        "operationId": "removeDomainTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Domain Types"
        ],
        "summary": "Changes the domain types.",
        "description": "Changes the domain types with the information present in the request.",
        "operationId": "changeDomainTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeDomainTypeRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain types successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DomainTypeImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/domainTypes/{domainTypeId}": {
      "get": {
        "tags": [
          "Domain Types"
        ],
        "summary": "Returns domain type identified by given UUID.",
        "description": "Returns domain type identified by given UUID.",
        "operationId": "getDomainType",
        "parameters": [
          {
            "name": "domainTypeId",
            "in": "path",
            "description": "the unique identifier of the domain type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domain Type found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainTypeImpl"
                }
              }
            }
          },
          "404": {
            "description": "Domain Type not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Domain Types"
        ],
        "summary": "Removes domain type identified by given UUID.",
        "description": "Removes domain type identified by given UUID.",
        "operationId": "removeDomainType",
        "parameters": [
          {
            "name": "domainTypeId",
            "in": "path",
            "description": "the unique identifier of the domain type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Domain Types"
        ],
        "summary": "Changes the domain type.",
        "description": "Changes the domain type with the information present in the request.\nOnly properties that are specified in this request and have not <code>null</code> values are updated.\nAll other properties are ignored.\n",
        "operationId": "changeDomainType",
        "parameters": [
          {
            "name": "domainTypeId",
            "in": "path",
            "description": "the unique identifier of the domain type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeDomainTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain type successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainTypeImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/domainTypes/{domainTypeId}/subTypes": {
      "get": {
        "tags": [
          "Domain Types"
        ],
        "summary": "Returns sub domain types matching the given search criteria.",
        "description": "Returns sub domain types matching the given search criteria.",
        "operationId": "findSubDomainTypes",
        "parameters": [
          {
            "name": "domainTypeId",
            "in": "path",
            "description": "the unique identifier of the domain type",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "domainTypeId",
            "in": "query",
            "description": "The ID of the Domain Type to search the subtypes of. Because it duplicates the corresponding domainTypeId path parameter and prevents some client code generators from working as expected, this will be removed in the next quarterly release.",
            "required": true,
            "deprecated": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeParent",
            "in": "query",
            "description": "Whether parent Domain Type should be included in the search result.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response of found sub Domain types.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainTypePagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/relationTypes": {
      "get": {
        "tags": [
          "Relation Types"
        ],
        "summary": "Finds all the relation types matching the given criteria.",
        "description": "Returns relation types matching the given search criteria.\nOnly parameters that are specified in this request and have not <code>null</code> values are used for filtering.\nAll other parameters are ignored.\nThe returned relation types satisfy all constraints that are specified in this search criteria.\nBy default a result containing 1000 relation types is returned.\n",
        "operationId": "findRelationTypes",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "sourceTypeId",
            "in": "query",
            "description": "The ID of the source type of the Relation Type to search for.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "sourceTypeName",
            "in": "query",
            "description": "The name of the source type of the Relation Type to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "query",
            "description": "The name of the role that the source plays to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetTypeId",
            "in": "query",
            "description": "The ID of the target type of the Relation Type to search for.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "targetTypeName",
            "in": "query",
            "description": "The name of the target type of the Relation Type to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "coRole",
            "in": "query",
            "description": "The name of the role that the target plays to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field that should be used as reference for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "ROLE",
                "CO_ROLE"
              ],
              "default": "ROLE"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "ASC"
            }
          },
          {
            "name": "roleCoRoleLogicalOperator",
            "in": "query",
            "description": "The logical operator determining how to combine the role and coRole criteria: AND or OR.",
            "schema": {
              "type": "string",
              "enum": [
                "AND",
                "OR"
              ],
              "default": "AND"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response of found Relation types.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypePagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Relation Types"
        ],
        "summary": "Adds a new relation type.",
        "description": "Adds a new relation type.",
        "operationId": "addRelationType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRelationTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Relation type successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypeImpl"
                }
              }
            }
          },
          "400": {
            "description": "A relation type with the given ID already exists"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/relationTypes/bulk": {
      "post": {
        "tags": [
          "Relation Types"
        ],
        "summary": "Adds multiple new relation type.",
        "description": "Adds multiple new relation type.",
        "operationId": "addRelationTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddRelationTypeRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Relation types successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RelationTypeImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Relation Types"
        ],
        "summary": "Removes multiple relation types.",
        "description": "Removes multiple relation types identified by the UUIDs passed as parameter.",
        "operationId": "removeRelationTypes",
        "requestBody": {
          "description": "The unique identifiers of the relationTypes",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Relation Types"
        ],
        "summary": "Changes the relation types.",
        "description": "Changes the relation types with the information that is present in the request.\nOnly properties that are specified in this request and have not <code>null</code> values are updated.\nAll other properties are ignored.",
        "operationId": "changeRelationTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeRelationTypeRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Relation types successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RelationTypeImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/relationTypes/{relationTypeId}": {
      "get": {
        "tags": [
          "Relation Types"
        ],
        "summary": "Returns relation type identified by given UUID.",
        "description": "Returns relation type identified by given UUID.",
        "operationId": "getRelationType",
        "parameters": [
          {
            "name": "relationTypeId",
            "in": "path",
            "description": "The unique identifier of the relationType",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relation Type found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypeImpl"
                }
              }
            }
          },
          "404": {
            "description": "Relation Type not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Relation Types"
        ],
        "summary": "Removes relation type identified by given UUID.",
        "description": "Removes relation type identified by given UUID.",
        "operationId": "removeRelationType",
        "parameters": [
          {
            "name": "relationTypeId",
            "in": "path",
            "description": "The unique identifier of the relationType",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Relation Types"
        ],
        "summary": "Changes the relation type.",
        "description": "Changes the relation type with the information that is present in the request.\nOnly properties that are specified in this request and have not <code>null</code> values are updated.\nAll other properties are ignored.",
        "operationId": "changeRelationType",
        "parameters": [
          {
            "name": "relationTypeId",
            "in": "path",
            "description": "The unique identifier of the relationType",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeRelationTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Relation type successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypeImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/statuses": {
      "get": {
        "tags": [
          "Statuses"
        ],
        "summary": "Returns statuses matching the given search criteria.",
        "description": "Returns statuses matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned statuses satisfy all constraints that are specified in this search criteria. By default a result containing 1000 statuses is returned. ",
        "operationId": "findStatuses",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the Status to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of the Status to search for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response with found Status information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Statuses"
        ],
        "summary": "Adds a new Status.",
        "description": "Adds a new Status.",
        "operationId": "addStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddStatusRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Status successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusImpl"
                }
              }
            }
          },
          "400": {
            "description": "A status with the given ID already exists"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/statuses/bulk": {
      "post": {
        "tags": [
          "Statuses"
        ],
        "summary": "Adds multiple statuses in one go.",
        "description": "Adds multiple statuses in one go.",
        "operationId": "addStatuses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddStatusRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Statuses successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Statuses"
        ],
        "summary": "Removes multiple statuses.",
        "description": "Removes multiple statuses.",
        "operationId": "removeStatuses",
        "requestBody": {
          "description": "The indentifiers of the Statuses.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Statuses removed."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Statuses"
        ],
        "summary": "Changes multiple statuses in one go.",
        "description": "Changes multiple statuses in one go.",
        "operationId": "changeStatuses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeStatusRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Statuses were successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/statuses/{statusId}": {
      "get": {
        "tags": [
          "Statuses"
        ],
        "summary": "Returns the Status identified by the given id.",
        "description": "Returns the Status identified by the given id.",
        "operationId": "getStatus",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "description": "The <code>id</code> of the Status",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusImpl"
                }
              }
            }
          },
          "404": {
            "description": "Status not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Statuses"
        ],
        "summary": "Removes the Status identified by the given id.",
        "description": "Removes the Status identified by the given id.",
        "operationId": "removeStatus",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "description": "The <code>id</code> of the Status.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status removed."
          },
          "404": {
            "description": "Status not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Statuses"
        ],
        "summary": "Changes the status with the information that is present in the request.",
        "description": "Changes the status with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeStatus",
        "parameters": [
          {
            "name": "statusId",
            "in": "path",
            "description": "The unique identifier of the status.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Statuses were successfully changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/statuses/name/{statusName}": {
      "get": {
        "tags": [
          "Statuses"
        ],
        "summary": "Returns the Status identified by the given name.",
        "description": "Returns the Status identified by the given name.",
        "operationId": "getStatusByName",
        "parameters": [
          {
            "name": "statusName",
            "in": "path",
            "description": "The name that identifies the Status.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusImpl"
                }
              }
            }
          },
          "404": {
            "description": "Status not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/navigation/most_viewed": {
      "get": {
        "tags": [
          "Navigation Statistics"
        ],
        "summary": "Find most viewed assets.",
        "description": "Returns the most viewed assets by all users, with navigation-related info.",
        "operationId": "findMostViewedAssets",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "period",
            "in": "query",
            "description": "The time span for which most viewed assets should be found. This time span must be expressed in milliseconds.<br/>For instance, to get most viewed assets for last 24 hours, period would be <code>86400000</code>.<br/>If it's unset (period = 0) looks for all time most viewed assets.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "isGuestExcluded",
            "in": "query",
            "description": "Whether guest visits should be excluded from result.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged response with found navigation statistics ordered by number of views descending. By default, the result contains up to 1000 navigation statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavigationStatisticsEntryPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/navigation/recently_viewed": {
      "get": {
        "tags": [
          "Navigation Statistics"
        ],
        "summary": "Find recently viewed assets.",
        "description": "Returns the assets that were recently viewed by the current user.",
        "operationId": "findRecentlyViewedAssets",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged response with found navigation statistics ordered by last viewed date descending. Views number is not calculated. By default, the result contains up to 1000 navigation statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NavigationStatisticsEntryPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/dataQualityRules": {
      "get": {
        "tags": [
          "Data Quality Rules"
        ],
        "summary": "Returns data quality rules matching the given search criteria.",
        "description": "Returns data quality rules matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned data quality rules satisfy all constraints that are specified in this search criteria. By default a result containing 1000 data quality rules is returned.",
        "operationId": "findDataQualityRules",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the dataquality rule to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field that should be used as reference for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "NAME"
              ],
              "default": "NAME"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "ASC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response with found DataQualityRule information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataQualityRulePagedResponse"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Data Quality Rules"
        ],
        "summary": "Adds a new data quality rule.",
        "description": "Adds a new data quality rule.",
        "operationId": "addDataQualityRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataQualityRuleRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Data quality rule successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataQualityRuleImpl"
                }
              }
            }
          },
          "400": {
            "description": "A data quality rule with the given ID already exists"
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/dataQualityRules/{dataQualityRuleId}": {
      "get": {
        "tags": [
          "Data Quality Rules"
        ],
        "summary": "Returns the DataQualityRule identified by given id.",
        "description": "Returns the DataQualityRule identified by given id.",
        "operationId": "getDataQualityRule",
        "parameters": [
          {
            "name": "dataQualityRuleId",
            "in": "path",
            "description": "the unique identifier of the data quality rule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DataQualityRule found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataQualityRuleImpl"
                }
              }
            }
          },
          "404": {
            "description": "DataQualityRule not found."
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Data Quality Rules"
        ],
        "summary": "Removes the DataQualityRule identified by the given id.",
        "description": "Removes the DataQualityRule identified by the given id.",
        "operationId": "removeDataQualityRule",
        "parameters": [
          {
            "name": "dataQualityRuleId",
            "in": "path",
            "description": "the unique identifier of the data quality rule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DataQualityRule removed."
          },
          "404": {
            "description": "DataQualityRule not found."
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Data Quality Rules"
        ],
        "summary": "Changes the data quality rule with the information that is present in the request.",
        "description": "Changes the data quality rule with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeDataQualityRule",
        "parameters": [
          {
            "name": "dataQualityRuleId",
            "in": "path",
            "description": "the unique identifier of the data quality rule",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeDataQualityRuleRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataQualityRuleImpl"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/export/csv": {
      "post": {
        "tags": [
          "Output Module"
        ],
        "summary": "Exports results in CSV format, returns the results immediately.",
        "description": "<p>Performs an Output Module query and exports the results immediately in CSV format.</p><p>Please note that the TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>",
        "operationId": "exportCSV",
        "parameters": [
          {
            "name": "validationEnabled",
            "in": "query",
            "description": "Determines if the TableViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is <code>false</code> for backward compatibility reasons but it is strongly advised to always enable this validation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "separator",
            "in": "query",
            "description": "The delimiter character used to separate entries. Default value is <code>';'</code>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quote",
            "in": "query",
            "description": "The delimiter character used for quoted entries. Default value  is <code>'\"'</code>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "escape",
            "in": "query",
            "description": "The delimiter character used to escape separator or quote character. Default value is <code>'\\\\'</code>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "headerRow",
            "in": "query",
            "description": "Whether a response should include a header (<code>true</code>) or not (<code>false</code>). Default value is <code>true</code>.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The JSON representation of TableViewConfig that describes the query to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-yaml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The string response in CSV format.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The parameter is invalid JSON TableViewConfig.",
            "content": {
              "application/json": {}
            }
          },
          "408": {
            "description": "Query execution time exceeded.",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/export/csv-job": {
      "post": {
        "tags": [
          "Output Module"
        ],
        "summary": "Exports results in CSV format, returns JSON representation of the async Job.",
        "description": "<p>Starts a job that performs an Output Module query and stores the results in a file in CSV format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.</p><p>Please note that the TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>",
        "operationId": "exportCSVInJob",
        "parameters": [
          {
            "name": "validationEnabled",
            "in": "query",
            "description": "Determines if the TableViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Validation is then performed immediately instead of only when the job is started. Please note that the validation will always take place during the Job execution, regardless of this parameter. Default value is false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The name of the file. By default the file name will be generated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "separator",
            "in": "query",
            "description": "The delimiter character used to separate entries. Default value is <code>';'</code>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quote",
            "in": "query",
            "description": "The delimiter character used for quoted entries. Default value  is <code>'\"'</code>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "escape",
            "in": "query",
            "description": "The delimiter character used to escape separator or quote character. Default value is <code>'\\\\'</code>.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "headerRow",
            "in": "query",
            "description": "Whether a response should include a header (<code>true</code>) or not (<code>false</code>). Default value is <code>true</code>.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "sendNotification",
            "in": "query",
            "description": "Whether an e-mail must be sent on completion of the job.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "The JSON representation of TableViewConfig that describes the query to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-yaml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON representation of the job that performs an Output Module query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                },
                "example": {
                  "id": "d680a9b7-46ac-4ec3-ae0b-0642043a0f94",
                  "resourceType": "Job",
                  "type": "EXPORT",
                  "state": "WAITING",
                  "result": "NOT_SET"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/export/csv-file": {
      "post": {
        "tags": [
          "Output Module"
        ],
        "summary": "Exports results in CSV format, returns information about created file.",
        "description": "<p>Performs an Output Module query and stores the query results in a file in CSV format. The id of the file is returned in the response.</p><p>Please note that the TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>",
        "operationId": "exportCSVToFile",
        "parameters": [
          {
            "name": "validationEnabled",
            "in": "query",
            "description": "Determines if the TableViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The name of the file. By default the file name will be generated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "separator",
            "in": "query",
            "description": "The delimiter character used to separate entries. Default value is <code>';'</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quote",
            "in": "query",
            "description": "The delimiter character used for quoted entries. Default value  is <code>'\"'</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "escape",
            "in": "query",
            "description": "The delimiter character used to escape separator or quote character. Default value is <code>'\\\\'</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "headerRow",
            "in": "query",
            "description": "Whether a response should include a header (<code>true</code>) or not (<code>false</code>). Default value is <code>true</code>",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The JSON representation of TableViewConfig that describes the query to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-yaml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The information about the file where the results are stored.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfoImpl"
                }
              }
            }
          },
          "400": {
            "description": "The parameter is invalid JSON TableViewConfig.",
            "content": {
              "application/json": {}
            }
          },
          "408": {
            "description": "Query execution time exceeded.",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/export/excel-job": {
      "post": {
        "tags": [
          "Output Module"
        ],
        "summary": "Exports results in Excel format, returns JSON representation of the async Job.",
        "description": "<p>Starts a job that performs an Output Module query and stores the results in a file in Excel format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.</p></p>Please note that the TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>",
        "operationId": "exportExcelInJob",
        "parameters": [
          {
            "name": "sendNotification",
            "in": "query",
            "description": "Whether an e-mail must be sent on completion of the job.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validationEnabled",
            "in": "query",
            "description": "Determines if the TableViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Validation is then performed immediately instead of only when the job is started. Please note that the validation will always take place during the Job execution, regardless of this parameter. Default value is false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The name of the file. By default the file name will be generated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sheetName",
            "in": "query",
            "description": "The name of the sheet. By default no sheet name is set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useXLSX",
            "in": "query",
            "description": "Whether the Excel file to export will be '.xlsx' file (<code>true</code>) or a '.xls' file (<code>false</code>. Default value is true.<br/>The parameter will be removed. In the future only XLSX files will be supported..",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "headerRow",
            "in": "query",
            "description": "Whether a response should include a header (<code>true</code>) or not (<code>false</code>). Default value is <code>true</code>.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The JSON/YAML representation of TableViewConfig that describes the query to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-yaml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON representation of the job that performs an Output Module query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                },
                "example": {
                  "id": "d680a9b7-46ac-4ec3-ae0b-0642043a0f94",
                  "resourceType": "Job",
                  "type": "EXPORT",
                  "state": "WAITING",
                  "result": "NOT_SET"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/export/excel-file": {
      "post": {
        "tags": [
          "Output Module"
        ],
        "summary": "Exports results in Excel format, returns information about created file.",
        "description": "<p>Performs an Output Module query and stores the query results in a file in Excel format. The id of the file is returned in the response.</p><p>Please note that the TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>",
        "operationId": "exportExcelToFile",
        "parameters": [
          {
            "name": "validationEnabled",
            "in": "query",
            "description": "Determines if the TableViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The name of the file. By default the file name will be generated.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sheetName",
            "in": "query",
            "description": "The name of the sheet. By default no sheet name is set.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useXLSX",
            "in": "query",
            "description": "Whether the Excel file to export will be '.xlsx' file (<code>true</code>) or a '.xls' file (<code>false</code>. Default value is true.<br/>The parameter will be removed. In the future only XLSX files will be supported.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "headerRow",
            "in": "query",
            "description": "Whether a response should include a header (<code>true</code>) or not (<code>false</code>). Default value is <code>true</code>.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The JSON/YAML representation of TableViewConfig that describes the query to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-yaml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The information about the file where the results are stored.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfoImpl"
                }
              }
            }
          },
          "400": {
            "description": "The parameter is invalid JSON TableViewConfig.",
            "content": {
              "application/json": {}
            }
          },
          "408": {
            "description": "Query execution time exceeded.",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/export/json": {
      "post": {
        "tags": [
          "Output Module"
        ],
        "summary": "Exports results in JSON format, returns the results immediately.",
        "description": "<p>Performs an Output Module query and exports the returns results immediately in JSON format.</p><p>Please note that the ViewConfig/TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>",
        "operationId": "exportJSON",
        "parameters": [
          {
            "name": "validationEnabled",
            "in": "query",
            "description": "Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "The JSON/YAML representation of ViewConfig/TableViewConfig that describes the query to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-yaml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The string response in JSON format.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The parameter is invalid JSON ViewConfig/TableViewConfig.",
            "content": {
              "application/json": {}
            }
          },
          "408": {
            "description": "Query execution time exceeded.",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/export/json-job": {
      "post": {
        "tags": [
          "Output Module"
        ],
        "summary": "Exports results in JSON format, returns JSON representation of the async Job.",
        "description": "<p>Starts a job that performs an Output Module query and stores the results in a file in JSON format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.</p><p>Please note that the ViewConfig/TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>",
        "operationId": "exportJSONInJob",
        "parameters": [
          {
            "name": "sendNotification",
            "in": "query",
            "description": "Whether an e-mail must be sent on completion of the job.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validationEnabled",
            "in": "query",
            "description": "Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Validation is then performed immediately instead of only when the job is started. Please note that the validation will always take place during the Job execution, regardless of this parameter. Default value is false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The name of the file. By default the file name will be generated.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The JSON/YAML representation of ViewConfig/TableViewConfig that describes the query to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-yaml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON representation of the job that performs an Output Module query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                },
                "example": {
                  "id": "d680a9b7-46ac-4ec3-ae0b-0642043a0f94",
                  "resourceType": "Job",
                  "type": "EXPORT",
                  "state": "WAITING",
                  "result": "NOT_SET"
                }
              }
            }
          },
          "400": {
            "description": "The parameter is invalid JSON ViewConfig/TableViewConfig.",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/export/json-file": {
      "post": {
        "tags": [
          "Output Module"
        ],
        "summary": "Exports results in JSON format, returns information about created file.",
        "description": "<p>Performs an Output Module query and stores the query results in a file in JSON format. The id of the file is returned in the response.</p><p>Please note that the ViewConfig/TableViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>",
        "operationId": "exportJSONToFile",
        "parameters": [
          {
            "name": "validationEnabled",
            "in": "query",
            "description": "Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The name of the file. By default the file name will be generated.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The JSON/YAML representation of ViewConfig/TableViewConfig that describes the query to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-yaml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The information about the file where the results are stored.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfoImpl"
                }
              }
            }
          },
          "400": {
            "description": "The parameter is invalid JSON ViewConfig/TableViewConfig.",
            "content": {
              "application/json": {}
            }
          },
          "408": {
            "description": "Query execution time exceeded.",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/export/xml": {
      "post": {
        "tags": [
          "Output Module"
        ],
        "summary": "Exports results in XML format, returns the results immediately.",
        "description": "<p>Performs an Output Module query and exports the returns results immediately in XML format.</p><p>Please note that the ViewConfig’s syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results).For details please consult output module documentation.</p>",
        "operationId": "exportXML",
        "parameters": [
          {
            "name": "validationEnabled",
            "in": "query",
            "description": "Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "The JSON/YAML representation of ViewConfig that describes the query to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-yaml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The string response in XML format.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The parameter is invalid JSON ViewConfig.",
            "content": {
              "application/json": {}
            }
          },
          "408": {
            "description": "Query execution time exceeded.",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/export/xml-job": {
      "post": {
        "tags": [
          "Output Module"
        ],
        "summary": "Exports results in XML format, returns JSON representation of the async Job.",
        "description": "<p>Starts a job that performs an Output Module query and stores the results in a file in XML format. Id of the file can be retrieved from the <code>message.id</code> property of the job once the job is finished.</p><p>Please note that the ViewConfig's syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>",
        "operationId": "exportXMLInJob",
        "parameters": [
          {
            "name": "validationEnabled",
            "in": "query",
            "description": "Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Validation is then performed immediately instead of only when the job is started. Please note that the validation will always take place during the Job execution, regardless of this parameter. Default value is false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The name of the file. By default the file name will be generated.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The JSON/YAML representation of ViewConfig that describes the query to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-yaml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The JSON representation of the job that performs an Output Module query.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                },
                "example": {
                  "id": "d680a9b7-46ac-4ec3-ae0b-0642043a0f94",
                  "resourceType": "Job",
                  "type": "EXPORT",
                  "state": "WAITING",
                  "result": "NOT_SET"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/export/xml-file": {
      "post": {
        "tags": [
          "Output Module"
        ],
        "summary": "Exports results in XML format, returns information about created file.",
        "description": "<p>Performs an Output Module query and stores the query results in a file in XML format. The id of the file is returned in the response.</p><p>Please note that the ViewConfig's syntax validation is not executed by default, see <code>validationEnabled</code></p><p>DGC admin console settings may impact the execution of the query (especially in terms of timeout and a limit on the number of results). For details please consult output module documentation.</p>",
        "operationId": "exportXMLToFile",
        "parameters": [
          {
            "name": "validationEnabled",
            "in": "query",
            "description": "Determines if the ViewConfig’s syntax should be validated (<code>true</code>) or not (<code>false</code>). Default value is false for backward compatibility reasons but it is strongly advised to always enable this validation.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The name of the file. By default the file name will be generated.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The JSON/YAML representation of ViewConfig that describes the query to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "application/x-yaml": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The information about the file where the results are stored.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfoImpl"
                }
              }
            }
          },
          "400": {
            "description": "The parameter is invalid JSON ViewConfig.",
            "content": {
              "application/json": {}
            }
          },
          "408": {
            "description": "Query execution time exceeded.",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/outputModule/tableViewConfigs/viewId/{viewId}": {
      "get": {
        "tags": [
          "Output Module"
        ],
        "summary": "Returns TableViewConfig based on id of given View and its Location.",
        "description": "<b>EXPERIMENTAL</b> Returns Table View Config based on id of given View and its Location. This Table View Config can be used by Output Module to export data as visible in Collibra Data Governance Center User Interface.<p>This endpoint does not guarantee a one-to-one relation between what is visible in the User Interface and what will be exported by using the provided Table View Config. Due to the possibility of adding additional filters through User Interface the result can contain more rows then are visible in the User Interface. In such case the Table View Config produced by this endpoint should be manually adjusted. <p><b>Because obtaining the correct results needs a human intervention, this endpoint should not be used in any kind of automatic processing.</b><p>Example: given page under url https://dgc.collibra.com/glossary?view=133f7f30-033c-4e38-acc2-2c1ac599d19e the view <code>id</code> is <code>133f7f30-033c-4e38-acc2-2c1ac599d19e</code>.",
        "operationId": "getTableViewConfigByViewId",
        "parameters": [
          {
            "name": "viewLocation",
            "in": "query",
            "description": "The Location for which the view shall be generated.Views in Collibra Data Governance Center are available under specific locations.Each location is associated with set of filters that are automatically applied to given view.Setting appropriate View Location will produce Table View Config that describes the data seen under desired location and given View in the best way possible.If this field is not provided then the returned Table View Config is going to have additional filters applied based on viewLocation extracted from database.`\n\n<table><tr><th>viewLocation value </th><th> Corresponding view in Collibra Data Governance Center User Interface</th></tr><tr><td>BUSINESS_GLOSSARY_BUSINESS_ASSETS </td><td> Business Glossary Subpages: Business Assets (/glossary)Glossaries (/glossary/glossaries)</td></tr><tr><td>REFERENCE_DATA_CODEVALUES_AND_SETS </td><td> Reference Data > Code Values/Sets (/reference-data)</td></tr><tr><td>CATALOG_DATA_SETS </td><td> Catalog > Data Sets (/catalog/data-sets)</td><td><tr><td>CATALOG_DATA_DICTIONARY </td><td> Catalog > Data Dictionary (/catalog/data-dictionary)</td></tr><tr><td>CATALOG_TECHNOLOGY_ASSETS </td><td> Catalog > Technology Assets (/catalog/technology-assets)</td></tr><tr><td>DATA_HELPDESK_ISSUES </td><td> Data Helpdesk Subpages: Issues(/data-helpdesk)>Data Quality (/data-helpdesk/data-quality)</td></tr><tr><td>STEWARDSHIP_BUSINESS_DIMENSIONS </td><td> Stewardship > Business Dimensions (/stewardship/business-dimensions)</td></tr><tr><td>POLICY_MANAGER_GOVERNANCE_ASSETS </td><td> Policy Manager > Governance Assets (/policy-manager)</td></tr></table>",
            "schema": {
              "type": "string",
              "enum": [
                "GLOBAL_VIEW",
                "DOMAIN_DOMAIN_ASSETS",
                "COMMUNITY_COMMUNITY_ASSETS",
                "BUSINESS_GLOSSARY_BUSINESS_ASSETS",
                "BUSINESS_GLOSSARY_GLOSSARIES",
                "REFERENCE_DATA_CODEVALUES_AND_SETS",
                "REFERENCE_DATA_HIERARCHIES",
                "CATALOG_DATA_SETS",
                "CATALOG_DATA_SOURCES",
                "CATALOG_DATA_DICTIONARY",
                "CATALOG_TECHNOLOGY_ASSETS",
                "CATALOG_REPORTS",
                "DATA_HELPDESK_ISSUES",
                "DATA_HELPDESK_DATA_QUALITY",
                "STEWARDSHIP_BUSINESS_DIMENSIONS",
                "POLICY_MANAGER_GOVERNANCE_ASSETS"
              ]
            }
          },
          {
            "name": "viewId",
            "in": "path",
            "description": "The <code>id</code> of given View. Can be obtained from Collibra Data Governance Center User Interface",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "View config generated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "View not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/reporting/insights/download": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Reporting insights download",
        "description": "Returns a Reporting Data archive (zip) file that contains Apache Parquet files with table content for each of the seven concepts (community, domain, asset, attribute, relation, responsibility and usage) for one day (=snapshot date). Please refer to the Reporting Data Layer product documentation for more information at [Working with your reporting data](https://productresources.collibra.com/docs/collibra/latest/Content/Reporting/co_working-with-data.htm).<br />Collibra Insights Data Access provides data that may be subject to access restrictions within your organization. Please ensure you follow your organization's policies and have approval to access this data.<br />This operation is deprecated and it will be removed in the future.",
        "operationId": "getInsightsZip",
        "parameters": [
          {
            "name": "snapshotDate",
            "in": "query",
            "description": "Snapshot date for reporting insights data in ISO8601 format (e.g.: 2019-05-14)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Archive format. Currently only ZIP format is accepted",
            "schema": {
              "type": "string",
              "default": "zip"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insights has been downloaded",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "description": "Archive payload",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "There is no insights for given date"
          },
          "406": {
            "description": "The selected format is not acceptable"
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/reporting/insights/directDownload": {
      "get": {
        "tags": [
          "Reporting"
        ],
        "summary": "Reporting insights download directly from cloud storage",
        "description": "Returns a Reporting Data archive (zip) file that contains Apache Parquet files with table content for each of the seven concepts (community, domain, asset, attribute, relation, responsibility and usage) for one day (=snapshot date). Please refer to the Reporting Data Layer product documentation for more information at [Working with your reporting data](https://productresources.collibra.com/docs/collibra/latest/Content/Reporting/co_working-with-data.htm).<br />Collibra Insights Data Access provides data that may be subject to access restrictions within your organization. Please ensure you follow your organization's policies and have approval to access this data.<br />This endpoint redirects to download the Reporting Data archive (zip) file directly from cloud storage, bypassing the Collibra network. The redirect URL is temporary, valid for 60 seconds by default (see “pre-signed URL” in AWS and GCP docs for more details). You will need to allow redirects for this endpoint to work correctly.<br />Note: The \"Try it out\" button in the documentation UI might not work properly. To test this endpoint, please use curl with \"-L\" option to follow redirects. ",
        "operationId": "getPreSignedInsightsZip",
        "parameters": [
          {
            "name": "snapshotDate",
            "in": "query",
            "description": "Snapshot date for reporting insights data in ISO8601 format (e.g.: 2019-05-14)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "Archive format. Currently only ZIP format is accepted",
            "schema": {
              "type": "string",
              "default": "zip"
            }
          }
        ],
        "responses": {
          "307": {
            "description": "Redirect to a temporal URL to download Insights"
          },
          "404": {
            "description": "There is no insights for given date"
          },
          "406": {
            "description": "The selected format is not acceptable"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns roles matching the given search criteria.",
        "description": "Only parameters that are specified in this request and have not <code>null</code> values are used for filtering.  All other parameters are ignored.  The returned roles satisfy all constraints that are specified in this search criteria.  By default a result containing 1000 roles is returned.",
        "operationId": "findRoles",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the role to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. The search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description of the role to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "global",
            "in": "query",
            "description": "Whether global roles should be searched for.",
            "deprecated": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Indicates which type of roles should be searched for. Usage is mutually exclusive with the deprecated global flag.",
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "GLOBAL",
                "RESOURCE"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResponseRole"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Adds a new role.",
        "description": "Adds new role.",
        "operationId": "addRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRoleRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleImpl"
                }
              }
            }
          },
          "400": {
            "description": "A role with the given ID already exists"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/roles/{roleId}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns the role identified by the given id.",
        "description": "Returns the role identified by the given id.",
        "operationId": "getRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The unique identifier of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Removes the role identified by the given id.",
        "description": "Removes the role identified by the given id.",
        "operationId": "removeRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The unique identifier of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Roles"
        ],
        "summary": "Change the role with the given id.",
        "description": "Changes the role with the information that is present in the request.  Only properties that are specified in this request and have not <code>null</code> values are updated.  All other properties are ignored.",
        "operationId": "changeRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The unique identifier of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeRoleRequest"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/security/saml/certificate/{type}": {
      "post": {
        "tags": [
          "SAML"
        ],
        "summary": "Changes the certificate to be used with SAML",
        "description": "Replaces the currently used certificate with the one uploaded in PEM format. The PEM file must be unencrypted (no password) and contain both the certificate and the private key.",
        "operationId": "changeCertificate",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "SIGNING",
                "ENCRYPTION"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Certificate successfully changed"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "SAML"
        ],
        "summary": "Delete the specified SAML certificate from the SAML keystore.",
        "description": "Delete the certificate from the SAML keystore and replace it with a generated certificate as done by default.",
        "operationId": "deleteCustomizations",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "SIGNING",
                "ENCRYPTION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The certificate was successfully deleted."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/security/saml": {
      "get": {
        "tags": [
          "SAML"
        ],
        "summary": "Returns the SAML Service Provider metadata for this instance.",
        "description": "Returns the SAML Service Provider metadata for this instance.",
        "operationId": "getSPMetadataAsString",
        "parameters": [
          {
            "name": "complete",
            "in": "query",
            "description": "Whether or not the meta data generated should include the non-required attributes (completeMetadata = true means all the non-essential attributes too).",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "metadata successfully found.",
            "content": {
              "application/xml": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/auth/sessions/current": {
      "get": {
        "tags": [
          "Authentication (Sessions)"
        ],
        "summary": "Get session",
        "description": "Gets current session (checks if user is logged in).",
        "operationId": "currentSession",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Specify additional objects to include in the session response. Supports 'csrfToken' and 'user'. Multiple inclusions may be specified using additional 'include' query parameters or by comma-separated list.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user is logged in."
          },
          "401": {
            "description": "The user is not authenticated."
          }
        }
      },
      "delete": {
        "tags": [
          "Authentication (Sessions)"
        ],
        "summary": "Logout",
        "description": "Logs current user out and destroys the active session.",
        "operationId": "logout",
        "responses": {
          "204": {
            "description": "The user was logged out and session closed."
          },
          "401": {
            "description": "The user is not authenticated."
          }
        }
      }
    },
    "/auth/sessions/heartbeat": {
      "get": {
        "tags": [
          "Authentication (Sessions)"
        ],
        "summary": "Checks if the user session is active",
        "description": "Returns 200 if user session is active and 401 if the session is expired or doesn't exist",
        "operationId": "heartbeat",
        "responses": {
          "200": {
            "description": "The user is authenticated"
          },
          "401": {
            "description": "The user is not authenticated."
          }
        }
      }
    },
    "/auth/sessions": {
      "post": {
        "tags": [
          "Authentication (Sessions)"
        ],
        "summary": "Login",
        "description": "Authenticates a user and creates a new session on the server. Once the user is authenticated then the returned session id can be used to access DGC REST Api in subsequent requests. The method additionally returns the JSESSIONID cookie in a <code>Set-Cookie</code> header. If user already has an open session then this session will be terminated.",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was logged in and a new session was created. The response includes the CSRF token that is created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DGCSession"
                }
              }
            }
          },
          "401": {
            "description": "The user is not authenticated."
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns users matching the given search criteria",
        "description": "Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored.<p>The returned users satisfy all constraints that are specified in this search criteria.</p><p>By default a result containing 1000 users is returned.</p>",
        "operationId": "findUsers",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The list of user IDs to look for. The query parameter must be passed for each user ID.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the user. The search will take place in the fields specified by the 'nameSearchFields' parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameSearchFields",
            "in": "query",
            "description": "The user fields that will be searched for occurrences of the 'name' parameter. It defaults to USERNAME, FIRSTNAME, LASTNAME, FIRSTNAME_LASTNAME and LASTNAME_FIRSTNAME.",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "USERNAME",
                  "FIRSTNAME",
                  "LASTNAME",
                  "LASTNAME_FIRSTNAME",
                  "FIRSTNAME_LASTNAME",
                  "EMAIL"
                ]
              }
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "The ID of the group the searched users should belong to.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "onlyLoggedIn",
            "in": "query",
            "description": "Whether only currently logged in users should be returned.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeDisabled",
            "in": "query",
            "description": "Whether disabled users should be included in the search results.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The order of sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "ASC"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "USERNAME",
                "FIRSTNAME",
                "LASTNAME",
                "LASTNAME_FIRSTNAME",
                "FIRSTNAME_LASTNAME",
                "EMAIL"
              ],
              "default": "USERNAME"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Adds a new user",
        "description": "Adds a new user. The username can contain only unicode printable characters and cannot contain leading and trailing spaces.",
        "operationId": "addUser",
        "requestBody": {
          "description": "The properties of the user to be added",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/users/{userId}/userGroups": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Sets user groups for the indicated user",
        "description": "Sets user groups for the indicated user",
        "operationId": "setUserGroupsForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "the ID of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the properties needed to add the user to user groups",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserGroupsForUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User groups set successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User with given ID not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add a user to multiple user groups",
        "description": "Add a user to multiple user groups",
        "operationId": "addUserGroupsForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "the ID of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the properties needed to add the user to the user groups",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserToUserGroupsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully added to the indicated groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupImpl"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User with given ID not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Removes user from multiple user groups",
        "description": "Removes user from multiple user groups",
        "operationId": "removeUserFromUserGroups",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The properties needed to remove the user from user groups",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUserFromUserGroupsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User successfully removed from user groups"
          },
          "404": {
            "description": "User with given ID not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/users/bulk": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Adds multiple new users",
        "description": "Adds multiple new users. The username can contain only unicode printable characters and cannot contain leading and trailing spaces.",
        "operationId": "addUsers",
        "requestBody": {
          "description": "The properties of the users to be added",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddUserRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Users successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the user with the given ID",
        "description": "Gets the user with the given ID",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User with given ID not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes the user with the given ID",
        "description": "Deletes the user with the given ID",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "the ID of the user to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted"
          },
          "404": {
            "description": "User with given ID not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Changes the user with the information that is present in the request",
        "description": "Only properties that are specified in this request and have non-<code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "the ID of the user to be changed",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the properties of the user to be changed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User with given ID not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/users/{userId}/avatar": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get the avatar image for the user with the given ID",
        "description": "Get the avatar image for the user with the given ID",
        "operationId": "getAvatarFile",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The ID of the user to get the avatar for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "The width of the returned avatar",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "The height of the returned avatar",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Avatar image successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The image payload.",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "User with given ID not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes the avatar for the user identified by the given ID",
        "description": "Deletes the avatar for the user identified by the given ID",
        "operationId": "deleteUserAvatar",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "the ID of the user to delete the avatar for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User avatar successfully deleted"
          },
          "404": {
            "description": "User with given ID not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Changes the avatar for the user identified by the given ID",
        "description": "Changes the avatar for the user identified by the given ID",
        "operationId": "changeUserAvatar",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "the ID of the user to change the avatar for",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the properties needed to change to avatar for the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserAvatarRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User avatar successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User with given ID not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns the current user, if logged in",
        "description": "If the user is not logged in, <code>null</code> is returned",
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "User succesfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/users/current/permissions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns the current user global permissions, if logged in",
        "description": "If the user is not logged in, global permissions of the Guest user are returned",
        "operationId": "getCurrentUserPermissions",
        "responses": {
          "200": {
            "description": "User permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermissions"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/users/email/{emailAddress}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the user identified by given e-mail address",
        "description": "Gets the user identified by given e-mail address. This endpoint will be removed in the future. Plese use GET /users with parameters instead.",
        "operationId": "getUserByEmailAddress",
        "parameters": [
          {
            "name": "emailAddress",
            "in": "path",
            "description": "The e-mail address of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User with given e-mail not found"
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/users/{userId}/licenseType": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the required LicenseType for the given user",
        "description": "Gets the required LicenseType for the given user based on their assigned permissions.",
        "operationId": "getUserRequiredLicenseType",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "the ID of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LicenseType successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "CONSUMER",
                    "AUTHOR"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User with given ID not found"
          }
        },
        "deprecated": true,
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/userGroups": {
      "get": {
        "tags": [
          "User Groups"
        ],
        "summary": "Find user groups",
        "description": "Returns user groups matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. By default a result containing 1000 user groups is returned.",
        "operationId": "findUserGroups",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the user group.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameMatchMode",
            "in": "query",
            "description": "The match mode used to compare <code>name</code>. If the match mode is <code>EXACT</code> the search is case-sensitive, otherwise the search is case-insensitive.",
            "schema": {
              "type": "string",
              "enum": [
                "START",
                "END",
                "ANYWHERE",
                "EXACT"
              ],
              "default": "ANYWHERE"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The ID of the user who should belong to searched user groups.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeEveryone",
            "in": "query",
            "description": "Indicates if we should include the everyone group or not.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "User Groups"
        ],
        "summary": "Add new user group",
        "description": "Adds a new user group.",
        "operationId": "addUserGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserGroupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User group successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/userGroups/{userGroupId}/users": {
      "post": {
        "tags": [
          "User Groups"
        ],
        "summary": "Add users to user group",
        "description": "Adds users to an existing user group.",
        "operationId": "addUsersToUserGroup",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "The ID of the user group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUsersToUserGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users successfully added to user group.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User group not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User Groups"
        ],
        "summary": "Remove users from user group",
        "description": "Removes users from the user group with the given ID",
        "operationId": "removeUsersFromUserGroup",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "The ID of the user group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUsersFromUserGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Users removed from user group"
          },
          "404": {
            "description": "User group not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/userGroups/{userGroupId}": {
      "get": {
        "tags": [
          "User Groups"
        ],
        "summary": "Get user group",
        "description": "Returns the user group with the given ID.",
        "operationId": "getUserGroup",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "The ID of the user group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User group found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupImpl"
                }
              }
            }
          },
          "404": {
            "description": "User group not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User Groups"
        ],
        "summary": "Remove user group",
        "description": "Removes the user group with the given ID",
        "operationId": "removeUserGroup",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "The ID of the user group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User group removed"
          },
          "404": {
            "description": "User group not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "User Groups"
        ],
        "summary": "Change user group",
        "description": "Changes the user group with the information that is present in the request. Only properties that are specified in this request and have not <code>null</code> values are updated. All other properties are ignored.",
        "operationId": "changeUserGroup",
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "The ID of the user group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeUserGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User group changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupImpl"
                }
              }
            }
          },
          "404": {
            "description": "User group not found"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/validation": {
      "get": {
        "tags": [
          "Validation"
        ],
        "summary": "Returns the validation results matching the given search criteria.",
        "description": "Returns the validation results matching the given search criteria. Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned validation results satisfy all constraints that are specified in this search criteria. By default a result containing at most 1000 validation results is returned. ",
        "operationId": "findValidationResults",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "assetId",
            "in": "query",
            "description": "The unique identifier of the asset for which we are searching validation results.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "jobId",
            "in": "query",
            "description": "The unique identifier of the job for which we are searching validation results.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "validationRuleId",
            "in": "query",
            "description": "The unique identifier of the validation rule for which we are searching validation results.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "mostRecentJob",
            "in": "query",
            "description": "Check the validationResults of only the most recent job according to the other criteria.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "mostRecentExecution",
            "in": "query",
            "description": "Check the validationResults of only the most recent execution (inside or outside a validation job) according to the other criteria.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "Filter on the result of validation results.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response with found ValidationResults.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationResultPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/validation/{assetId}": {
      "post": {
        "tags": [
          "Validation"
        ],
        "summary": "Validates a single asset.",
        "description": "Validates a single asset.",
        "operationId": "validate",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "description": "the unique identifier of the asset to be validated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The asset has been validated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationResultImpl"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/validation/bulk": {
      "post": {
        "tags": [
          "Validation"
        ],
        "summary": "Validates multiple assets.",
        "description": "Validates multiple assets.",
        "operationId": "validateInJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateInJobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Validation Job successfully started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/viewPermissions": {
      "get": {
        "tags": [
          "View Permissions"
        ],
        "summary": "Finds view permissions with given criteria.",
        "description": "Finds view permissions with given criteria.",
        "operationId": "findViewPermissions",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The ID of the user for whom the view permission applies.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userGroupId",
            "in": "query",
            "description": "The ID of the user group for whose members the view permission applies.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "resourceId",
            "in": "query",
            "description": "The ID of the community or domain to which the view permissions apply.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "resourceType",
            "in": "query",
            "description": "Deprecated. Use <code>Community</code> or <code>Domain</code> to only retrieve view permissions assigned directly on a community or domain respectively. Do not use this filter in conjunction with the <code>resourceId</code> parameter.",
            "deprecated": true,
            "schema": {
              "type": "string",
              "enum": [
                "View",
                "Asset",
                "Community",
                "Domain",
                "AssetType",
                "DomainType",
                "Status",
                "User",
                "ClassificationMatch",
                "UserGroup",
                "Attribute",
                "StringAttribute",
                "ScriptAttribute",
                "BooleanAttribute",
                "DateAttribute",
                "NumericAttribute",
                "SingleValueListAttribute",
                "MultiValueListAttribute",
                "Comment",
                "Attachment",
                "Responsibility",
                "Workflow",
                "Job",
                "Relation",
                "RelationType",
                "ComplexRelation",
                "ComplexRelationType",
                "ArticulationRule",
                "Assignment",
                "Scope",
                "RelationTrace",
                "ValidationRule",
                "DataQualityRule",
                "DataQualityMetric",
                "Address",
                "InstantMessagingAccount",
                "Email",
                "PhoneNumber",
                "Website",
                "Activity",
                "FormProperty",
                "WorkflowTask",
                "ActivityChange",
                "WorkflowInstance",
                "Role",
                "AttributeType",
                "BooleanAttributeType",
                "DateAttributeType",
                "DateTimeAttributeType",
                "MultiValueListAttributeType",
                "NumericAttributeType",
                "ScriptAttributeType",
                "SingleValueListAttributeType",
                "StringAttributeType",
                "ViewSharingRule",
                "ViewAssignmentRule",
                "JdbcDriverFile",
                "JdbcDriver",
                "JdbcIngestionProperties",
                "CsvIngestionProperties",
                "ExcelIngestionProperties",
                "ConnectionStringParameter",
                "AssignedCharacteristicType",
                "Notification",
                "Tag",
                "ComplexRelationLegType",
                "ComplexRelationAttributeType",
                "ComplexRelationLeg",
                "BaseDataType",
                "AdvancedDataType",
                "DiagramPicture",
                "DiagramPictureSharingRule",
                "DiagramPictureAssignmentRule",
                "Rating",
                "Classification",
                "PhysicalDataConnector",
                "Context"
              ]
            }
          },
          {
            "name": "includeInherited",
            "in": "query",
            "description": "When you provide a <code>resourceId</code>, setting this parameter to <code>true</code> also returns the view permissions inherited from a parent community.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResponseViewPermission"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "View Permissions"
        ],
        "summary": "Adds a view permission. It can be applied only to 'Community' and 'Domain' resource types.",
        "description": "Adds a view permission. It can be applied only to 'Community' and 'Domain' resource types.",
        "operationId": "addViewPermission",
        "requestBody": {
          "description": "Properties of the new view permission. Valid resource types are: 'Community', 'Domain'.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddViewPermissionRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "View permission successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewPermissionImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/viewPermissions/{viewPermissionId}": {
      "get": {
        "tags": [
          "View Permissions"
        ],
        "summary": "Retrieves a view permission.",
        "description": "Retrieves a view permission.",
        "operationId": "getViewPermission",
        "parameters": [
          {
            "name": "viewPermissionId",
            "in": "path",
            "description": "Identifier of the view permission to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewPermissionImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "View Permissions"
        ],
        "summary": "Removes a view permission.",
        "description": "Removes a view permission.",
        "operationId": "removeViewPermission",
        "parameters": [
          {
            "name": "viewPermissionId",
            "in": "path",
            "description": "Identifier of the view permission to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/{workflowDefinitionId}/assetTypeAssignmentRules": {
      "post": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Add asset type assignment rule.",
        "description": "Adds an asset type assignment rule to the workflow definition with the specified ID.",
        "operationId": "addAssetTypeAssignmentRule",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The request describing assignment rule to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAssetTypeAssignmentRuleRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Asset type assignment rule successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetAssignmentRuleImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/{workflowDefinitionId}/domainTypeAssignmentRules": {
      "post": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Add domain type assignment rule.",
        "description": "Adds a domain type assignment rule to the workflow definition with the specified ID.",
        "operationId": "addDomainTypeAssignmentRule",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The request describing assignment rule to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDomainTypeAssignmentRuleRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Domain type assignment rule successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetAssignmentRuleImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/{workflowDefinitionId}/assetTypeAssignmentRules/{ruleId}": {
      "patch": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Change asset type assignment rule.",
        "description": "Modifies the asset type assignment rule with the specified ID of the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.",
        "operationId": "changeAssetTypeAssignmentRule",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "The ID of the assignment rule to be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters for the assignment rule to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAssetTypeAssignmentRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The asset type assignment rule has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetAssignmentRuleImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/{workflowDefinitionId}/domainTypeAssignmentRules/{ruleId}": {
      "patch": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Change domain type assignment rule.",
        "description": "Modifies the domain type assignment rule with the specified ID of the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.",
        "operationId": "changeDomainTypeAssignmentRule",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "The ID of the assignment rule to be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters for the assignment rule to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeDomainTypeAssignmentRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The domain type assignment rule has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetAssignmentRuleImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/{workflowDefinitionId}": {
      "get": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Get workflow definition.",
        "description": "Returns the workflow definition with the specified ID.",
        "operationId": "getWorkflowDefinition",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The workflow definition successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowDefinitionImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Remove workflow definition.",
        "description": "Removes the workflow definition with the specified ID. The workflow definition will be completely removed from the application, including any history.",
        "operationId": "removeWorkflowDefinition",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The workflow definition has been successfully removed."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Change workflow definition.",
        "description": "Modifies the workflow definition with the specified ID.<p>Only properties that are specified in this request and have not <code>null</code> values are updated.<p>All other properties are ignored.",
        "operationId": "changeWorkflowDefinition",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters for the workflow definition to be changed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeWorkflowDefinitionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The workflow definition has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowDefinitionImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions": {
      "get": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Find workflow definitions.",
        "description": "Finds the workflow definitions matching the criteria described in the request object. By default, the result contains up to 1000 workflow definitions.",
        "operationId": "findWorkflowDefinitions",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "assetId",
            "in": "query",
            "description": "The list of the IDs of business items (assets) for which the workflow definitions should be found.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "domainId",
            "in": "query",
            "description": "The list of the IDs of business items (domains) for which the workflow definitions should be found.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "communityId",
            "in": "query",
            "description": "The list of the IDs of business items (communities) for which the workflow definitions should be found.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Whether the found workflow definitions should be enabled.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "global",
            "in": "query",
            "description": "Whether the found workflow definitions should be global.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name (could be partial) of the workflow definition to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The sorting order.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "ASC"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field on which the results are sorted.",
            "schema": {
              "type": "string",
              "enum": [
                "NAME",
                "LAST_MODIFIED_ON",
                "DEPLOYED_ON"
              ],
              "default": "NAME"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The description (could be partial) of the workflow definition to search for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "guardrailsValidationResult",
            "in": "query",
            "description": "The result of the guardrails validation of this workflow definition",
            "schema": {
              "type": "string",
              "enum": [
                "VALID",
                "VALID_WITH_EXCEPTIONS",
                "INVALID"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response with found workflow definitions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowDefinitionPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Deploy workflow definition.",
        "description": "Deploys workflow definition (the business process and resources) using the specified request.<p> The input stream can represent a single file(e.g: .bpmn20.xml or .bpmn) or an archive file (e.g: .zip or .bar). It is not allowed to deploy a resource containing more than one process definition.",
        "operationId": "deployWorkflowDefinition",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The file with described workflow definition.",
                    "format": "binary"
                  },
                  "fileName": {
                    "type": "string",
                    "description": "The name of the file."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The workflow definition has been deployed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowDefinitionImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/workflowDefinition/{workflowDefinitionId}/configurationStartFormData": {
      "get": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Get configuration start form data.",
        "description": "Returns the task configuration start form data of the workflow definition with the specified ID.",
        "operationId": "getConfigurationStartFormData",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition that should be used for the form data retrieval.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "formPropertyType",
            "in": "query",
            "description": "The form type to be returned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The configuration start form data for workflow definition.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartFormDataImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/startEvents": {
      "get": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Get all possible workflow start events",
        "description": "Returns all possible workflow start events, including event name and description",
        "operationId": "getPossibleStartEvents",
        "responses": {
          "200": {
            "description": "All possible workflow start events with name and description",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NamedDescribedWorkflowStartEventType"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/workflowDefinition/{workflowDefinitionId}/startFormData": {
      "get": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Get start form data.",
        "description": "Returns the task start form data of the workflow definition with the specified ID.",
        "operationId": "getStartFormData",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition that should be used for the form data retrieval.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "formPropertyType",
            "in": "query",
            "description": "The form type to be returned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The start form data for workflow definition.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartFormDataImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/process/{processId}": {
      "get": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Get workflow definition.",
        "description": "Returns the workflow definition with the specified process ID.",
        "operationId": "getWorkflowDefinitionByProcessId",
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "description": "The process ID of the workflow definition.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The workflow definition successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowDefinitionImpl"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/{workflowDefinitionId}/diagram": {
      "get": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Get process diagram.",
        "description": "Returns the process diagram of the workflow definition with the specified ID. The diagram input stream returned can be null as deployed workflow definitions without graphical notation included do not have a diagram.",
        "operationId": "getWorkflowDefinitionDiagram",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The workflow definition diagram successfully found."
          },
          "204": {
            "description": "No diagram has been found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/{workflowDefinitionId}/xml": {
      "get": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Get XML of workflow definition.",
        "description": "Returns the XML source of the workflow definition with the specified ID.",
        "operationId": "getWorkflowDefinitionXML",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The workflow definition XML successfully found.",
            "content": {
              "application/xml": {}
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/{workflowDefinitionId}/assignmentRules/{ruleId}": {
      "delete": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Remove assignment rule.",
        "description": "Removes the assignment rule with the specified ID from the workflow definition with the specified ID.",
        "operationId": "removeAssignmentRule",
        "parameters": [
          {
            "name": "workflowDefinitionId",
            "in": "path",
            "description": "The ID of the workflow definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ruleId",
            "in": "path",
            "description": "The ID of the assignment rule.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment rule has been removed."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowDefinitions/removalJobs": {
      "post": {
        "tags": [
          "Workflow Definitions"
        ],
        "summary": "Remove multiple workflow definitions.",
        "description": "Removes multiple workflow definitions asynchronously. The workflow definition(s) will be completely removed from the application, including any history.",
        "operationId": "removeWorkflowDefinitionsInJob",
        "requestBody": {
          "description": "The list of IDs of the workflow definitions to remove.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The job for removal workflow definitions has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowInstances/{workflowInstanceId}/canceled": {
      "post": {
        "tags": [
          "Workflow Instances"
        ],
        "summary": "Cancel workflow instance.",
        "description": "Cancels the workflow instance with the specified ID with a reason. Canceling the workflow instance also cancels the workflow sub-processes.",
        "operationId": "cancelWorkflowInstances",
        "parameters": [
          {
            "name": "workflowInstanceId",
            "in": "path",
            "description": "The identifier of the workflow instance to be cancelled.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The reason for the cancellation of the workflow instance.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The workflow instance has been successfully canceled."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowInstances": {
      "get": {
        "tags": [
          "Workflow Instances"
        ],
        "summary": "Find workflow instances.",
        "description": "Returns workflow instances matching given search criteria.<p>Only parameters that are specified in this request and have not <code>null</code> values are used for filtering. All other parameters are ignored. The returned workflow instances satisfy all constraints that are specified in this search criteria.",
        "operationId": "findWorkflowInstances",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "businessItemName",
            "in": "query",
            "description": "The display name of the business item that should be contained by the searched workflows.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessItemId",
            "in": "query",
            "description": "The ID of the business item that should be contained by the searched workflows.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workflowDefinitionId",
            "in": "query",
            "description": "The ID of the workflow definition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workflowDefinitionName",
            "in": "query",
            "description": "The name (or a part of it) of the workflow definition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field on which the results are sorted.",
            "schema": {
              "type": "string",
              "enum": [
                "START_DATE"
              ],
              "default": "START_DATE"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The sorting order.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "DESC"
            }
          },
          {
            "name": "parentWorkflowInstanceId",
            "in": "query",
            "description": "The ID of the parent workflow instance.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The found workflow instances.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Workflow Instances"
        ],
        "summary": "Start workflow instances.",
        "description": "Starts multiple workflow instances based on the provided request.",
        "operationId": "startWorkflowInstances",
        "requestBody": {
          "description": "The properties of the workflow to be started.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartWorkflowInstancesRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workflow instances successfully started.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowInstance"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Workflow definition could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowInstances/{workflowInstanceId}/diagram": {
      "get": {
        "tags": [
          "Workflow Instances"
        ],
        "summary": "Returns the file representing the diagram of workflow instance identified by the given ID.",
        "description": "Returns the file representing the diagram of workflow instance identified by the given ID. The diagram input stream returned can be null as deployed workflow defintions without graphical notation included don't have a diagram",
        "operationId": "getWorkflowInstanceDiagram",
        "parameters": [
          {
            "name": "workflowInstanceId",
            "in": "path",
            "description": "The ID of the workflow instance to return the diagram for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The input stream containing the diagram of the workflow instance.",
            "content": {
              "image/png": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "204": {
            "description": "No diagram has been found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowInstances/{processInstanceId}/messageEvents/{messageName}": {
      "post": {
        "tags": [
          "Workflow Instances"
        ],
        "summary": "Pass message event to workflow engine.",
        "description": "Passes the message event to the workflow engine. It will pass on this specific event to the engine with the given name, process instance and variables.",
        "operationId": "messageEventReceived",
        "parameters": [
          {
            "name": "processInstanceId",
            "in": "path",
            "description": "The ID of an instance of a process. Given process instance should have only one execution running at the time. Otherwise this method will fail.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageName",
            "in": "path",
            "description": "The name of the message to trigger.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The properties of the message event to be received.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageEventReceivedRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The message event has been successfully passed."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowInstances/startJobs": {
      "post": {
        "tags": [
          "Workflow Instances"
        ],
        "summary": "Start workflow instances.",
        "description": "Starts multiple workflow instances asynchronously based on the provided request.",
        "operationId": "startWorkflowInstancesInJob",
        "requestBody": {
          "description": "Properties of the workflow to be started.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartWorkflowInstancesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow instances successfully started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowTasks/{workflowTaskId}/canceled": {
      "post": {
        "tags": [
          "Workflow Tasks"
        ],
        "summary": "Cancel workflow task.",
        "description": "Cancels the workflow task with the specified ID with a reason. If the given workflow is a subprocess, this method makes sure everything is cancelled from the root process instance. If the given task is not found, this method will assume it already was cancelled without throwing any error.",
        "operationId": "cancelWorkflowTask",
        "parameters": [
          {
            "name": "workflowTaskId",
            "in": "path",
            "description": "The ID of the workflow task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The reason for the cancellation of the workflow task.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Task successfully canceled."
          },
          "404": {
            "description": "Task not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowTasks/completed": {
      "post": {
        "tags": [
          "Workflow Tasks"
        ],
        "summary": "Complete workflow tasks.",
        "description": "Completes tasks based on the provided request and returns the following tasks, if the same user is assigned to them.",
        "operationId": "completeWorkflowTasks",
        "requestBody": {
          "description": "Request to complete the workflow tasks.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteWorkflowTasksRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The following tasks, if the calling user is assigned to them. Empty response otherwise.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowTask"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Requested workflow task does not exist."
          },
          "500": {
            "description": "Current user is not candidate user for workflow task."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowTasks": {
      "get": {
        "tags": [
          "Workflow Tasks"
        ],
        "summary": "Find workflow tasks.",
        "description": "Returns the workflow tasks matching given search criteria.",
        "operationId": "findWorkflowTasks",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The first result to retrieve. If not set (offset = <code>0</code>), results will be retrieved starting from row <code>0</code>.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to retrieve. If not set (limit = <code>0</code>), the default limit will be used. The maximum allowed limit is 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "countLimit",
            "in": "query",
            "description": "Allows to limit the number of elements that will be counted. -1 will count everything and 0 will cause the count to be skipped",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": -1
            }
          },
          {
            "name": "businessItemId",
            "in": "query",
            "description": "The ID of the business item",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "businessItemType",
            "in": "query",
            "description": "The type of the business item",
            "schema": {
              "type": "string",
              "enum": [
                "ASSET",
                "DOMAIN",
                "COMMUNITY"
              ]
            }
          },
          {
            "name": "workflowTaskUserRelation",
            "in": "query",
            "description": "The type of relation between user and searched tasks. This could be either set to search for all the tasks the user is permitted to view or just those assigned to the user.",
            "schema": {
              "type": "string",
              "enum": [
                "ALL",
                "ASSIGNED",
                "MY_OVERDUE"
              ],
              "default": "ALL"
            }
          },
          {
            "name": "businessItemName",
            "in": "query",
            "description": "The part of the name of the business item.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "The part of the task description.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "The ID of the user for which the tasks need to be returned. If empty, the current logged in user will be used",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "createDate",
            "in": "query",
            "description": "The creation date of the task. It is the timestamp (in UTC time standard)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "dueDate",
            "in": "query",
            "description": "The due date of the task. It is the timestamp (in UTC time standard)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title/name of the task.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The task type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "The field on which the results are sorted. On due date by default.",
            "schema": {
              "type": "string",
              "enum": [
                "DUE_DATE",
                "CREATION_DATE",
                "TITLE",
                "ITEM",
                "DESCRIPTION"
              ],
              "default": "DUE_DATE"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "The sorting order.",
            "schema": {
              "type": "string",
              "enum": [
                "ASC",
                "DESC"
              ],
              "default": "DESC"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paged response with found workflow tasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTaskPagedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowTasks/{workflowTaskId}/taskFormData": {
      "get": {
        "tags": [
          "Workflow Tasks"
        ],
        "summary": "Get task form data.",
        "description": "Returns the task form data of the workflow task with the specified ID and form property type.",
        "operationId": "getTaskFormData",
        "parameters": [
          {
            "name": "workflowTaskId",
            "in": "path",
            "description": "Workflow task ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "formPropertyType",
            "in": "query",
            "description": "Form property type.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow task form data successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskFormData"
                }
              }
            }
          },
          "401": {
            "description": "User don't have permission for given task"
          },
          "404": {
            "description": "Workflow task form data could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowTasks/{workflowTaskId}": {
      "get": {
        "tags": [
          "Workflow Tasks"
        ],
        "summary": "Get workflow task.",
        "description": "Returns the workflow task with the specified ID. A task will only be returned when the user has the correct permission to view it.",
        "operationId": "getWorkflowTask",
        "parameters": [
          {
            "name": "workflowTaskId",
            "in": "path",
            "description": "The ID of the workflow task to return.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow task successfully found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTask"
                }
              }
            }
          },
          "401": {
            "description": "User don't have permission for given task"
          },
          "404": {
            "description": "Workflow task could not be found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/workflowTasks/{workflowTaskId}/reassign": {
      "post": {
        "tags": [
          "Workflow Tasks"
        ],
        "summary": "Reassign task.",
        "description": "Reassigns the task with the specified ID to one or more users, groups or roles. Caller needs to provide at least one of the value list for users, groups or roles. If roles are provided then the same number of communities needs to be provided also.",
        "operationId": "reassignTask",
        "parameters": [
          {
            "name": "workflowTaskId",
            "in": "path",
            "description": "The ID of the workflow task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "users",
            "in": "query",
            "description": "The user IDs to reassign to.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "groups",
            "in": "query",
            "description": "The group IDs to reassign to.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "The role IDs to reassign to.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "communities",
            "in": "query",
            "description": "The Community IDs of the specified roles to reassign to.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task successfully reassigned."
          },
          "404": {
            "description": "Task not found."
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ActivityImpl": {
        "required": [
          "activityType",
          "callCount",
          "callId",
          "cause",
          "description",
          "id",
          "timestamp",
          "user"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "user": {
            "$ref": "#/components/schemas/UserReferenceImpl"
          },
          "timestamp": {
            "type": "integer",
            "description": "The time when the activity happened. It is the timestamp (in UTC time standard).",
            "format": "int64",
            "example": 1488181916
          },
          "cause": {
            "type": "string",
            "description": "The cause of the activity.",
            "example": "IMPORT",
            "enum": [
              "MANUAL",
              "IMPORT",
              "BULK_DELETE",
              "BULK_MOVE",
              "BULK_EDIT",
              "BULK_INSERT",
              "WORKFLOW"
            ]
          },
          "callId": {
            "type": "string",
            "description": "The ID of the call that resulted in an activity.",
            "example": "44dd1acf-9422-431e-a887-d73a17437412"
          },
          "callCount": {
            "type": "integer",
            "description": "The number of calls standing behind the activity.",
            "format": "int32"
          },
          "activityType": {
            "type": "string",
            "description": "The type of the activity, which could be ADD, UPDATE or DELETE.",
            "enum": [
              "ADD",
              "UPDATE",
              "DELETE"
            ]
          },
          "description": {
            "type": "string",
            "description": "The description of the activity. It's the string in json format. It's exact content depends on activityType and on the type of the resource that was affected by the change. Possible fields are: <ul> <li> affected - always there, consists of id, type and name, it's the reference to the resource that was added, deleted or updated with the activity. </li> <li> new, old - for all activities of ActivityType.UPDATE, respectively new and old value of the field. It can be either the reference to another object (same as affected) or just a string (eg. name change). </li> <li> field - for ActivityType.UPDATE the name of the field that was changed, eg. status, name, target etc. </li> <li> role, people, resource - only for the responsibility activities, people means owner (user or group). </li> <li> source, target, role, coRole - only for relations (including complex relation legs). </li> <li> complexRelation, legs - only for complex relations, legs here stands for all the legs that the complex relation consists of. </li> <li> kind - only for attributes, it's attribute kind, eg. boolean, string, numeric etc. </li> <li> businessItem - only for workflows, reference to an object that is the business item for non-global workflows. </li> <li> attachmentFile - only for attachments, it's the name of the file that was attached. </li> <li> rating - only for ratings and reviews, contains a double representing the current rating </li> </ul>"
          }
        },
        "description": "The list of results."
      },
      "ActivityPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "A placeholder value that should not be relied on, for performance reasons activities are not actually counted.",
            "format": "int64",
            "deprecated": true
          },
          "offset": {
            "type": "integer",
            "description": "A copy of the offset request parameter.",
            "format": "int64",
            "deprecated": true
          },
          "limit": {
            "type": "integer",
            "description": "A copy of the limit request parameter.",
            "format": "int64",
            "deprecated": true
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/ActivityImpl"
            }
          }
        }
      },
      "UserReferenceImpl": {
        "required": [
          "id",
          "resourceType",
          "userName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the referenced resource.",
            "format": "uuid",
            "example": "2b7f3a1a-4e50-4077-96f0-a58a395c860d"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "example": "Community",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "userName": {
            "type": "string",
            "description": "The username of the user.",
            "example": "john.smith"
          }
        },
        "description": "The reference to the user who performed the activity."
      },
      "ApplicationInfo": {
        "type": "object",
        "properties": {
          "solutions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolutionInfo"
            }
          },
          "buildNumber": {
            "type": "string"
          },
          "baseUrl": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/ApplicationVersionImpl"
          }
        }
      },
      "ApplicationVersionImpl": {
        "type": "object",
        "properties": {
          "major": {
            "type": "integer",
            "description": "The major version number of the application version. This version number is increased with the major changes and releases of the application",
            "format": "int32",
            "example": 5
          },
          "minor": {
            "type": "integer",
            "description": "The minor version number of the application version. This version number is increased whenever new features are added in given release",
            "format": "int32",
            "example": 6
          },
          "fullVersion": {
            "type": "string",
            "description": "The full version of the application.",
            "example": "2020.11.0"
          },
          "displayVersion": {
            "type": "string",
            "description": "The display version of the application. This is the version to be displayed to the customer and can be different from the actual internal version.",
            "example": "2020.11.0"
          }
        }
      },
      "SolutionInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "version": {
            "$ref": "#/components/schemas/ApplicationVersionImpl"
          }
        }
      },
      "ArticulationRuleImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "score": {
            "type": "number",
            "description": "The value that should be either added or set (depending on the operation) when this rule matches.",
            "format": "double"
          },
          "operation": {
            "type": "string",
            "description": "The type of an operation that should be performed when asset is matching this rule.",
            "example": "ADD",
            "enum": [
              "ADD",
              "SET"
            ]
          },
          "status": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "attributeType": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          }
        },
        "description": "The list of articulation rules applying with the assignment."
      },
      "AssignedAttributeType": {
        "required": [
          "assignedResourceType",
          "id"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AssignedCharacteristicType"
          },
          {
            "type": "object",
            "properties": {
              "attributeType": {
                "$ref": "#/components/schemas/AttributeType"
              }
            }
          }
        ]
      },
      "AssignedCharacteristicType": {
        "required": [
          "assignedResourceType"
        ],
        "type": "object",
        "properties": {
          "assignedResourceType": {
            "type": "string",
            "description": "The type of the resource the characteristic refers to. The value can be one of : AttributeType, RelationType or ComplexRelationType",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "minimumOccurrences": {
            "type": "integer",
            "description": "How many times at least the assigned characteristic must be added to the resource. Zero means no restriction.",
            "format": "int32"
          },
          "maximumOccurrences": {
            "type": "integer",
            "description": "How many times at least the assigned characteristic may be added to the resource. Null means no limit.",
            "format": "int32"
          },
          "assignedResourceId": {
            "type": "string",
            "description": "The id of the resource the characteristic refers to.",
            "format": "uuid"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Whether the characteristic value of the assigned type can be edited by the user."
          },
          "system": {
            "type": "boolean",
            "description": "Whether the characteristic type can be unassigned."
          },
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          }
        },
        "description": "The list of assigned characteristic types such as attribute types, relation types and complex relation types. Depending on the actual type, a characteristic type may contain additional properties. For additional details, refer to the schemas of AssignedAttributeType, AssignedComplexRelationType and AssignedRelationType.",
        "discriminator": {
          "propertyName": "assignedResourceType",
          "mapping": {
            "AttributeType": "#/components/schemas/AssignedAttributeType",
            "ComplexRelationType": "#/components/schemas/AssignedComplexRelationType",
            "RelationType": "#/components/schemas/AssignedRelationType"
          }
        }
      },
      "AssignedComplexRelationType": {
        "required": [
          "assignedResourceType",
          "id"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AssignedCharacteristicType"
          },
          {
            "type": "object",
            "properties": {
              "complexRelationType": {
                "$ref": "#/components/schemas/ComplexRelationTypeImpl"
              },
              "matchingLegTypesIds": {
                "type": "array",
                "description": "The list of IDs that should match the legs of the complex relation.",
                "items": {
                  "type": "string",
                  "description": "The list of IDs that should match the legs of the complex relation.",
                  "format": "uuid"
                }
              }
            }
          }
        ]
      },
      "AssignedRelationType": {
        "required": [
          "assignedResourceType",
          "id"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AssignedCharacteristicType"
          },
          {
            "type": "object",
            "properties": {
              "roleDirection": {
                "type": "string",
                "description": "The direction of the relation type.",
                "enum": [
                  "TO_SOURCE",
                  "TO_TARGET",
                  "BOTH",
                  "NONE"
                ]
              },
              "relationType": {
                "$ref": "#/components/schemas/RelationTypeImpl"
              },
              "restriction": {
                "$ref": "#/components/schemas/NamedResourceReferenceImpl"
              }
            }
          }
        ]
      },
      "AssignmentImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "assetType": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "statuses": {
            "type": "array",
            "description": "The list of references to the statuses.",
            "items": {
              "$ref": "#/components/schemas/NamedDescribedResourceReference"
            }
          },
          "defaultStatusId": {
            "type": "string",
            "description": "The ID of the default status.",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000005009"
          },
          "characteristicTypes": {
            "type": "array",
            "description": "The list of assigned characteristic types such as attribute types, relation types and complex relation types. Depending on the actual type, a characteristic type may contain additional properties. For additional details, refer to the schemas of AssignedAttributeType, AssignedComplexRelationType and AssignedRelationType.",
            "items": {
              "$ref": "#/components/schemas/AssignedCharacteristicType"
            }
          },
          "articulationRules": {
            "type": "array",
            "description": "The list of articulation rules applying with the assignment.",
            "items": {
              "$ref": "#/components/schemas/ArticulationRuleImpl"
            }
          },
          "validationRules": {
            "type": "array",
            "description": "The list of references to validation rules applying with the assignment.",
            "items": {
              "$ref": "#/components/schemas/NamedResourceReferenceImpl"
            }
          },
          "dataQualityRules": {
            "type": "array",
            "description": "The list of references to data quality rules applying with the assignment.",
            "items": {
              "$ref": "#/components/schemas/NamedDescribedResourceReference"
            }
          },
          "domainTypes": {
            "type": "array",
            "description": "The list of references to domain types which the assignment refers to.",
            "items": {
              "$ref": "#/components/schemas/NamedDescribedResourceReference"
            }
          },
          "scope": {
            "$ref": "#/components/schemas/ScopeImpl"
          }
        }
      },
      "AttributeType": {
        "type": "object",
        "properties": {
          "publicId": {
            "type": "string",
            "description": "The public id of the attribute type.",
            "example": "\"ApprovalDate_C\""
          },
          "description": {
            "type": "string",
            "description": "The description of the resource.",
            "example": "Sample descripion of the resource."
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          }
        },
        "discriminator": {
          "propertyName": "resourceType",
          "mapping": {
            "BooleanAttributeType": "#/components/schemas/BooleanAttributeType",
            "DateAttributeType": "#/components/schemas/DateAttributeType",
            "MultiValueListAttributeType": "#/components/schemas/MultiValueListAttributeType",
            "NumericAttributeType": "#/components/schemas/NumericAttributeType",
            "ScriptAttributeType": "#/components/schemas/ScriptAttributeType",
            "SingleValueListAttributeType": "#/components/schemas/SingleValueListAttributeType",
            "StringAttributeType": "#/components/schemas/StringAttributeType"
          }
        }
      },
      "BooleanAttributeType": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute which holds a boolean value (either true or false)",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeType"
          },
          {
            "type": "object",
            "properties": {
              "statisticsEnabled": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ComplexRelationAttributeTypeImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "minimumOccurrences": {
            "type": "integer",
            "format": "int32"
          },
          "maximumOccurrences": {
            "type": "integer",
            "format": "int32"
          },
          "readOnly": {
            "type": "boolean"
          },
          "attributeType": {
            "$ref": "#/components/schemas/AttributeType"
          }
        }
      },
      "ComplexRelationLegTypeImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "minimumOccurrences": {
            "type": "integer",
            "format": "int32"
          },
          "maximumOccurrences": {
            "type": "integer",
            "format": "int32"
          },
          "assetType": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "role": {
            "type": "string"
          },
          "coRole": {
            "type": "string"
          },
          "relationTypeId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ComplexRelationTypeImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource.",
            "example": "Sample descripion of the resource."
          },
          "publicId": {
            "type": "string",
            "description": "The public id of the complex relation type.",
            "example": "\"ReportCollection_C\""
          },
          "symbolData": {
            "$ref": "#/components/schemas/SymbolDataImpl"
          },
          "attributeTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationAttributeTypeImpl"
            }
          },
          "legTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationLegTypeImpl"
            }
          }
        }
      },
      "DateAttributeType": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute which holds a date type value (as timestamp in UTC time).",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeType"
          }
        ]
      },
      "MultiValueListAttributeType": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute which holds a list of allowed string values from which multiple values can be chosen",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeType"
          },
          {
            "type": "object",
            "properties": {
              "allowedValues": {
                "type": "array",
                "description": "List of the allowed values.",
                "items": {
                  "type": "string",
                  "description": "List of the allowed values."
                }
              }
            }
          }
        ]
      },
      "NamedDescribedResourceReference": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the referenced resource.",
            "format": "uuid",
            "example": "2b7f3a1a-4e50-4077-96f0-a58a395c860d"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "example": "Community",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the referenced resource."
          },
          "description": {
            "type": "string",
            "description": "The description of the referenced resource.",
            "example": "This is the description of the resource"
          }
        },
        "description": "Represents reference to the resource, including its name and description."
      },
      "NamedResourceReferenceImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the referenced resource.",
            "format": "uuid",
            "example": "2b7f3a1a-4e50-4077-96f0-a58a395c860d"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "example": "Community",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the referenced resource."
          }
        },
        "description": "Represents reference to the resource, including its name."
      },
      "NumericAttributeType": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute which holds a numeric value (either integer or floating point).",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeType"
          },
          {
            "type": "object",
            "properties": {
              "statisticsEnabled": {
                "type": "boolean"
              },
              "isInteger": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "RelationTypeImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "publicId": {
            "type": "string",
            "description": "The public id of the relation type.",
            "example": "\"TechnicalReportIsWrittenByAuthor_C\""
          },
          "sourceType": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "targetType": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "role": {
            "type": "string"
          },
          "coRole": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ScopeImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource.",
            "example": "Sample descripion of the resource."
          },
          "publicId": {
            "type": "string",
            "description": "The public id of the scope.",
            "example": "\"Finance_C\""
          },
          "domains": {
            "type": "array",
            "description": "The list of domains that are included in this scope.",
            "items": {
              "$ref": "#/components/schemas/NamedResourceReferenceImpl"
            }
          },
          "communities": {
            "type": "array",
            "description": "The list of communities that are included in this scope.",
            "items": {
              "$ref": "#/components/schemas/NamedResourceReferenceImpl"
            }
          }
        }
      },
      "ScriptAttributeType": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute which holds a script value as a string.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeType"
          },
          {
            "type": "object",
            "properties": {
              "language": {
                "type": "string"
              }
            }
          }
        ]
      },
      "SingleValueListAttributeType": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute which holds a list of allowed string values from which a single value can be chosen",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeType"
          },
          {
            "type": "object",
            "properties": {
              "allowedValues": {
                "type": "array",
                "description": "List of the allowed values.",
                "items": {
                  "type": "string",
                  "description": "List of the allowed values."
                }
              }
            }
          }
        ]
      },
      "StringAttributeType": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute which holds a string value.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeType"
          },
          {
            "type": "object",
            "properties": {
              "stringType": {
                "type": "string",
                "description": "The type of content of the String.",
                "example": "PLAIN_TEXT",
                "enum": [
                  "RICH_TEXT",
                  "PLAIN_TEXT"
                ]
              }
            }
          }
        ]
      },
      "SymbolDataImpl": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string"
          },
          "symbolType": {
            "type": "string",
            "enum": [
              "NONE",
              "ICON_CODE",
              "ACRONYM_CODE"
            ]
          },
          "iconCode": {
            "type": "string"
          },
          "acronymCode": {
            "type": "string"
          }
        }
      },
      "AddAssignmentRequest": {
        "required": [
          "assetTypeId",
          "defaultStatusId",
          "statusIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new assignment. Should be unique within all assignments.<br/>It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "assetTypeId": {
            "type": "string",
            "description": "The ID of the asset type corresponding to the assignment",
            "format": "uuid"
          },
          "statusIds": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of IDs of the statuses",
            "items": {
              "type": "string",
              "description": "The list of IDs of the statuses",
              "format": "uuid"
            }
          },
          "characteristicTypes": {
            "type": "array",
            "description": "The list of the references to characteristic types corresponding to the assignment.  When adding a 'relationTypeDirection' for a CharacteristicTypeAssignmentReference, all characteristicTypes that reference a RelationType must have the direction set.",
            "items": {
              "$ref": "#/components/schemas/CharacteristicTypeAssignmentReference"
            }
          },
          "articulationRules": {
            "type": "array",
            "description": "The list of the articulation rules.",
            "items": {
              "$ref": "#/components/schemas/ArticulationRuleRequest"
            }
          },
          "validationRuleIds": {
            "type": "array",
            "description": "The list of IDs of the validation rules",
            "items": {
              "type": "string",
              "description": "The list of IDs of the validation rules",
              "format": "uuid"
            }
          },
          "dataQualityRuleIds": {
            "type": "array",
            "description": "The list of IDs of the data quality rules",
            "items": {
              "type": "string",
              "description": "The list of IDs of the data quality rules",
              "format": "uuid"
            }
          },
          "domainTypeIds": {
            "type": "array",
            "description": "The list of IDs of the domain types",
            "items": {
              "type": "string",
              "description": "The list of IDs of the domain types",
              "format": "uuid"
            }
          },
          "defaultStatusId": {
            "type": "string",
            "description": "The ID of the default status for the asset type",
            "format": "uuid"
          },
          "scopeId": {
            "type": "string",
            "description": "The ID of the scope the assignment corresponds to",
            "format": "uuid"
          }
        }
      },
      "ArticulationRuleRequest": {
        "required": [
          "operation",
          "score"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the articulation rule.",
            "format": "uuid"
          },
          "operation": {
            "type": "string",
            "description": "The <code>operation</code> ADD or SET.",
            "enum": [
              "ADD",
              "SET"
            ]
          },
          "score": {
            "type": "number",
            "description": "The articulation score (between 0 and 100).",
            "format": "double"
          },
          "statusId": {
            "type": "string",
            "description": "The ID of the status.",
            "format": "uuid"
          },
          "attributeTypeId": {
            "type": "string",
            "description": "The ID of the attribute type.",
            "format": "uuid"
          }
        },
        "description": "The articulation rule definitions"
      },
      "CharacteristicTypeAssignmentReference": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the reference.",
            "format": "uuid"
          },
          "min": {
            "minimum": 0,
            "type": "integer",
            "description": "The minimum allowed.",
            "format": "int32"
          },
          "max": {
            "type": "integer",
            "description": "The maximum allowed, unlimited when null.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "The resource type.",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "relationTypeDirection": {
            "type": "string",
            "description": "The relation type direction, if the referenced resource is a relation type; otherwise null.",
            "enum": [
              "TO_SOURCE",
              "TO_TARGET",
              "BOTH",
              "NONE"
            ]
          },
          "relationTypeRestriction": {
            "type": "string",
            "description": "The relation type restriction of the target Asset Type, if the referenced resource is a relation type; otherwise null. When specified, it effectively replaces the source asset type of the relation when relationTypeDirection = TO_SOURCE or the target asset type of the relation when relationTypeDirection = TO_TARGET.You can specify the relation type restriction only when relationTypeDirection is not null. If specified, it must be an ID of a subtype of the source or target asset type, depending on the value of relationTypeDirection.",
            "format": "uuid"
          }
        },
        "description": "A list of references to characteristic types corresponding to the assignment.  When adding a 'relationTypeDirection' for a CharacteristicTypeAssignmentReference, all characteristicTypes that reference a RelationType must have the direction set."
      },
      "ChangeAssignmentRequest": {
        "type": "object",
        "properties": {
          "statusIds": {
            "type": "array",
            "description": "The list of IDs of the statuses",
            "items": {
              "type": "string",
              "description": "The list of IDs of the statuses",
              "format": "uuid"
            }
          },
          "characteristicTypes": {
            "type": "array",
            "description": "A list of references to characteristic types corresponding to the assignment.  When adding a 'relationTypeDirection' for a CharacteristicTypeAssignmentReference, all characteristicTypes that reference a RelationType must have the direction set.",
            "items": {
              "$ref": "#/components/schemas/CharacteristicTypeAssignmentReference"
            }
          },
          "articulationRules": {
            "type": "array",
            "description": "The articulation rule definitions",
            "items": {
              "$ref": "#/components/schemas/ArticulationRuleRequest"
            }
          },
          "validationRuleIds": {
            "type": "array",
            "description": "The list of IDs of the validation rules",
            "items": {
              "type": "string",
              "description": "The list of IDs of the validation rules",
              "format": "uuid"
            }
          },
          "dataQualityRuleIds": {
            "type": "array",
            "description": "The list of IDs of the data quality rules",
            "items": {
              "type": "string",
              "description": "The list of IDs of the data quality rules",
              "format": "uuid"
            }
          },
          "domainTypeIds": {
            "type": "array",
            "description": "The list of IDs of the domain types",
            "items": {
              "type": "string",
              "description": "The list of IDs of the domain types",
              "format": "uuid"
            }
          },
          "defaultStatusId": {
            "type": "string",
            "description": "The ID of the default status for the asset type",
            "format": "uuid"
          },
          "scopeId": {
            "type": "string",
            "description": "The ID of the scope the assignment corresponds to.\nThe scopeId is ignored, and will be removed in the future.",
            "format": "uuid",
            "deprecated": true
          }
        }
      },
      "AssetTypeImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource.",
            "example": "Sample descripion of the resource."
          },
          "publicId": {
            "type": "string",
            "description": "The public id of the asset type.",
            "example": "\"TechnicalReport_C\""
          },
          "parent": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "symbolData": {
            "$ref": "#/components/schemas/SymbolDataImpl"
          },
          "displayNameEnabled": {
            "type": "boolean"
          },
          "ratingEnabled": {
            "type": "boolean"
          },
          "finalType": {
            "type": "boolean",
            "description": "Whether the ability to create child asset types and scoped assignments for this asset type is locked."
          },
          "lockStatuses": {
            "type": "boolean",
            "description": "Whether the ability to add custom statuses to the assignments of this asset type is locked."
          },
          "product": {
            "type": "string",
            "description": "The product to which this asset type is linked."
          }
        }
      },
      "AddScopeRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new scope. Should be unique within all scopes.<br/>It should have a format of universally unique identifier (UUID) and should not start with<br/><code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "publicId": {
            "maxLength": 260,
            "minLength": 1,
            "type": "string",
            "description": "The public id that will be assigned to the new Scope. It must be unique within all Asset Types, Complex Relation Types, Domain Types and Scopes. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". If no public id is provided, a valid public id will be generated."
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the new scope"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The description of the new scope"
          },
          "domainIds": {
            "type": "array",
            "description": "The list of IDs for domains assigned to the new scope",
            "items": {
              "type": "string",
              "description": "The list of IDs for domains assigned to the new scope",
              "format": "uuid"
            }
          },
          "communityIds": {
            "type": "array",
            "description": "The list of IDs for communities assigned to the new scope",
            "items": {
              "type": "string",
              "description": "The list of IDs for communities assigned to the new scope",
              "format": "uuid"
            }
          }
        }
      },
      "ChangeScopeRequest": {
        "type": "object",
        "properties": {
          "publicId": {
            "maxLength": 260,
            "minLength": 1,
            "type": "string",
            "description": "The new public id for the Scope. It must be unique within all Asset Types, Complex Relation Types, Domain Types and Scopes. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". WARNING : The public id should only be changed with extreme caution, since it can break existing customizations. The only valid use case is to change it after creation of the type, if no public id was specified, and the generated proposal is not acceptable."
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name for the scope"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The new description for the scope"
          },
          "domainIds": {
            "type": "array",
            "description": "The new list of IDs of domains that should included in the scope",
            "items": {
              "type": "string",
              "description": "The new list of IDs of domains that should included in the scope",
              "format": "uuid"
            }
          },
          "communityIds": {
            "type": "array",
            "description": "The new list of IDs of communities that should included in the scope",
            "items": {
              "type": "string",
              "description": "The new list of IDs of communities that should included in the scope",
              "format": "uuid"
            }
          }
        }
      },
      "ScopePagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/ScopeImpl"
            }
          }
        }
      },
      "PagedResponseScope": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/ScopeImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "AddDiagramPictureRequest": {
        "required": [
          "assetId",
          "viewId"
        ],
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The ID of the Asset for which the picture should be taken.",
            "format": "uuid"
          },
          "viewId": {
            "type": "string",
            "description": "The ID  of the View for which the picture should be taken.",
            "format": "uuid"
          }
        }
      },
      "FileInfoImpl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the file.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the file."
          },
          "contentType": {
            "type": "string",
            "description": "The MIME type of the file content."
          },
          "size": {
            "type": "integer",
            "description": "The size of the file.",
            "format": "int64"
          },
          "extension": {
            "type": "string",
            "description": "The extension of the file."
          }
        }
      },
      "FileUpload": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "File to upload",
            "format": "binary"
          }
        }
      },
      "AssetImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the asset.  <p>  Please note that \"displayName\" corresponds to the \"Name\" in the UI."
          },
          "articulationScore": {
            "type": "number",
            "description": "The articulation score for this asset.  <p>  Expresses how well this asset is articulated.  The articulation score is a percentage number ranging from 0 to 100.  The articulation rules can be configured to calculate the articulation score.  Whenever the asset is modified, by changing its attributes or statuses, the articulation score is re-evaluated.",
            "format": "double",
            "example": 89.5
          },
          "excludedFromAutoHyperlinking": {
            "type": "boolean",
            "description": "Whether this asset is excluded from hyperlinking or not."
          },
          "domain": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "type": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "status": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "avgRating": {
            "type": "number",
            "description": "The average rating.",
            "format": "double"
          },
          "ratingsCount": {
            "type": "integer",
            "description": "The number of ratings.",
            "format": "int32"
          }
        }
      },
      "AddAssetRequest": {
        "required": [
          "domainId",
          "name",
          "typeId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "The full name of the new asset. Should be unique within the domain."
          },
          "displayName": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "The display name of the new asset."
          },
          "domainId": {
            "type": "string",
            "description": "The ID of the domain that the new asset should be added to.",
            "format": "uuid"
          },
          "typeId": {
            "type": "string",
            "description": "The ID of the asset type of the new asset.",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "description": "The ID of the new asset. Should be unique within all assets.<br/>It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "statusId": {
            "type": "string",
            "description": "The ID of the status of the new asset.",
            "format": "uuid"
          },
          "excludedFromAutoHyperlinking": {
            "type": "boolean",
            "description": "Whether or not to exclude the new asset from auto hyperlinking."
          }
        }
      },
      "Tag": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the tag."
          },
          "description": {
            "type": "string",
            "description": "The description of the tag."
          },
          "assetsCount": {
            "type": "integer",
            "description": "Count of all assets to which this tag is assigned.",
            "format": "int32"
          }
        },
        "description": "Represents a tag. Tag is a label applied to one or more assets and used to enrich content with additional meta-data in a crowdsourcing way without having to go through the formal process."
      },
      "AddAssetTagsRequest": {
        "required": [
          "tagNames"
        ],
        "type": "object",
        "properties": {
          "tagNames": {
            "type": "array",
            "description": "The names of the tags to be applied on given asset.",
            "items": {
              "type": "string",
              "description": "The names of the tags to be applied on given asset."
            }
          }
        }
      },
      "ChangeAssetRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the community to be changed. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "name": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "The new full name for the asset."
          },
          "displayName": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "The new display name for the asset."
          },
          "typeId": {
            "type": "string",
            "description": "The ID of the new asset type for the asset.",
            "format": "uuid"
          },
          "statusId": {
            "type": "string",
            "description": "The ID of the new status for the asset.",
            "format": "uuid"
          },
          "domainId": {
            "type": "string",
            "description": "The ID of the new domain for the asset.",
            "format": "uuid"
          },
          "excludedFromAutoHyperlinking": {
            "type": "boolean",
            "description": "Whether the asset should be excluded from hyperlinking or not."
          }
        }
      },
      "AssetPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/AssetImpl"
            }
          }
        }
      },
      "CursorPagedResponseAsset": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/AssetImpl"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor value to be passed in next request to retrieve next page of results. Not returned on last page or when offset pagination is used."
          }
        }
      },
      "RemoveAssetTagsRequest": {
        "required": [
          "tagNames"
        ],
        "type": "object",
        "properties": {
          "tagNames": {
            "type": "array",
            "description": "The names of the tags to be removed from given asset.",
            "items": {
              "type": "string",
              "description": "The names of the tags to be removed from given asset."
            }
          }
        }
      },
      "Attribute": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "value": {
            "type": "object"
          },
          "type": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          }
        },
        "description": "The list of attributes corresponding to the complex relation.",
        "discriminator": {
          "propertyName": "resourceType",
          "mapping": {
            "BooleanAttribute": "#/components/schemas/BooleanAttribute",
            "DateAttribute": "#/components/schemas/DateAttribute",
            "MultiValueListAttribute": "#/components/schemas/MultiValueListAttribute",
            "NumericAttribute": "#/components/schemas/NumericAttribute",
            "ScriptAttribute": "#/components/schemas/ScriptAttribute",
            "SingleValueListAttribute": "#/components/schemas/SingleValueListAttribute",
            "StringAttribute": "#/components/schemas/StringAttribute"
          }
        }
      },
      "BooleanAttribute": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute containing a boolean value",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "The boolean value of the attribute."
              }
            }
          }
        ]
      },
      "DateAttribute": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute containing a date (timestamp) value",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "integer",
                "description": "The date (timestamp) value of the attribute.",
                "format": "int64",
                "example": 1486684800000
              }
            }
          }
        ]
      },
      "MultiValueListAttribute": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute containing multiple values from a predefined list of possible values",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "description": "The list of string values of the attribute.",
                "items": {
                  "type": "string",
                  "description": "The list of string values of the attribute."
                }
              }
            }
          }
        ]
      },
      "NumericAttribute": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute containing a numeric value",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The Double value of the attribute.",
                "format": "double",
                "example": 123.4
              }
            }
          }
        ]
      },
      "ScriptAttribute": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute containing a script as value",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The script value of the attribute."
              }
            }
          }
        ]
      },
      "SingleValueListAttribute": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute containing a single value from a predefined list of possible values",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The value of the attribute."
              }
            }
          }
        ]
      },
      "StringAttribute": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "description": "Represents an attribute containing a string as value",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The value of the attribute."
              }
            }
          }
        ]
      },
      "SetAssetAttributesRequest": {
        "required": [
          "typeId",
          "values"
        ],
        "type": "object",
        "properties": {
          "typeId": {
            "type": "string",
            "description": "The ID of the attribute type for the new attribute.",
            "format": "uuid"
          },
          "values": {
            "type": "array",
            "description": "The values for the new attribute.",
            "items": {
              "type": "object",
              "description": "The values for the new attribute."
            }
          }
        }
      },
      "RelationImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "source": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "target": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "type": {
            "$ref": "#/components/schemas/ResourceReference"
          },
          "startingDate": {
            "type": "integer",
            "description": "The timestamp representing the starting date of the relation.",
            "format": "int64",
            "deprecated": true
          },
          "endingDate": {
            "type": "integer",
            "description": "The timestamp representing the ending date of the relation.",
            "format": "int64",
            "deprecated": true
          }
        }
      },
      "ResourceReference": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the referenced resource.",
            "format": "uuid",
            "example": "2b7f3a1a-4e50-4077-96f0-a58a395c860d"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "example": "Community",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          }
        },
        "description": "Represents reference to the resource."
      },
      "SetAssetRelationsRequest": {
        "required": [
          "relatedAssetIds",
          "relationDirection",
          "typeId"
        ],
        "type": "object",
        "properties": {
          "typeId": {
            "type": "string",
            "description": "The ID of the relation type for the relations to be set.",
            "format": "uuid"
          },
          "relatedAssetIds": {
            "type": "array",
            "description": "The IDs of the related assets.",
            "items": {
              "type": "string",
              "description": "The IDs of the related assets.",
              "format": "uuid"
            }
          },
          "relationDirection": {
            "type": "string",
            "description": "The relation direction. If TO_SOURCE then related assets will become source assets. Otherwise they will become target assets for created relations.",
            "enum": [
              "TO_TARGET",
              "TO_SOURCE"
            ]
          }
        }
      },
      "ResponsibilityImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "role": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "baseResource": {
            "$ref": "#/components/schemas/ResourceReference"
          },
          "owner": {
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "SetAssetResponsibilitiesRequest": {
        "required": [
          "ownerIds",
          "roleId"
        ],
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "description": "The ID of the role for the responsibilities to be set.",
            "format": "uuid"
          },
          "ownerIds": {
            "type": "array",
            "description": "The IDs of the owners. An owner is either user or group.",
            "items": {
              "type": "string",
              "description": "The IDs of the owners. An owner is either user or group.",
              "format": "uuid"
            }
          }
        }
      },
      "SetAssetTagsRequest": {
        "required": [
          "tagNames"
        ],
        "type": "object",
        "properties": {
          "tagNames": {
            "type": "array",
            "description": "The names of the tags to be applied on given asset.",
            "items": {
              "type": "string",
              "description": "The names of the tags to be applied on given asset."
            }
          }
        }
      },
      "AttachmentImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "baseResource": {
            "$ref": "#/components/schemas/ResourceReference"
          },
          "file": {
            "$ref": "#/components/schemas/FileReferenceImpl"
          }
        }
      },
      "FileReferenceImpl": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the file",
            "format": "uuid",
            "example": "5d140075-f72e-4f79-81ed-ce5551dca008"
          },
          "name": {
            "type": "string",
            "description": "The name of the file."
          },
          "contentType": {
            "type": "string",
            "description": "The MIME type of the file content.",
            "example": "text/csv"
          }
        },
        "description": "The reference to the file contained by this attachment."
      },
      "AttachmentPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/AttachmentImpl"
            }
          }
        }
      },
      "PagedResponseAttachment": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/AttachmentImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "AddAttributeRequest": {
        "required": [
          "assetId",
          "typeId",
          "value"
        ],
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The ID of the asset this attribute should belong to.",
            "format": "uuid"
          },
          "typeId": {
            "type": "string",
            "description": "The ID of the attribute type for the new attribute.",
            "format": "uuid"
          },
          "value": {
            "type": "object",
            "description": "The value of this attribute. Expected type of the value depends on the type of the attribute.<br/>Following list presents type of the value depending on the kind of the attribute<br/><ul><br/><li> kind: Numeric               -> value type: number or string<br/><li> kind: Script                -> value type: string<br/><li> kind: Single Value List     -> value type: string<br/><li> kind: Date                  -> value type: number or string<br/><li> kind: String                -> value type: string<br/><li> kind: Boolean               -> value type: boolean or string<br/><li> kind: Multi Value List      -> value type: array of strings<br/></ul>"
          }
        }
      },
      "ChangeAttributeRequest": {
        "required": [
          "id",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the attribute to be changed. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "value": {
            "type": "object",
            "description": "The value of this attribute. Expected type of the value depends on the type of the attribute.<br/>Following list presents type of the value depending on the kind of the attribute<br/><ul><br/><li> kind: Numeric               -> value type: number or string<br/><li> kind: Script                -> value type: string<br/><li> kind: Single Value List     -> value type: string<br/><li> kind: Date                  -> value type: number or string<br/><li> kind: String                -> value type: string<br/><li> kind: Boolean               -> value type: boolean or string<br/><li> kind: Multi Value List      -> value type: array of strings<br/></ul>"
          }
        }
      },
      "AttributePagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor value to be passed in next request to retrieve next page of results. Not returned on last page or when offset pagination is used."
          }
        }
      },
      "CursorPagedResponseAttribute": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor value to be passed in next request to retrieve next page of results. Not returned on last page or when offset pagination is used."
          }
        }
      },
      "Address": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "city": {
            "type": "string",
            "description": "The city."
          },
          "street": {
            "type": "string",
            "description": "The street."
          },
          "number": {
            "type": "string",
            "description": "The house number."
          },
          "state": {
            "type": "string",
            "description": "The state."
          },
          "country": {
            "type": "string",
            "description": "The country."
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code."
          },
          "type": {
            "type": "string",
            "description": "The type of address.",
            "enum": [
              "HOME",
              "WORK"
            ]
          }
        },
        "description": "Represents an address for a User."
      },
      "Comment": {
        "required": [
          "baseResource",
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "content": {
            "type": "string",
            "description": "The content of the comment."
          },
          "mentionedUsers": {
            "type": "array",
            "description": "The list of mentioned users.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "baseResource": {
            "$ref": "#/components/schemas/ResourceReference"
          },
          "parent": {
            "$ref": "#/components/schemas/ResourceReference"
          }
        },
        "description": "Represents a comment."
      },
      "Email": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address"
          }
        },
        "description": "Represents an email address for a user."
      },
      "InstantMessagingAccount": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "account": {
            "type": "string",
            "description": "The string representing the account (for example the Skype ID)."
          },
          "type": {
            "type": "string",
            "description": "The type of instant messaging account.",
            "enum": [
              "AOL",
              "GTALK",
              "ICQ",
              "JABBER",
              "LIVE_MESSENGER",
              "SKYPE",
              "YAHOO_MESSENGER"
            ]
          }
        },
        "description": "Represents an instant messaging account for a User."
      },
      "PhoneNumber": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of phone number.",
            "enum": [
              "FAX",
              "MOBILE",
              "OTHER",
              "PAGER",
              "PRIVATE",
              "WORK"
            ]
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number."
          }
        },
        "description": "Represents a phone number for a User."
      },
      "User": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "userName": {
            "type": "string",
            "description": "The user name."
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user."
          },
          "emailAddress": {
            "type": "string",
            "description": "The main email address."
          },
          "gender": {
            "type": "string",
            "description": "The gender of the user.",
            "enum": [
              "MALE",
              "FEMALE",
              "UNKNOWN"
            ]
          },
          "language": {
            "type": "string",
            "description": "The current language preference for this user."
          },
          "additionalEmailAddresses": {
            "type": "array",
            "description": "The list of additional email addresses.",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "description": "The list of phone numbers.",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "instantMessagingAccounts": {
            "type": "array",
            "description": "The list of instant messaging accounts.",
            "items": {
              "$ref": "#/components/schemas/InstantMessagingAccount"
            }
          },
          "websites": {
            "type": "array",
            "description": "The list of websites.",
            "items": {
              "$ref": "#/components/schemas/Website"
            }
          },
          "addresses": {
            "type": "array",
            "description": "The list of addresses.",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "activated": {
            "type": "boolean",
            "description": "Whether this user account is already activated or not."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether this user account is already enabled or not."
          },
          "ldapUser": {
            "type": "boolean",
            "description": "Whether this is an LDAP user or not."
          },
          "userSource": {
            "type": "string",
            "enum": [
              "INTERNAL",
              "LDAP",
              "SSO"
            ]
          },
          "guestUser": {
            "type": "boolean",
            "description": "Whether this is a guest user or not."
          },
          "apiUser": {
            "type": "boolean",
            "description": "Whether this is API user or not. This field is no longer used and will be removed in the future.",
            "deprecated": true
          },
          "licenseType": {
            "type": "string",
            "description": "This field represents the given license which is no longer used,\nso the method no longer returns useful data and will be removed in the future.\nTo retrieve the user's required license type based on their permissions, please use GET /users/{userId}/licenseType",
            "deprecated": true,
            "enum": [
              "CONSUMER",
              "AUTHOR"
            ]
          }
        },
        "description": "Represents a user in the system."
      },
      "Website": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "url": {
            "type": "string",
            "description": "The URL of the website."
          },
          "type": {
            "type": "string",
            "description": "The type of website.",
            "enum": [
              "FACEBOOK",
              "LINKEDIN",
              "MYSPACE",
              "TWITTER",
              "WEBSITE"
            ]
          }
        },
        "description": "Represents a website for a User."
      },
      "AddCommentRequest": {
        "required": [
          "baseResource",
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "The actual HTML content of the comment to be added. Can contain user mentions using syntax [@User:$userId] where $userId is the ID of mentioned user.For example: [@User:00000000-0000-0000-0000-000000900002]."
          },
          "baseResource": {
            "$ref": "#/components/schemas/ResourceReference"
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the parent comment. If not null - the comment is the reply for the parent comment.",
            "format": "uuid"
          },
          "baseResourceId": {
            "type": "string",
            "format": "uuid",
            "writeOnly": true
          },
          "baseResourceType": {
            "type": "string",
            "writeOnly": true,
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          }
        },
        "description": "The properties of the comment to be added."
      },
      "ChangeCommentRequest": {
        "required": [
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "The new content of the comment to be changed.Can contain user mentions using syntax [@User:$userId] where $userId is the ID of mentioned user.For example: [@User:00000000-0000-0000-0000-000000900002]."
          }
        },
        "description": "The properties of the comment to be changed."
      },
      "CommentPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      },
      "PagedResponseComment": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "CommunityImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource.",
            "example": "Sample descripion of the resource."
          },
          "parent": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          }
        }
      },
      "AddCommunityRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "parentId": {
            "type": "string",
            "description": "The ID of the parent for the new community",
            "format": "uuid"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the new community. Should be unique across all communities"
          },
          "description": {
            "type": "string",
            "description": "The description of the new community"
          },
          "id": {
            "type": "string",
            "description": "The ID of the new community. Should be unique within all communities.<br/>It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          }
        }
      },
      "ChangeCommunityRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the community to be changed. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the new parent community for the community.",
            "format": "uuid"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name for the community."
          },
          "description": {
            "type": "string",
            "description": "The new description for the community."
          },
          "removeScopeOverlapOnMove": {
            "type": "boolean",
            "description": "Whether scopes assigned to domain community and its children should be removed on move if there are any inherited scopes in new parent community"
          }
        }
      },
      "CommunityPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/CommunityImpl"
            }
          }
        }
      },
      "CursorPagedResponseCommunity": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/CommunityImpl"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor value to be passed in next request to retrieve next page of results. Not returned on last page or when offset pagination is used."
          }
        }
      },
      "Job": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "type": {
            "type": "string",
            "description": "The type of the job.",
            "example": "IMPORT"
          },
          "userId": {
            "type": "string",
            "description": "The ID of the user that initiated this job.",
            "format": "uuid"
          },
          "visibility": {
            "type": "integer",
            "description": "The visibility of the job.",
            "format": "int32"
          },
          "progressPercentage": {
            "type": "number",
            "description": "The progress percentage of the job.",
            "format": "double",
            "example": 50
          },
          "cancelable": {
            "type": "boolean",
            "description": "Whether this job is cancelable or not. If set to false it will not be possible to cancel the job once submitted."
          },
          "startDate": {
            "type": "integer",
            "description": "The start date of the job.",
            "format": "int64",
            "example": 1488016800
          },
          "endDate": {
            "type": "integer",
            "description": "The end date of the job.",
            "format": "int64",
            "example": 1488021800
          },
          "state": {
            "type": "string",
            "description": "The state of the job.",
            "example": "COMPLETED",
            "enum": [
              "WAITING",
              "RUNNING",
              "CANCELING",
              "COMPLETED",
              "CANCELED",
              "ERROR"
            ]
          },
          "result": {
            "type": "string",
            "description": "The result of the job.",
            "example": "SUCCESS",
            "enum": [
              "NOT_SET",
              "SUCCESS",
              "COMPLETED_WITH_ERROR",
              "FAILURE",
              "ABORTED"
            ]
          },
          "message": {
            "type": "string",
            "description": "The message of the job.",
            "example": "Import finished in 12s."
          }
        },
        "description": "Represents a job. Job is a single atomic task that is to be performed asynchronously"
      },
      "AssetReferenceImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the referenced resource.",
            "format": "uuid",
            "example": "2b7f3a1a-4e50-4077-96f0-a58a395c860d"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "example": "Community",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the referenced resource."
          },
          "displayName": {
            "type": "string"
          }
        },
        "description": "The reference to the asset."
      },
      "ComplexRelationImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/ComplexRelationTypeImpl"
          },
          "legs": {
            "type": "array",
            "description": "The list of complex relation legs - assets related to the complex relation with role and co-role provided.",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationLegImpl"
            }
          },
          "attributes": {
            "type": "array",
            "description": "The list of attributes corresponding to the complex relation.",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            }
          }
        }
      },
      "ComplexRelationLegImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "assetType": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "asset": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "assetReference": {
            "$ref": "#/components/schemas/AssetReferenceImpl"
          },
          "role": {
            "type": "string",
            "description": "The role that the asset assigned to this leg plays in the complex relation."
          },
          "coRole": {
            "type": "string",
            "description": "The co-role for the asset assigned to this leg."
          }
        },
        "description": "The list of complex relation legs - assets related to the complex relation with role and co-role provided."
      },
      "AddComplexRelationRequest": {
        "required": [
          "complexRelationTypeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new complex relation. Should be unique within all complex relations and assets.<br/>It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "complexRelationTypeId": {
            "type": "string",
            "description": "The ID of the type of the complex relation.",
            "format": "uuid"
          },
          "legs": {
            "type": "array",
            "description": " The list of legs that the new complex relation should contain.",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationLegRequest"
            }
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "The attributes that the new complex relation should contain.<br/><u>Example:</u><br/>attributes : {<br/>&emsp;\"00000000-0000-0000-0000-000000003114\": [<br/>&emsp;&emsp;{<br/>&emsp;&emsp;&emsp;\"value\": \"string1\"<br/>&emsp;&emsp;}<br/>&emsp;]<br/>&emsp;\"00000000-0000-0000-0000-000000003115\": [<br/>&emsp;&emsp;{<br/>&emsp;&emsp;&emsp;\"values\": [<br/>&emsp;&emsp;&emsp;&emsp;\"string2\",<br/>&emsp;&emsp;&emsp;&emsp;\"string3\"<br/>&emsp;&emsp;&emsp;]<br/>&emsp;&emsp;}<br/>&emsp;]<br/>}",
              "items": {
                "$ref": "#/components/schemas/AttributeValue"
              }
            },
            "description": "The attributes that the new complex relation should contain.<br/><u>Example:</u><br/>attributes : {<br/>&emsp;\"00000000-0000-0000-0000-000000003114\": [<br/>&emsp;&emsp;{<br/>&emsp;&emsp;&emsp;\"value\": \"string1\"<br/>&emsp;&emsp;}<br/>&emsp;]<br/>&emsp;\"00000000-0000-0000-0000-000000003115\": [<br/>&emsp;&emsp;{<br/>&emsp;&emsp;&emsp;\"values\": [<br/>&emsp;&emsp;&emsp;&emsp;\"string2\",<br/>&emsp;&emsp;&emsp;&emsp;\"string3\"<br/>&emsp;&emsp;&emsp;]<br/>&emsp;&emsp;}<br/>&emsp;]<br/>}"
          }
        }
      },
      "AttributeValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The new attributes that the new complex relation should contain."
      },
      "ComplexRelationLegRequest": {
        "required": [
          "assetId"
        ],
        "type": "object",
        "properties": {
          "legTypeId": {
            "type": "string",
            "description": "The ID of the type of the single leg for complex relation. If this is specified, the <code>relationTypeId</code> must not be specified.",
            "format": "uuid",
            "deprecated": true
          },
          "relationTypeId": {
            "type": "string",
            "description": "The ID of the type of the relation of the leg. If this is specified, the legTypeId must not be specified.",
            "format": "uuid"
          },
          "assetId": {
            "type": "string",
            "description": "The ID of the asset attached to the leg of the complex relation.",
            "format": "uuid"
          }
        },
        "description": "The new list of legs that the changed complex relation should contain."
      },
      "ChangeComplexRelationRequest": {
        "type": "object",
        "properties": {
          "legs": {
            "type": "array",
            "description": "The new list of legs that the changed complex relation should contain.",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationLegRequest"
            }
          },
          "relations": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "The new relations that the new complex relation should contain.",
              "items": {
                "$ref": "#/components/schemas/RelatedAssetId"
              }
            },
            "description": "The new relations that the new complex relation should contain."
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "The new attributes that the new complex relation should contain.",
              "items": {
                "$ref": "#/components/schemas/AttributeValue"
              }
            },
            "description": "The new attributes that the new complex relation should contain."
          }
        }
      },
      "RelatedAssetId": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "description": "The new relations that the new complex relation should contain."
      },
      "ExportComplexRelationsToCSVRequest": {
        "required": [
          "complexRelationTypeId"
        ],
        "type": "object",
        "properties": {
          "complexRelationTypeId": {
            "type": "string",
            "description": "The Id of the ComplexRelationType for which the export will be executed.",
            "format": "uuid"
          },
          "domainId": {
            "type": "string",
            "description": "The Id of the Domain to filter on (optional).",
            "format": "uuid"
          },
          "storeAsAttachment": {
            "type": "boolean",
            "description": "Sets if the export should be stored as an attachment (<code>true</code>) or not (<code>false</code>)<br/>of the provided {@link #domainId}."
          },
          "fileName": {
            "type": "string",
            "description": "The name of the file. (optional) if not provided a name is generated."
          },
          "includeHeaderRow": {
            "type": "boolean",
            "description": "Set if the file will include a header (<code>true</code>) or not (<code>false</code>)<br/>Default value is <code>false</code>."
          },
          "supportRoundtrip": {
            "type": "boolean",
            "description": "Adds characteristics to support reimport (<code>true</code>) or not (<code>false</code>)<br/>Default value is <code>false</code>."
          },
          "removeFormatting": {
            "type": "boolean",
            "description": "Remove text formatting (<code>true</code>) or not (<code>false</code>)<br/>Default value is <code>false</code>."
          },
          "separator": {
            "type": "string",
            "description": "The delimiter character used to separate entries.<br/>If not provided default value <code>';'</code> is used."
          },
          "quote": {
            "type": "string",
            "description": "The delimiter character used for quoted entries.<br/>If not provided default value <code>'\\\"'</code> is used."
          },
          "escape": {
            "type": "string",
            "description": "The delimiter character used to escape separator or quote character.<br/>If not provided default value <code>'\\\\'</code> is used."
          }
        }
      },
      "ExportComplexRelationsToExcelRequest": {
        "required": [
          "complexRelationTypeId"
        ],
        "type": "object",
        "properties": {
          "complexRelationTypeId": {
            "type": "string",
            "description": "The Id of the ComplexRelationType for which the export will be executed.",
            "format": "uuid"
          },
          "domainId": {
            "type": "string",
            "description": "The Id of the Domain to filter on (optional).",
            "format": "uuid"
          },
          "storeAsAttachment": {
            "type": "boolean",
            "description": "Sets if the export should be stored as an attachment (<code>true</code>) or not (<code>false</code>)<br/>of the provided {@link #domainId}."
          },
          "fileName": {
            "type": "string",
            "description": "The name of the file. (optional) if not provided a name is generated."
          },
          "includeHeaderRow": {
            "type": "boolean",
            "description": "Set if the file will include a header (<code>true</code>) or not (<code>false</code>)<br/>Default value is <code>false</code>."
          },
          "supportRoundtrip": {
            "type": "boolean",
            "description": "Adds characteristics to support reimport (<code>true</code>) or not (<code>false</code>)<br/>Default value is <code>false</code>."
          },
          "removeFormatting": {
            "type": "boolean",
            "description": "Remove text formatting (<code>true</code>) or not (<code>false</code>)<br/>Default value is <code>false</code>."
          },
          "sheetName": {
            "type": "string",
            "description": "The name of the sheet."
          },
          "xlsx": {
            "type": "boolean",
            "description": "Set if the Excel file to export will be '.xlsx' file (<code>true</code>) or a '.xls' file (<code>false</code>)<br/>Default value is (<code>true</code>)."
          }
        }
      },
      "ComplexRelationPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationImpl"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor value to be passed in next request to retrieve next page of results. Not returned on last page or when offset pagination is used."
          }
        }
      },
      "CursorPagedResponseComplexRelation": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationImpl"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor value to be passed in next request to retrieve next page of results. Not returned on last page or when offset pagination is used."
          }
        }
      },
      "DomainImpl": {
        "required": [
          "community",
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource.",
            "example": "Sample descripion of the resource."
          },
          "type": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "community": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "excludedFromAutoHyperlinking": {
            "type": "boolean",
            "description": "Whether this domain is excluded from hyperlinking or not."
          }
        }
      },
      "AddDomainRequest": {
        "required": [
          "communityId",
          "name",
          "typeId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the new domain. Should be unique within the community."
          },
          "communityId": {
            "type": "string",
            "description": "The ID of the community that the new domain should be added to.",
            "format": "uuid"
          },
          "typeId": {
            "type": "string",
            "description": "The ID of the domain type of the new domain.",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "description": "The description of the new domain."
          },
          "id": {
            "type": "string",
            "description": "The ID of the new domain. Should be unique within all domains.<br/>It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "excludedFromAutoHyperlinking": {
            "type": "boolean"
          }
        }
      },
      "ChangeDomainRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the domain to be changed. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name for the domain"
          },
          "communityId": {
            "type": "string",
            "description": "The ID of the new community for the domain",
            "format": "uuid"
          },
          "typeId": {
            "type": "string",
            "description": "The ID of the new domain type for the domain",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "description": "The new description for the domain"
          },
          "excludedFromAutoHyperlinking": {
            "type": "boolean",
            "description": "Whether the domain should be excluded from hyperlinking or not"
          },
          "removeScopeOverlapOnMove": {
            "type": "boolean",
            "description": "Whether scopes assigned to domain should be removed on move if there are any inherited scopes in new community"
          }
        }
      },
      "DomainPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/DomainImpl"
            }
          }
        }
      },
      "CursorPagedResponseDomain": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/DomainImpl"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor value to be passed in next request to retrieve next page of results. Not returned on last page or when offset pagination is used."
          }
        }
      },
      "AddIssueRequest": {
        "required": [
          "description",
          "name",
          "typeId"
        ],
        "type": "object",
        "properties": {
          "responsibleCommunityId": {
            "type": "string",
            "description": "The ID of the community responsible for handling the issue.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the subject for which the issue is being created."
          },
          "typeId": {
            "type": "string",
            "description": "The type ID of the issue to be created.",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "description": "The description for the issue."
          },
          "priority": {
            "type": "string",
            "description": "The priority for the issue."
          },
          "requesterId": {
            "type": "string",
            "description": "The requester of the issue.",
            "format": "uuid"
          },
          "relatedAssets": {
            "type": "array",
            "description": "The list of assets which the issue is related to.",
            "items": {
              "$ref": "#/components/schemas/RelatedAssetReference"
            }
          },
          "categoryIds": {
            "type": "array",
            "description": "The list of IDs of assets which represent categories for this issue. Each asset in this list should be of type Issue Category.",
            "items": {
              "type": "string",
              "description": "The list of IDs of assets which represent categories for this issue. Each asset in this list should be of type Issue Category.",
              "format": "uuid"
            }
          }
        }
      },
      "RelatedAssetReference": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The ID of the asset which the issue is related to.",
            "format": "uuid"
          },
          "relationTypeId": {
            "type": "string",
            "description": "The ID of relation type for related asset.",
            "format": "uuid"
          },
          "direction": {
            "type": "boolean",
            "description": "The direction of the relation where true means the issue is the source and false means the issue is the target."
          }
        },
        "description": "The list of assets which the issue is related to."
      },
      "PagedResponseAsset": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/AssetImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "ConnectionStringParameter": {
        "required": [
          "id",
          "label",
          "parameter"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "label": {
            "type": "string"
          },
          "parameter": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          }
        }
      },
      "JdbcDriver": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "databaseName": {
            "type": "string"
          },
          "databaseVersion": {
            "type": "string"
          },
          "driver": {
            "type": "string"
          },
          "connectionString": {
            "type": "string"
          },
          "jdbcDriverFiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JdbcDriverFile"
            }
          },
          "connectionStringParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectionStringParameter"
            }
          }
        },
        "description": "The list of results."
      },
      "JdbcDriverFile": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "fileName": {
            "type": "string"
          },
          "fileType": {
            "type": "string"
          }
        }
      },
      "JdbcDriverPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/JdbcDriver"
            }
          }
        }
      },
      "PagedResponseJdbcDriver": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/JdbcDriver"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "Rating": {
        "required": [
          "asset",
          "id",
          "rating",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "rating": {
            "type": "number",
            "description": "The value of the rating represented as a floating point number between 0 and 1.",
            "format": "double",
            "example": 0.2
          },
          "review": {
            "type": "string",
            "description": "The review attached to the rating."
          },
          "asset": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          }
        },
        "description": "Represents a rating.\nA rating is a numerical value representing the author's opinion about the rated resource. Ratings can be accompanied by written reviews."
      },
      "AddRatingRequest": {
        "required": [
          "assetId",
          "rating"
        ],
        "type": "object",
        "properties": {
          "rating": {
            "type": "number",
            "description": "The value of the rating represented as a floating point number between 0 and 1.",
            "format": "double",
            "example": 0.2
          },
          "review": {
            "type": "string",
            "description": "The review attached to the rating.",
            "example": "This is a review"
          },
          "assetId": {
            "type": "string",
            "description": "The ID of the asset to which the rating will be assigned.",
            "format": "uuid"
          }
        }
      },
      "ChangeRatingRequest": {
        "required": [
          "rating"
        ],
        "type": "object",
        "properties": {
          "rating": {
            "type": "number",
            "description": "The value of the rating represented as a floating point number between 0 and 1.",
            "format": "double",
            "example": 0.2
          },
          "review": {
            "type": "string",
            "description": "The review attached to the rating."
          }
        }
      },
      "RatingsPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Rating"
            }
          }
        }
      },
      "PagedResponseRating": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Rating"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "AddRelationRequest": {
        "required": [
          "sourceId",
          "targetId",
          "typeId"
        ],
        "type": "object",
        "properties": {
          "sourceId": {
            "type": "string",
            "description": "The ID of the source of the relation.",
            "format": "uuid"
          },
          "targetId": {
            "type": "string",
            "description": "The ID of the target of the relation.",
            "format": "uuid"
          },
          "typeId": {
            "type": "string",
            "description": "The ID of the type of the relation.",
            "format": "uuid"
          },
          "startingDate": {
            "type": "integer",
            "description": "The starting date of the relation.",
            "format": "int64",
            "example": 1488016800,
            "deprecated": true
          },
          "endingDate": {
            "type": "integer",
            "description": "The ending date of the relation.",
            "format": "int64",
            "example": 1658021800,
            "deprecated": true
          }
        }
      },
      "ChangeRelationRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the relation to be changed. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "sourceId": {
            "type": "string",
            "description": "The ID of the new source for the relation.",
            "format": "uuid"
          },
          "targetId": {
            "type": "string",
            "description": "The ID of the new target for the relation.",
            "format": "uuid"
          },
          "startingDate": {
            "type": "integer",
            "description": "The new starting date for the relation.",
            "format": "int64",
            "example": 1488016800,
            "deprecated": true
          },
          "endingDate": {
            "type": "integer",
            "description": "The new ending date for the relation.",
            "format": "int64",
            "example": 1658021800,
            "deprecated": true
          }
        }
      },
      "RelationPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/RelationImpl"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor value to be passed in next request to retrieve next page of results. Not returned on last page or when offset pagination is used."
          }
        }
      },
      "CursorPagedResponseRelation": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results. -1 when cursor pagination is used.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/RelationImpl"
            }
          },
          "nextCursor": {
            "type": "string",
            "description": "Cursor value to be passed in next request to retrieve next page of results. Not returned on last page or when offset pagination is used."
          }
        }
      },
      "AddResponsibilityRequest": {
        "required": [
          "ownerId",
          "roleId"
        ],
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "description": "The ID of the role that should be assigned to user.",
            "format": "uuid"
          },
          "ownerId": {
            "type": "string",
            "description": "The ID of the user who the responsibility is created for.",
            "format": "uuid"
          },
          "resourceId": {
            "type": "string",
            "description": "The ID of the resource which the responsibility is created for. NOTE: if null, a global responsibility is created.",
            "format": "uuid"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource which the responsibility is created for, i.e. [Community, Asset, Domain].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          }
        }
      },
      "PagedResponseResponsibility": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/ResponsibilityImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "ChangeTagRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name of the tag."
          }
        },
        "description": "The properties of the tag to be changed."
      },
      "TagPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        }
      },
      "PagedResponseTag": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "MergeTagsRequest": {
        "required": [
          "fromId",
          "toId"
        ],
        "type": "object",
        "properties": {
          "fromId": {
            "type": "string",
            "description": "The ID of the tag to be replaced.",
            "format": "uuid"
          },
          "toId": {
            "type": "string",
            "description": "The ID of the replacement tag.",
            "format": "uuid"
          }
        },
        "description": "The IDs of the tags to be merged."
      },
      "CancelJobRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A message for the cancellation."
          }
        }
      },
      "JobPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Job"
            }
          }
        }
      },
      "PagedResponseJob": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Job"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "Mapping": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "externalSystemId": {
            "type": "string",
            "description": "The id of the external system that the mapped resource belongs to.",
            "example": "6b1e48c3-0d90-42ad-a0e3-bfb6644c8cf9"
          },
          "externalEntityId": {
            "type": "string",
            "description": "The external id of the mapped resource.",
            "example": "844c85ed-b851-438f-8207-62843b747733"
          },
          "externalEntityUrl": {
            "type": "string",
            "description": "The external URL of the mapped resource.",
            "example": "https://www.collibra.com"
          },
          "description": {
            "type": "string",
            "description": "The description of the mapped resource."
          },
          "mappedResource": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "lastSyncDate": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last synchronization of mapped resource.",
            "format": "int64",
            "example": 1475904011120
          },
          "syncAction": {
            "type": "string",
            "description": "Represents the type of the action performed during last successful synchronization",
            "example": "ADD",
            "enum": [
              "ADD",
              "UPDATE",
              "REMOVE",
              "ADD, UPDATE, REMOVE"
            ]
          }
        },
        "description": "Represents a mapping.\nA mapping is a representation of a link between external entity from external system and corresponding resource in the Data Governance Center.\nA single mapping refers to at most one resource which can either be a community, a domain, or an asset."
      },
      "AddMappingRequest": {
        "required": [
          "externalEntityId",
          "externalSystemId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new mapping. Should be unique within all mappings.<br/>It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid",
            "example": "6d1f6b24-eda3-4b45-b17f-8a0a0ba23d00"
          },
          "externalSystemId": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "description": "The ID of the external system that the mapped resource belongs to.",
            "example": "EXT_BI_SYS"
          },
          "externalEntityId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The external ID of the mapped resource.",
            "example": "ID_1234"
          },
          "externalEntityUrl": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The external URL of the mapped resource.",
            "example": "https://example.com"
          },
          "description": {
            "type": "string",
            "description": "The description of the mapped resource.",
            "example": "This is the description of the linked asset."
          },
          "mappedResourceId": {
            "type": "string",
            "description": "The ID of the mapped resource.",
            "format": "uuid"
          },
          "lastSyncDate": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last synchronization of mapped resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "syncAction": {
            "type": "string",
            "description": "Represents the type of the action performed during last successful synchronization",
            "enum": [
              "ADD",
              "UPDATE",
              "REMOVE"
            ]
          }
        },
        "description": "The properties of the mapping to be added."
      },
      "ChangeMappingRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the mapping to be changed. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "externalSystemId": {
            "maxLength": 36,
            "minLength": 1,
            "type": "string",
            "description": "The ID of the external system that the mapped resource belongs to.",
            "example": "EXT_BI_SYS"
          },
          "externalEntityId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The external ID of the mapped resource.",
            "example": "ID_1234"
          },
          "externalEntityUrl": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The external URL of the mapped resource.",
            "example": "https://example.com"
          },
          "description": {
            "type": "string",
            "description": "The description of the mapped resource.",
            "example": "This is the description of the linked asset."
          },
          "mappedResourceId": {
            "type": "string",
            "description": "The ID of the mapped resource.",
            "format": "uuid"
          },
          "lastSyncDate": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last synchronization of mapped resource.",
            "format": "int64"
          },
          "syncAction": {
            "type": "string",
            "description": "Represents the type of the action performed during last successful synchronization",
            "enum": [
              "ADD",
              "UPDATE",
              "REMOVE"
            ]
          }
        },
        "description": "The properties of the mapping to be changed, for the mapping identified by its ID."
      },
      "ChangeMappingByExternalEntityRequest": {
        "type": "object",
        "properties": {
          "externalEntityUrl": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The external URL of the mapped resource.",
            "example": "https://example.com"
          },
          "description": {
            "type": "string",
            "description": "The description of the mapped resource.",
            "example": "This is the description of the linked asset."
          },
          "mappedResourceId": {
            "type": "string",
            "description": "The ID of the mapped resource.",
            "format": "uuid"
          },
          "lastSyncDate": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last synchronization of mapped resource.",
            "format": "int64"
          },
          "syncAction": {
            "type": "string",
            "description": "Represents the type of the action performed during last successful synchronization",
            "enum": [
              "ADD",
              "UPDATE",
              "REMOVE"
            ]
          }
        },
        "description": "The properties of the mapping to be changed, for the mapping identified by its external IDs."
      },
      "ChangeMappingByMappedResourceRequest": {
        "required": [
          "mappedResourceId"
        ],
        "type": "object",
        "properties": {
          "externalEntityUrl": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The external URL of the mapped resource.",
            "example": "https://example.com"
          },
          "description": {
            "type": "string",
            "description": "The description of the mapped resource.",
            "example": "This is the description of the linked asset."
          },
          "mappedResourceId": {
            "type": "string",
            "description": "The ID of the mapped resource. Silently ignored if the ID of the mapped resource is provided as path parameter of the request.",
            "format": "uuid"
          },
          "lastSyncDate": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last synchronization of mapped resource.",
            "format": "int64"
          },
          "syncAction": {
            "type": "string",
            "description": "Represents the type of the action performed during last successful synchronization",
            "enum": [
              "ADD",
              "UPDATE",
              "REMOVE"
            ]
          }
        },
        "description": "The properties of the mapping to be changed, for the mapping identified by its external system IDs and mapped resource ID."
      },
      "MappingPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Mapping"
            }
          }
        }
      },
      "PagedResponseMapping": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/Mapping"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "AddAssetTypeRequest": {
        "required": [
          "displayNameEnabled",
          "name",
          "ratingEnabled",
          "symbolType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID that will be assigned to the new Asset Type. It should be unique within all Asset Types, and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "publicId": {
            "maxLength": 260,
            "minLength": 1,
            "type": "string",
            "description": "The public id that will be assigned to the new Asset Type. It must be unique within all Asset Types, Complex Relation Types, Domain Types and Scopes. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". If no public id is provided, a valid public id will be generated."
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the new Asset Type. Should be unique within all Asset Types.",
            "example": "Sample Asset Type"
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the new Asset Type.",
            "example": "Example of Asset Type creation from the REST API documentation"
          },
          "color": {
            "maxLength": 7,
            "minLength": 0,
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "type": "string",
            "description": "The color of the symbol in hex format.",
            "example": "#ff0000"
          },
          "symbolType": {
            "type": "string",
            "description": "The symbol type.",
            "enum": [
              "NONE",
              "ICON_CODE",
              "ACRONYM_CODE"
            ]
          },
          "iconCode": {
            "type": "string",
            "description": "The icon code, a code representing the icon that should be shown."
          },
          "acronymCode": {
            "pattern": "^([A-Za-z0-9]{1,4})$",
            "type": "string",
            "description": "A code representing the acronym that should be shown.",
            "example": "TST"
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the parent for the new Asset Type.",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000011001"
          },
          "displayNameEnabled": {
            "type": "boolean",
            "description": "Whether the display name should be enabled for all Assets of the type being created."
          },
          "ratingEnabled": {
            "type": "boolean",
            "description": "Whether ratings should be enabled for all Assets of the type being created."
          }
        }
      },
      "ChangeAssetTypeRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Asset Type to be changed. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "publicId": {
            "maxLength": 260,
            "minLength": 1,
            "type": "string",
            "description": "The new public id for the Asset Type. It must be unique within all Asset Types, Complex Relation Types, Domain Types and Scopes. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". WARNING : The public id should only be changed with extreme caution, since it can break existing customizations. The only valid use case is to change it after creation of the type, if no public id was specified, and the generated proposal is not acceptable."
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name for the Asset Type."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The new description for the Asset Type."
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the new parent for the Asset Type.",
            "format": "uuid"
          },
          "color": {
            "maxLength": 7,
            "minLength": 0,
            "pattern": "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$",
            "type": "string",
            "description": "The color of the symbol, in a hex format e.g. '#000000'. This format always includes the '#' and has a size of 7."
          },
          "symbolType": {
            "type": "string",
            "description": "The symbol type.",
            "enum": [
              "NONE",
              "ICON_CODE",
              "ACRONYM_CODE"
            ]
          },
          "iconCode": {
            "type": "string",
            "description": "The icon code, a code representing the icon that should be shown."
          },
          "acronymCode": {
            "pattern": "^([A-Za-z0-9]{1,4})$",
            "type": "string",
            "description": "The acronym code, a code representing the acronym that should be shown."
          },
          "displayNameEnabled": {
            "type": "boolean",
            "description": "Whether display name should be enabled for all Assets of changed type."
          },
          "ratingEnabled": {
            "type": "boolean",
            "description": "Whether rating should be enabled for all Assets of given type."
          }
        }
      },
      "AssetTypePagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/AssetTypeImpl"
            }
          }
        }
      },
      "PagedResponseAssetType": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/AssetTypeImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "AddAttributeTypeRequest": {
        "required": [
          "kind",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new Attribute Type. Should be unique within all Attribute Types.<br/>It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "publicId": {
            "maxLength": 260,
            "minLength": 1,
            "type": "string",
            "description": "The public id that will be assigned to the new Attribute Type. It must be unique within all Attribute Types. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". If no public id is provided, a valid public id will be generated."
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the new Attribute Type. Should be unique within all Attribute Types."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the new Attribute Type."
          },
          "kind": {
            "type": "string",
            "description": "The kind of the new Attribute Type.",
            "enum": [
              "BOOLEAN",
              "STRING",
              "NUMERIC",
              "DATE",
              "SINGLE_VALUE_LIST",
              "MULTI_VALUE_LIST",
              "SCRIPT"
            ]
          },
          "language": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The language of the new Attribute Type. This property is only applicable to Attribute Types of kind \"Script\"."
          },
          "statisticsEnabled": {
            "type": "boolean",
            "description": "Whether statistics should be enabled. This property is only applicable to Attribute Types of kind \"Numeric\" or \"Boolean\"."
          },
          "allowedValues": {
            "type": "array",
            "description": "List of allowed values. This property is only applicable to Attribute Types of kind \"Single Value List\" or \"Multi Value List\".",
            "items": {
              "type": "string",
              "description": "List of allowed values. This property is only applicable to Attribute Types of kind \"Single Value List\" or \"Multi Value List\"."
            }
          },
          "stringType": {
            "type": "string",
            "description": "Rich text or plain text This property is only applicable to Attribute Types of kind \"String\".",
            "enum": [
              "RICH_TEXT",
              "PLAIN_TEXT"
            ]
          },
          "idString": {
            "type": "string",
            "description": "The ID of the Attribute Type. This field will be removed in the future.",
            "deprecated": true
          },
          "isInteger": {
            "type": "boolean",
            "description": "Whether Attribute Type holds an integer value. This property is only applicable to Attribute Types of kind \"Numeric\"."
          }
        }
      },
      "ChangeAttributeTypeRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Attribute Type to be changed. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "publicId": {
            "maxLength": 260,
            "minLength": 1,
            "type": "string",
            "description": "The new public id for the Attribute Type. It must be unique within all Attribute Types. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". WARNING : The public id should only be changed with extreme caution, since it can break existing customizations. The only valid use case is to change it after creation of the type, if no public id was specified, and the generated proposal is not acceptable."
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name for the Attribute Type."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The new description for the Attribute Type."
          },
          "language": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The new language for the Attribute Type. This property is only applicable to Attribute Types of kind \"Script\", and specifies the language of the script."
          },
          "statisticsEnabled": {
            "type": "boolean",
            "description": "Whether statistics should be enabled. This property is only applicable to Attribute Types of kind \"Numeric\" or \"Boolean\"."
          },
          "isInteger": {
            "type": "boolean",
            "description": "Whether Attribute Type holds integer value. This property is only applicable to Attribute Types of kind \"Numeric\"."
          },
          "allowedValues": {
            "type": "array",
            "description": "List of allowed values. This property is only applicable to Attribute Types of kind \"Single Value List\" or \"Multi Value List\".",
            "items": {
              "type": "string",
              "description": "List of allowed values. This property is only applicable to Attribute Types of kind \"Single Value List\" or \"Multi Value List\"."
            }
          }
        }
      },
      "AttributeTypePagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/AttributeType"
            }
          }
        }
      },
      "PagedResponseAttributeType": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/AttributeType"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "AddComplexRelationTypeRequest": {
        "required": [
          "attributeTypes",
          "legTypes",
          "name",
          "symbolType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new Complex Relation Type. Should be unique within all Complex Relation Types.<br/>It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "publicId": {
            "maxLength": 260,
            "minLength": 1,
            "type": "string",
            "description": "The public id that will be assigned to the new Complex Relation Type. It must be unique within all Asset Types, Complex Relation Types, Domain Types and Scopes. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". If no public id is provided, a valid public id will be generated."
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the new Complex Relation Type. Should be unique within all Complex Relation Types."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the new Complex Relation Type."
          },
          "color": {
            "maxLength": 7,
            "minLength": 0,
            "pattern": "^#([A-Fa-f0-9]{6})$",
            "type": "string",
            "description": "The color of the symbol, in a hex format e.g. '#000000'.  This format always includes the '#' and has a size of 7.",
            "example": "#FFFFFF"
          },
          "symbolType": {
            "type": "string",
            "description": "The symbol type.",
            "enum": [
              "NONE",
              "ICON_CODE",
              "ACRONYM_CODE"
            ]
          },
          "iconCode": {
            "type": "string",
            "description": "The icon code of the new Complex Relation Type."
          },
          "acronymCode": {
            "pattern": "^([A-Za-z0-9]{1,4})$",
            "type": "string",
            "description": "The acronym code of the new Complex Relation Type."
          },
          "attributeTypes": {
            "type": "array",
            "description": "The list of attribute types for the new Complex Relation Type.",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationAttributeTypeRequest"
            }
          },
          "legTypes": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of leg types for the new Complex Relation Type.",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationLegTypeRequest"
            }
          }
        }
      },
      "ComplexRelationAttributeTypeRequest": {
        "required": [
          "attributeTypeId"
        ],
        "type": "object",
        "properties": {
          "min": {
            "type": "integer",
            "description": "The minimum number of Attribute Type occurrences.",
            "format": "int32",
            "example": 0
          },
          "max": {
            "type": "integer",
            "description": "The maximum number of Attribute Type occurrences.",
            "format": "int32",
            "example": 2
          },
          "attributeTypeId": {
            "type": "string",
            "description": "The ID of the Attribute Type.",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "description": "The ID of the Complex Relation Attribute Type. If specified, it will be used to create a new Complex Relation Attribute Type if none exists, or as id for the existing Complex Relation Attribute Type. If not specified, a random id will be generated and used to create a new Complex Relation Attribute Type if none exists, or as id for the existing Complex Relation Attribute Type.",
            "format": "uuid"
          }
        },
        "description": "The new list of attribute types for the Complex Relation Type."
      },
      "ComplexRelationLegTypeRequest": {
        "required": [
          "assetTypeId",
          "role"
        ],
        "type": "object",
        "properties": {
          "min": {
            "type": "integer",
            "description": "The minimum number of Leg Type occurrences.",
            "format": "int32",
            "example": 1
          },
          "max": {
            "type": "integer",
            "description": "The maximum number of Leg Type occurrences.",
            "format": "int32",
            "example": 3
          },
          "role": {
            "type": "string",
            "description": "The name of the role that the source plays."
          },
          "coRole": {
            "type": "string",
            "description": "The name of the role that the target plays."
          },
          "assetTypeId": {
            "type": "string",
            "description": "The ID of the Asset Type of the Relation.<br/>In the next major release, this parameter will only be valid when adding a new leg to the ComplexRelationType. Changing the Asset Type of an existing leg won't be allowed and will result in an error.",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "description": "The id of the Complex Relation Leg Type. The Leg Type will be created with this id or updated.<br/>If left empty on update the Leg Type will be recreated.",
            "format": "uuid"
          },
          "relationTypeId": {
            "type": "string",
            "description": "The id of Relation Type of the Leg Type.",
            "format": "uuid"
          }
        },
        "description": "The new list of leg types for the Complex Relation Type."
      },
      "ChangeComplexRelationTypeRequest": {
        "type": "object",
        "properties": {
          "publicId": {
            "maxLength": 260,
            "minLength": 1,
            "type": "string",
            "description": "The new public id for the Complex Relation Type. It must be unique within all Asset Types, Complex Relation Types, Domain Types and Scopes. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". WARNING : The public id should only be changed with extreme caution, since it can break existing customizations. The only valid use case is to change it after creation of the type, if no public id was specified, and the generated proposal is not acceptable."
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name for the Complex Relation Type."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The new description for the Complex Relation Type."
          },
          "color": {
            "maxLength": 7,
            "minLength": 0,
            "pattern": "^#([A-Fa-f0-9]{6})$",
            "type": "string",
            "description": "The color of the symbol, in a hex format e.g. '#000000'.  This format always includes the '#' and has a size of 7."
          },
          "symbolType": {
            "type": "string",
            "description": "The new symbol type.",
            "enum": [
              "NONE",
              "ICON_CODE",
              "ACRONYM_CODE"
            ]
          },
          "iconCode": {
            "type": "string",
            "description": "The new icon code for the Complex Relation Type."
          },
          "acronymCode": {
            "pattern": "^([A-Za-z0-9]{1,4})$",
            "type": "string",
            "description": "The new acronym code for the Complex Relation Type."
          },
          "attributeTypes": {
            "type": "array",
            "description": "The new list of attribute types for the Complex Relation Type.",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationAttributeTypeRequest"
            }
          },
          "legTypes": {
            "type": "array",
            "description": "The new list of leg types for the Complex Relation Type.",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationLegTypeRequest"
            }
          }
        }
      },
      "ComplexRelationTypePagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationTypeImpl"
            }
          }
        }
      },
      "PagedResponseComplexRelationType": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/ComplexRelationTypeImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "DomainTypeImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource.",
            "example": "Sample descripion of the resource."
          },
          "publicId": {
            "type": "string",
            "description": "The public id of the domain type.",
            "example": "\"MyDomainType_C\""
          },
          "parent": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          }
        }
      },
      "AddDomainTypeRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new Domain Type. Should be unique within all Domain Types.<br/>It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "publicId": {
            "maxLength": 260,
            "minLength": 1,
            "type": "string",
            "description": "The public id that will be assigned to the new Domain Type. It must be unique within all Domain Types. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". If no public id is provided, a valid public id will be generated."
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the new Domain Type. Should be unique within all Domain Types."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the new Domain Type."
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the parent of the new Domain Type.",
            "format": "uuid"
          }
        }
      },
      "ChangeDomainTypeRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Domain Type to be changed. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "publicId": {
            "maxLength": 260,
            "minLength": 1,
            "type": "string",
            "description": "The new public id for the Domain Type. It must be unique within all Domain Types. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". WARNING : The public id should only be changed with extreme caution, since it can break existing customizations. The only valid use case is to change it after creation of the type, if no public id was specified, and the generated proposal is not acceptable."
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name for the Domain Type."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The new description for the Domain Type."
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the new parent for the Domain Type.",
            "format": "uuid"
          }
        }
      },
      "DomainTypePagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/DomainTypeImpl"
            }
          }
        }
      },
      "PagedResponseDomainType": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/DomainTypeImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "AddRelationTypeRequest": {
        "required": [
          "coRole",
          "role",
          "sourceTypeId",
          "targetTypeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new Relation Type. Should be unique within all Relation Types.<br/>It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "publicId": {
            "type": "string",
            "description": "The public id that will be assigned to the new Relation Type. It must be unique within all Relation Types. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". If no public id is provided, a valid public id will be generated."
          },
          "sourceTypeId": {
            "type": "string",
            "description": "The ID of the source type for the new Relation Type.",
            "format": "uuid"
          },
          "role": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the role that the source plays."
          },
          "targetTypeId": {
            "type": "string",
            "description": "The ID of the source type for the new Relation Type.",
            "format": "uuid"
          },
          "coRole": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the role that the target plays."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the Relation Type."
          }
        }
      },
      "ChangeRelationTypeRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Relation Type to be changed. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "publicId": {
            "maxLength": 260,
            "minLength": 1,
            "type": "string",
            "description": "The new public id for the Relation Type. It must be unique within all Relation Types. It should contain only ASCII letters and digits. It must start with an uppercase ASCII character. It must end with \"_C\". WARNING : The public id should only be changed with extreme caution, since it can break existing customizations. The only valid use case is to change it after creation of the type, if no public id was specified, and the generated proposal is not acceptable."
          },
          "sourceTypeId": {
            "type": "string",
            "description": "The ID of the new source type for the Relation Type.",
            "format": "uuid"
          },
          "role": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name of the role that the source plays."
          },
          "targetTypeId": {
            "type": "string",
            "description": "The ID of the new target type for the Relation Type.",
            "format": "uuid"
          },
          "coRole": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name of the role that the target plays."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The new description of the Relation Type."
          }
        }
      },
      "RelationTypePagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/RelationTypeImpl"
            }
          }
        }
      },
      "PagedResponseRelationType": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/RelationTypeImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "StatusImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource.",
            "example": "Sample descripion of the resource."
          }
        }
      },
      "AddStatusRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new Status. Should be unique within all Statuses.<br/>It should have a format of universally unique identifier (UUID) and should not start with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the new Status. Should be unique within all Statuses."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the new Status."
          }
        }
      },
      "ChangeStatusRequest": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the Status to be changed. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name for the Status."
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The new description for the Status."
          }
        }
      },
      "StatusPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/StatusImpl"
            }
          }
        }
      },
      "PagedResponseStatus": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/StatusImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "NavigationStatisticsEntry": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "The id of the asset for which the statistics are calculated",
            "format": "uuid",
            "example": "6b1e48c3-0d90-42ad-a0e3-bfb6644c8cf9"
          },
          "name": {
            "type": "string",
            "description": "The name of the asset for which the statistics are calculated"
          },
          "numberOfViews": {
            "type": "integer",
            "description": "The number of times the Asset was viewed.",
            "format": "int32"
          },
          "lastViewedDate": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last time when the Asset was viewed by anyone.",
            "format": "int64",
            "example": 1475904011120
          }
        },
        "description": "Contains navigation statistics related to a specific asset."
      },
      "NavigationStatisticsEntryPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/NavigationStatisticsEntry"
            }
          }
        }
      },
      "PagedResponseNavigationStatisticsEntry": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/NavigationStatisticsEntry"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "DataQualityMetricImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "countOperation": {
            "type": "string",
            "description": "The operation that should be performed when aggregating the quality results.",
            "enum": [
              "Sum",
              "Minimum",
              "Maximum",
              "Average",
              "Median",
              "BooleanAnd",
              "BooleanOr"
            ]
          },
          "attributeType": {
            "$ref": "#/components/schemas/NamedDescribedResourceReference"
          }
        },
        "description": "The data quality metrics used in the rule, including the mandatory ones."
      },
      "DataQualityRuleImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource.",
            "example": "Sample descripion of the resource."
          },
          "categorizationRelationType": {
            "$ref": "#/components/schemas/ResourceReference"
          },
          "relationTrace": {
            "$ref": "#/components/schemas/RelationTraceImpl"
          },
          "dataQualityMetrics": {
            "type": "array",
            "description": "The data quality metrics used in the rule, including the mandatory ones.",
            "items": {
              "$ref": "#/components/schemas/DataQualityMetricImpl"
            }
          }
        }
      },
      "RelationTraceEntryImpl": {
        "type": "object",
        "properties": {
          "outBoundRoleDirection": {
            "type": "boolean",
            "description": "Whether the outbound relation is followed in role direction."
          },
          "roleDirection": {
            "type": "boolean",
            "description": "Whether the relation is followed in role direction, i.e. from source to target."
          },
          "relationTypeId": {
            "type": "string",
            "description": "The ID of the relation type.",
            "format": "uuid"
          },
          "outBoundRelationTypeId": {
            "type": "string",
            "description": "The ID of the outbound relation type.",
            "format": "uuid"
          }
        },
        "description": "The list of relation trace entries."
      },
      "RelationTraceImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "relationTraceEntries": {
            "type": "array",
            "description": "The list of relation trace entries.",
            "items": {
              "$ref": "#/components/schemas/RelationTraceEntryImpl"
            }
          }
        },
        "description": "The relation trace that describes the chain of relations which is followed when calculating the quality of an asset."
      },
      "AddDataQualityRuleRequest": {
        "required": [
          "categorizationRelationTypeId",
          "name",
          "relationTraceEntries"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new Data Quality Rule. Should be unique within all data quality rules.<br/>It should have a format of universally unique identifier (UUID) and should not start with<br/><code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the new data quality rule. Should be unique within all data quality rules."
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The description of the new data quality rule."
          },
          "categorizationRelationTypeId": {
            "type": "string",
            "description": "The ID of the categorization relation type.",
            "format": "uuid"
          },
          "dataQualityMetrics": {
            "type": "array",
            "description": "The Data Quality Metrics that should be assigned to the rule that is going to be created.",
            "items": {
              "$ref": "#/components/schemas/DataQualityMetricRequest"
            }
          },
          "relationTraceEntries": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of entries that describes relations along which the data quality result is calculated.",
            "items": {
              "$ref": "#/components/schemas/RelationTraceEntryRequest"
            }
          }
        }
      },
      "DataQualityMetricRequest": {
        "type": "object",
        "properties": {
          "countOperation": {
            "type": "string",
            "description": "The operation that should be performed when aggregating the quality results.",
            "enum": [
              "Sum",
              "Minimum",
              "Maximum",
              "Average",
              "Median",
              "BooleanAnd",
              "BooleanOr"
            ]
          },
          "attributeTypeId": {
            "type": "string",
            "description": "The ID of the attribute type that defines the value that is used as the data quality metric.",
            "format": "uuid"
          }
        },
        "description": "The list of data quality metrics."
      },
      "RelationTraceEntryRequest": {
        "required": [
          "relationTypeId"
        ],
        "type": "object",
        "properties": {
          "roleDirection": {
            "type": "boolean",
            "description": "The direction of the relation to take, true if the relation is followed in role direction (i.e. from source to target)."
          },
          "relationTypeId": {
            "type": "string",
            "description": "The ID of the relation type for the relation trace entry.",
            "format": "uuid"
          }
        },
        "description": "The list of relation trace entries that describes relations along which the data quality result is calculated."
      },
      "ChangeDataQualityRuleRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name for the data quality rule."
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The new description for the data quality rule."
          },
          "categorizationRelationTypeId": {
            "type": "string",
            "description": "The ID of the categorization relation type.",
            "format": "uuid"
          },
          "dataQualityMetrics": {
            "type": "array",
            "description": "The list of data quality metrics.",
            "items": {
              "$ref": "#/components/schemas/DataQualityMetricRequest"
            }
          },
          "relationTraceEntries": {
            "type": "array",
            "description": "The list of relation trace entries that describes relations along which the data quality result is calculated.",
            "items": {
              "$ref": "#/components/schemas/RelationTraceEntryRequest"
            }
          }
        }
      },
      "DataQualityRulePagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/DataQualityRuleImpl"
            }
          }
        }
      },
      "PagedResponseDataQualityRule": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/DataQualityRuleImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "RoleImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource.",
            "example": "Sample descripion of the resource."
          },
          "global": {
            "type": "boolean",
            "description": "Whether the role is global."
          },
          "permissionList": {
            "type": "array",
            "description": "The list of permissions this role will provide to the user. To get an up-to-date list of the permissions in the system, please refer to the enums in AddRoleRequest and ChangeRoleRequest",
            "items": {
              "type": "string",
              "description": "The list of permissions this role will provide to the user. To get an up-to-date list of the permissions in the system, please refer to the enums in AddRoleRequest and ChangeRoleRequest"
            }
          },
          "permissions": {
            "type": "array",
            "description": "The list of permissions this role will provide to the user. This will not return permissions added since 2023.02 and should no longer be used. Please use getPermissionList instead.",
            "deprecated": true,
            "items": {
              "type": "string",
              "description": "The list of permissions this role will provide to the user. This will not return permissions added since 2023.02 and should no longer be used. Please use getPermissionList instead.",
              "deprecated": true,
              "enum": [
                "EDGE",
                "EDGE_SITE_CONNECT",
                "EDGE_SITE_MANAGE",
                "EDGE_SITE_ADMINISTER",
                "EDGE_INTEGRATION_CAPABILITY_MANAGE",
                "EDGE_VIEW_CONNECTIONS_AND_CAPABILITIES",
                "EDGE_VIEW_LOGS",
                "ASSET_GRID_ADMINISTRATION",
                "ATTACHMENT_ADD",
                "ATTACHMENT_CHANGE",
                "ATTACHMENT_REMOVE",
                "COMMENT_ADD",
                "COMMENT_CHANGE",
                "COMMENT_REMOVE",
                "RATING_ADD",
                "RATING_CHANGE",
                "RATING_REMOVE",
                "COMMUNITY_ADD",
                "COMMUNITY_CHANGE",
                "COMMUNITY_REMOVE",
                "COMMUNITY_CONFIGURE_EXTERNAL_SYSTEM",
                "COMMUNITY_RESPONSIBILITY_ADD",
                "COMMUNITY_RESPONSIBILITY_CHANGE",
                "COMMUNITY_RESPONSIBILITY_REMOVE",
                "DOMAIN_ADD",
                "DOMAIN_CHANGE",
                "DOMAIN_REMOVE",
                "DOMAIN_RESPONSIBILITY_ADD",
                "DOMAIN_RESPONSIBILITY_CHANGE",
                "DOMAIN_RESPONSIBILITY_REMOVE",
                "WORKFLOW_MANAGE",
                "WORKFLOW_DESIGNER_ACCESS",
                "ASSET_ADD",
                "ASSET_CHANGE",
                "ASSET_REMOVE",
                "ASSET_STATUS_CHANGE",
                "ASSET_TYPE_CHANGE",
                "ASSET_TAG_CHANGE",
                "ASSET_ATTRIBUTE_ADD",
                "ASSET_ATTRIBUTE_CHANGE",
                "ASSET_ATTRIBUTE_REMOVE",
                "ASSET_RESPONSIBILITY_ADD",
                "ASSET_RESPONSIBILITY_CHANGE",
                "ASSET_RESPONSIBILITY_REMOVE",
                "VIEW_PERMISSIONS_CHANGE",
                "BUSINESS_SEMANTICS_GLOSSARY",
                "REFERENCE_DATA_MANAGER",
                "DATA_STEWARDSHIP_MANAGER",
                "SYSTEM_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "WORKFLOW_ADMINISTRATION",
                "DATA_HELPDESK",
                "POLICY_MANAGER",
                "DATA_DICTIONARY",
                "CATALOG",
                "WORKFLOW_MANAGE_ALL",
                "WORKFLOW_MESSAGE_EVENTS_USE",
                "VIEW_PERMISSIONS_VIEW_ALL",
                "VIEW_MANAGE",
                "VIEW_SHARE",
                "VIEW_MANAGE_ALL",
                "ADVANCED_DATA_TYPE_ADD",
                "ADVANCED_DATA_TYPE_EDIT",
                "ADVANCED_DATA_TYPE_REMOVE",
                "TAGS_VIEW",
                "TAGS_MANAGE",
                "VALIDATION_EXECUTION",
                "ACCESS_DATA",
                "VIEW_SAMPLES",
                "RELATION_TYPE_ADD",
                "RELATION_TYPE_REMOVE",
                "RELATION_TYPE_CHANGE",
                "REGISTER_PROFILING_INFORMATION",
                "REPORTING_DOWNLOAD_INSIGHTS_DATA",
                "REPORTING_VIEW_INSIGHTS_REPORTS",
                "INSIGHTS_VIEW",
                "INSIGHTS_SUMMARY",
                "TECHNICAL_LINEAGE",
                "LOGS_VIEW",
                "RESOURCE_MANAGE_ALL",
                "CONFIGURATION_VIEW",
                "CONFIGURATION_EDIT",
                "BACKSTORE_VIEW",
                "BACKSTORE_EDIT",
                "ASSESSMENTS",
                "METADATA_LAKE",
                "PROTECT",
                "PROTECT_EDIT",
                "PROTECT_ADMINISTRATION",
                "PRIVACY"
              ]
            }
          }
        },
        "description": "Represents a role.<p>A role is a grouping of rights and responsibilities (permissions) that is assigned to individual users or user groups.<p>Collibra DGC distinguishes between global roles and resource roles."
      },
      "AddRoleRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the new role. Should be unique within all roles<br/><p><br/>It should have a format of universally unique identifier (UUID) and should not start<br/>with <code>00000000-0000-0000-</code> which is a reserved prefix.",
            "format": "uuid"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the new role. Should be unique within all roles."
          },
          "global": {
            "type": "boolean",
            "description": "Whether the role should be a global or resource role."
          },
          "description": {
            "type": "string",
            "description": "The description of the role."
          },
          "permissions": {
            "type": "array",
            "description": "The permissions to be granted for this role.",
            "items": {
              "type": "string",
              "description": "The permissions to be granted for this role.",
              "enum": [
                "EDGE",
                "EDGE_SITE_CONNECT",
                "EDGE_SITE_MANAGE",
                "EDGE_SITE_ADMINISTER",
                "EDGE_INTEGRATION_CAPABILITY_MANAGE",
                "EDGE_VIEW_CONNECTIONS_AND_CAPABILITIES",
                "EDGE_VIEW_LOGS",
                "ASSET_GRID_ADMINISTRATION",
                "ATTACHMENT_ADD",
                "ATTACHMENT_CHANGE",
                "ATTACHMENT_REMOVE",
                "COMMENT_ADD",
                "COMMENT_CHANGE",
                "COMMENT_REMOVE",
                "RATING_ADD",
                "RATING_CHANGE",
                "RATING_REMOVE",
                "RESOURCE_EXPORT",
                "RESOURCE_IMPORT",
                "COMMUNITY_ADD",
                "COMMUNITY_CHANGE",
                "COMMUNITY_REMOVE",
                "COMMUNITY_CONFIGURE_EXTERNAL_SYSTEM",
                "COMMUNITY_RESPONSIBILITY_ADD",
                "COMMUNITY_RESPONSIBILITY_CHANGE",
                "COMMUNITY_RESPONSIBILITY_REMOVE",
                "DOMAIN_ADD",
                "DOMAIN_CHANGE",
                "DOMAIN_REMOVE",
                "DOMAIN_RESPONSIBILITY_ADD",
                "DOMAIN_RESPONSIBILITY_CHANGE",
                "DOMAIN_RESPONSIBILITY_REMOVE",
                "WORKFLOW_MANAGE",
                "WORKFLOW_DESIGNER_ACCESS",
                "ASSET_ADD",
                "ASSET_CHANGE",
                "ASSET_REMOVE",
                "ASSET_STATUS_CHANGE",
                "ASSET_TYPE_CHANGE",
                "ASSET_TAG_CHANGE",
                "ASSET_ATTRIBUTE_ADD",
                "ASSET_ATTRIBUTE_CHANGE",
                "ASSET_ATTRIBUTE_REMOVE",
                "ASSET_RESPONSIBILITY_ADD",
                "ASSET_RESPONSIBILITY_CHANGE",
                "ASSET_RESPONSIBILITY_REMOVE",
                "VIEW_PERMISSIONS_CHANGE",
                "BUSINESS_SEMANTICS_GLOSSARY",
                "REFERENCE_DATA_MANAGER",
                "DATA_STEWARDSHIP_MANAGER",
                "SYSTEM_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "WORKFLOW_ADMINISTRATION",
                "DATA_HELPDESK",
                "POLICY_MANAGER",
                "DATA_DICTIONARY",
                "CATALOG",
                "WORKFLOW_MANAGE_ALL",
                "WORKFLOW_MESSAGE_EVENTS_USE",
                "VIEW_PERMISSIONS_VIEW_ALL",
                "VIEW_MANAGE",
                "VIEW_SHARE",
                "VIEW_MANAGE_ALL",
                "DATA_CLASSES_READ",
                "DATA_CLASSES_ADD",
                "DATA_CLASSES_EDIT",
                "DATA_CLASSES_REMOVE",
                "DATA_CLASSES_LIST_VALUES",
                "ADVANCED_DATA_TYPE_ADD",
                "ADVANCED_DATA_TYPE_EDIT",
                "ADVANCED_DATA_TYPE_REMOVE",
                "TAGS_VIEW",
                "TAGS_MANAGE",
                "VALIDATION_EXECUTION",
                "ACCESS_DATA",
                "VIEW_SAMPLES",
                "RELATION_TYPE_ADD",
                "RELATION_TYPE_REMOVE",
                "RELATION_TYPE_CHANGE",
                "REGISTER_PROFILING_INFORMATION",
                "REPORTING_DOWNLOAD_INSIGHTS_DATA",
                "REPORTING_VIEW_INSIGHTS_REPORTS",
                "INSIGHTS_VIEW",
                "INSIGHTS_SUMMARY",
                "TECHNICAL_LINEAGE",
                "LOGS_VIEW",
                "RESOURCE_MANAGE_ALL",
                "CONFIGURATION_VIEW",
                "CONFIGURATION_EDIT",
                "BACKSTORE_VIEW",
                "BACKSTORE_EDIT",
                "ASSESSMENTS",
                "ASSESSMENTS_ADMINISTRATION",
                "ASSESSMENTS_CONDUCT_ASSESSMENTS",
                "ASSESSMENTS_MANAGE_TEMPLATES",
                "METADATA_LAKE",
                "PROTECT",
                "PROTECT_EDIT",
                "PROTECT_ADMINISTRATION",
                "AI_GOVERNANCE",
                "PRIVACY",
                "DATA_MARKETPLACE",
                "CLASSIFY",
                "WORKFLOW_START",
                "WORKFLOW_PARTICIPATION",
                "DATA_NOTEBOOK",
                "DATA_NOTEBOOK_MANAGE_DATA_SOURCES",
                "DATA_NOTEBOOK_MANAGE_SETTINGS",
                "DATA_NOTEBOOK_MANAGE_ALL_NOTEBOOKS",
                "VIEW_NOTEBOOK",
                "GUIDED_STEWARDSHIP",
                "DATA_QUALITY"
              ]
            }
          }
        }
      },
      "ChangeRoleRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The new name for the role. Should be unique within all roles."
          },
          "description": {
            "type": "string",
            "description": "The new description for the role."
          },
          "permissions": {
            "type": "array",
            "description": "The new permissions to be set. If null, no changes are made, otherwise the current permissions are<br/>replaced with the given ones.",
            "items": {
              "type": "string",
              "description": "The new permissions to be set. If null, no changes are made, otherwise the current permissions are<br/>replaced with the given ones.",
              "enum": [
                "EDGE",
                "EDGE_SITE_CONNECT",
                "EDGE_SITE_MANAGE",
                "EDGE_SITE_ADMINISTER",
                "EDGE_INTEGRATION_CAPABILITY_MANAGE",
                "EDGE_VIEW_CONNECTIONS_AND_CAPABILITIES",
                "EDGE_VIEW_LOGS",
                "ASSET_GRID_ADMINISTRATION",
                "ATTACHMENT_ADD",
                "ATTACHMENT_CHANGE",
                "ATTACHMENT_REMOVE",
                "COMMENT_ADD",
                "COMMENT_CHANGE",
                "COMMENT_REMOVE",
                "RATING_ADD",
                "RATING_CHANGE",
                "RATING_REMOVE",
                "RESOURCE_EXPORT",
                "RESOURCE_IMPORT",
                "COMMUNITY_ADD",
                "COMMUNITY_CHANGE",
                "COMMUNITY_REMOVE",
                "COMMUNITY_CONFIGURE_EXTERNAL_SYSTEM",
                "COMMUNITY_RESPONSIBILITY_ADD",
                "COMMUNITY_RESPONSIBILITY_CHANGE",
                "COMMUNITY_RESPONSIBILITY_REMOVE",
                "DOMAIN_ADD",
                "DOMAIN_CHANGE",
                "DOMAIN_REMOVE",
                "DOMAIN_RESPONSIBILITY_ADD",
                "DOMAIN_RESPONSIBILITY_CHANGE",
                "DOMAIN_RESPONSIBILITY_REMOVE",
                "WORKFLOW_MANAGE",
                "WORKFLOW_DESIGNER_ACCESS",
                "ASSET_ADD",
                "ASSET_CHANGE",
                "ASSET_REMOVE",
                "ASSET_STATUS_CHANGE",
                "ASSET_TYPE_CHANGE",
                "ASSET_TAG_CHANGE",
                "ASSET_ATTRIBUTE_ADD",
                "ASSET_ATTRIBUTE_CHANGE",
                "ASSET_ATTRIBUTE_REMOVE",
                "ASSET_RESPONSIBILITY_ADD",
                "ASSET_RESPONSIBILITY_CHANGE",
                "ASSET_RESPONSIBILITY_REMOVE",
                "VIEW_PERMISSIONS_CHANGE",
                "BUSINESS_SEMANTICS_GLOSSARY",
                "REFERENCE_DATA_MANAGER",
                "DATA_STEWARDSHIP_MANAGER",
                "SYSTEM_ADMINISTRATION",
                "USER_ADMINISTRATION",
                "WORKFLOW_ADMINISTRATION",
                "DATA_HELPDESK",
                "POLICY_MANAGER",
                "DATA_DICTIONARY",
                "CATALOG",
                "WORKFLOW_MANAGE_ALL",
                "WORKFLOW_MESSAGE_EVENTS_USE",
                "VIEW_PERMISSIONS_VIEW_ALL",
                "VIEW_MANAGE",
                "VIEW_SHARE",
                "VIEW_MANAGE_ALL",
                "DATA_CLASSES_READ",
                "DATA_CLASSES_ADD",
                "DATA_CLASSES_EDIT",
                "DATA_CLASSES_REMOVE",
                "DATA_CLASSES_LIST_VALUES",
                "ADVANCED_DATA_TYPE_ADD",
                "ADVANCED_DATA_TYPE_EDIT",
                "ADVANCED_DATA_TYPE_REMOVE",
                "TAGS_VIEW",
                "TAGS_MANAGE",
                "VALIDATION_EXECUTION",
                "ACCESS_DATA",
                "VIEW_SAMPLES",
                "RELATION_TYPE_ADD",
                "RELATION_TYPE_REMOVE",
                "RELATION_TYPE_CHANGE",
                "REGISTER_PROFILING_INFORMATION",
                "REPORTING_DOWNLOAD_INSIGHTS_DATA",
                "REPORTING_VIEW_INSIGHTS_REPORTS",
                "INSIGHTS_VIEW",
                "INSIGHTS_SUMMARY",
                "TECHNICAL_LINEAGE",
                "LOGS_VIEW",
                "RESOURCE_MANAGE_ALL",
                "CONFIGURATION_VIEW",
                "CONFIGURATION_EDIT",
                "BACKSTORE_VIEW",
                "BACKSTORE_EDIT",
                "ASSESSMENTS",
                "ASSESSMENTS_ADMINISTRATION",
                "ASSESSMENTS_CONDUCT_ASSESSMENTS",
                "ASSESSMENTS_MANAGE_TEMPLATES",
                "METADATA_LAKE",
                "PROTECT",
                "PROTECT_EDIT",
                "PROTECT_ADMINISTRATION",
                "AI_GOVERNANCE",
                "PRIVACY",
                "DATA_MARKETPLACE",
                "CLASSIFY",
                "WORKFLOW_START",
                "WORKFLOW_PARTICIPATION",
                "DATA_NOTEBOOK",
                "DATA_NOTEBOOK_MANAGE_DATA_SOURCES",
                "DATA_NOTEBOOK_MANAGE_SETTINGS",
                "DATA_NOTEBOOK_MANAGE_ALL_NOTEBOOKS",
                "VIEW_NOTEBOOK",
                "GUIDED_STEWARDSHIP",
                "DATA_QUALITY"
              ]
            }
          }
        }
      },
      "PagedResponseRole": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/RoleImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "DGCSession": {
        "type": "object",
        "properties": {
          "csrfToken": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "AddUserRequest": {
        "required": [
          "emailAddress",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The username, which should be unique"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the new user"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the new user"
          },
          "emailAddress": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The e-mail address of the new user"
          },
          "gender": {
            "type": "string",
            "description": "The gender of the user",
            "enum": [
              "MALE",
              "FEMALE",
              "UNKNOWN"
            ]
          },
          "language": {
            "type": "string",
            "description": "The language for the user"
          },
          "userGroupIds": {
            "type": "array",
            "description": "The groups this newly created user should be added to",
            "items": {
              "type": "string",
              "description": "The groups this newly created user should be added to",
              "format": "uuid"
            }
          },
          "licenseType": {
            "type": "string",
            "description": "The license type of the user.\nThis represents the given license which is no longer used.",
            "deprecated": true,
            "enum": [
              "CONSUMER",
              "AUTHOR"
            ]
          },
          "addresses": {
            "type": "array",
            "description": "The postal addresses of the user",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "phones": {
            "type": "array",
            "description": "The phone numbers of the user",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "additionalEmailAddresses": {
            "type": "array",
            "description": "The additional e-mail addresses of the user",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "instantMessagingAccounts": {
            "type": "array",
            "description": "The instant messaging accounts of the user",
            "items": {
              "$ref": "#/components/schemas/InstantMessagingAccount"
            }
          },
          "websites": {
            "type": "array",
            "description": "The websites of the user",
            "items": {
              "$ref": "#/components/schemas/Website"
            }
          }
        }
      },
      "UserGroupImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "locallyManaged": {
            "type": "boolean"
          }
        }
      },
      "AddUserToUserGroupsRequest": {
        "required": [
          "userGroupIds",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The ID of the user who should be assigned to user groups.  Silently ignored if the ID is provided as path parameter of the request",
            "format": "uuid"
          },
          "userGroupIds": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of IDs of the user groups which the user should be assigned to",
            "items": {
              "type": "string",
              "description": "The list of IDs of the user groups which the user should be assigned to",
              "format": "uuid"
            }
          }
        }
      },
      "ChangeUserRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "The new enabled flag for the user"
          },
          "username": {
            "type": "string",
            "description": "The new username for the user"
          },
          "firstName": {
            "type": "string",
            "description": "The new first name for the user"
          },
          "lastName": {
            "type": "string",
            "description": "The new last name for the user"
          },
          "email": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "The new e-mail address for the user"
          },
          "gender": {
            "type": "string",
            "description": "The new gender for the user",
            "enum": [
              "MALE",
              "FEMALE",
              "UNKNOWN"
            ]
          },
          "language": {
            "type": "string",
            "description": "The new language for the user"
          },
          "licenseType": {
            "type": "string",
            "description": "The license type of the user.\nThis represents the given license which is no longer used.",
            "deprecated": true,
            "enum": [
              "CONSUMER",
              "AUTHOR"
            ]
          },
          "addresses": {
            "type": "array",
            "description": "The postal addresses of the user",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "phones": {
            "type": "array",
            "description": "The phone numbers of the user",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "additionalEmailAddresses": {
            "type": "array",
            "description": "The additional e-mail addresses of the user",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "instantMessagingAccounts": {
            "type": "array",
            "description": "The instant messaging accounts of the user",
            "items": {
              "$ref": "#/components/schemas/InstantMessagingAccount"
            }
          },
          "websites": {
            "type": "array",
            "description": "The websites of the user",
            "items": {
              "$ref": "#/components/schemas/Website"
            }
          },
          "passwordConfirmation": {
            "type": "string",
            "description": "The password confirmation for the user when changing their own email."
          }
        }
      },
      "ChangeUserAvatarRequest": {
        "required": [
          "fileId"
        ],
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "The ID of the file representing to avatar that should be assigned to the user.",
            "format": "uuid"
          }
        }
      },
      "UserPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "PagedResponseUser": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "UserPermissions": {
        "type": "object",
        "properties": {
          "globalPermissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RemoveUserFromUserGroupsRequest": {
        "required": [
          "userGroupIds",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The ID of the user who should be removed from user groups.  Silently ignored if the ID is provided as path parameter of the request",
            "format": "uuid"
          },
          "userGroupIds": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of IDs of the user groups which the user should be removed from",
            "items": {
              "type": "string",
              "description": "The list of IDs of the user groups which the user should be removed from",
              "format": "uuid"
            }
          }
        }
      },
      "SetUserGroupsForUserRequest": {
        "required": [
          "userGroupIds"
        ],
        "type": "object",
        "properties": {
          "userGroupIds": {
            "type": "array",
            "description": "The list of IDs of the user groups which the user should be assigned to. This is a required parameter.",
            "items": {
              "type": "string",
              "description": "The list of IDs of the user groups which the user should be assigned to. This is a required parameter.",
              "format": "uuid"
            }
          }
        }
      },
      "AddUserGroupRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the user group. Should be unique within all user groups."
          },
          "locallyManaged": {
            "type": "boolean",
            "description": "The locallyManaged flag of the user group. Indicates whether this UserGroup is locally managed or not.",
            "deprecated": true
          }
        }
      },
      "AddUsersToUserGroupRequest": {
        "required": [
          "userGroupId",
          "userIds"
        ],
        "type": "object",
        "properties": {
          "userGroupId": {
            "type": "string",
            "description": "The ID of the user group the users should be added to. Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "userIds": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of IDs of the users that should be added to the user group.",
            "items": {
              "type": "string",
              "description": "The list of IDs of the users that should be added to the user group.",
              "format": "uuid"
            }
          }
        }
      },
      "ChangeUserGroupRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "The name of the user group. Should be unique within all user groups."
          },
          "locallyManaged": {
            "type": "boolean",
            "description": "The locallyManaged flag of the user group. Indicates whether this UserGroup is locally managed or not.",
            "deprecated": true
          }
        }
      },
      "UserGroupPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/UserGroupImpl"
            }
          }
        }
      },
      "PagedResponseUserGroup": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/UserGroupImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "RemoveUsersFromUserGroupRequest": {
        "required": [
          "userGroupId",
          "userIds"
        ],
        "type": "object",
        "properties": {
          "userGroupId": {
            "type": "string",
            "description": "The ID of the user groups from which the users should be removed.<br/>Silently ignored if the ID is provided as path parameter of the request.",
            "format": "uuid"
          },
          "userIds": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of IDs of the users which should be removed from the user group.",
            "items": {
              "type": "string",
              "description": "The list of IDs of the users which should be removed from the user group.",
              "format": "uuid"
            }
          }
        }
      },
      "ValidationResultImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "asset": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "validationRule": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "result": {
            "type": "boolean",
            "description": "The validation result (true, false or null if there was an error."
          },
          "message": {
            "type": "string",
            "description": "The error message (if any). Can be a translatable key."
          },
          "jobId": {
            "type": "string",
            "description": "ID of the job that performed the validation.",
            "format": "uuid"
          }
        }
      },
      "ValidationResultPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/ValidationResultImpl"
            }
          }
        }
      },
      "PagedResponseValidationResult": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/ValidationResultImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "ValidateInJobRequest": {
        "type": "object",
        "properties": {
          "assetIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "sendNotification": {
            "type": "boolean"
          }
        }
      },
      "ViewPermissionImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "userId": {
            "type": "string",
            "description": "ID of the user that is the owner of this ViewPermission, if the owner is a user",
            "format": "uuid"
          },
          "userGroupId": {
            "type": "string",
            "description": "ID of the UserGroup that is the owner of this ViewPermission, if the owner is a group",
            "format": "uuid"
          },
          "baseResource": {
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "AddViewPermissionRequest": {
        "required": [
          "baseResource"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The userId of the person who should receive the view permission. Either this or the userGroupId is required.",
            "format": "uuid"
          },
          "userGroupId": {
            "type": "string",
            "description": "The userGroupId of the group that should receive the view permission.  Either this or the userId is required.",
            "format": "uuid"
          },
          "baseResource": {
            "$ref": "#/components/schemas/ResourceReference"
          }
        }
      },
      "PagedResponseViewPermission": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/ViewPermissionImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "AssetAssignmentRuleImpl": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "assetType": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "domain": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "community": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          },
          "status": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          }
        },
        "description": "An assignment rule for workflow definitions which apply to assets. Is used to limit the scope of assets to which given workflow definition applies to."
      },
      "AddAssetTypeAssignmentRuleRequest": {
        "required": [
          "assetTypeId"
        ],
        "type": "object",
        "properties": {
          "assetTypeId": {
            "type": "string",
            "description": "The ID of the asset type the added rule should refer to.",
            "format": "uuid"
          },
          "domainId": {
            "type": "string",
            "description": "The ID of the domain the assignment rule should apply for.",
            "format": "uuid"
          },
          "communityId": {
            "type": "string",
            "description": "The ID of the community the assignment rule should apply for.",
            "format": "uuid"
          },
          "statusId": {
            "type": "string",
            "description": "The ID of the status the assignment rule should apply for.",
            "format": "uuid"
          }
        },
        "description": "The request describing assignment rule to be added."
      },
      "AddDomainTypeAssignmentRuleRequest": {
        "required": [
          "domainTypeId"
        ],
        "type": "object",
        "properties": {
          "domainTypeId": {
            "type": "string",
            "description": "The ID of the domain type the added rule should refer to.",
            "format": "uuid"
          },
          "communityId": {
            "type": "string",
            "description": "The ID of the community the assignment rule should apply for.",
            "format": "uuid"
          }
        },
        "description": "The request describing assignment rule to be added."
      },
      "ChangeAssetTypeAssignmentRuleRequest": {
        "required": [
          "assetTypeId"
        ],
        "type": "object",
        "properties": {
          "assetTypeId": {
            "type": "string",
            "description": "The ID of the asset type the changed rule should refer to.",
            "format": "uuid"
          },
          "domainId": {
            "type": "string",
            "description": "The ID of the domain the assignment rule should apply for.",
            "format": "uuid"
          },
          "communityId": {
            "type": "string",
            "description": "The ID of the community the assignment rule should apply for.",
            "format": "uuid"
          },
          "statusId": {
            "type": "string",
            "description": "The ID of the (Asset Type) status the assignment rule should apply for.",
            "format": "uuid"
          }
        },
        "description": "Parameters for the assignment rule to be changed."
      },
      "ChangeDomainTypeAssignmentRuleRequest": {
        "required": [
          "domainTypeId"
        ],
        "type": "object",
        "properties": {
          "domainTypeId": {
            "type": "string",
            "description": "The ID of the domain type the changed rule should refer to.",
            "format": "uuid"
          },
          "communityId": {
            "type": "string",
            "description": "The ID of the community the assignment rule should apply for.",
            "format": "uuid"
          }
        },
        "description": "Parameters for the assignment rule to be changed."
      },
      "WorkflowDefinitionImpl": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the resource.",
            "example": "Test name"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource.",
            "example": "Sample descripion of the resource."
          },
          "processId": {
            "type": "string",
            "description": "The <code>id</code> that uniquely identifies a workflow definition in the application.<p>It is present in the BPMN notation in the ID property of the '<process..' tag. Deploying a BPMN in DGC creates a new version if a process with the same ID already exists."
          },
          "startLabel": {
            "type": "string",
            "description": "The label used for starting this workflow."
          },
          "formRequired": {
            "type": "boolean",
            "description": "Whether the start event for this workflow requires user interaction through a form or not."
          },
          "startFormKeyAvailable": {
            "type": "boolean",
            "description": "This field will be removed in the future. Please, use 'startFormJsonModelAvailable' to recognize if start form model is available.",
            "deprecated": true
          },
          "startFormJsonModelAvailable": {
            "type": "boolean",
            "description": "Whether the workflow has the start form json model available or not. If true, then the external form definition for this task is needed to render the task."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether workflow is enabled or not.<p>A workflow has to be enabled for a user to be able to start a workflow. A workflow is enabled if it's status is put on the status 'enabled'"
          },
          "domainAssignmentRules": {
            "type": "array",
            "description": "The list of domain assignment rules.",
            "items": {
              "$ref": "#/components/schemas/AssetAssignmentRuleImpl"
            }
          },
          "assetAssignmentRules": {
            "type": "array",
            "description": "The list of asset assignment rules.",
            "items": {
              "$ref": "#/components/schemas/AssetAssignmentRuleImpl"
            }
          },
          "businessItemResourceType": {
            "type": "string",
            "description": "The type of business item that the workflow can refer to. This could be either Community, Domain, Asset, or global.",
            "enum": [
              "ASSET",
              "DOMAIN",
              "COMMUNITY",
              "GLOBAL"
            ]
          },
          "exclusivity": {
            "type": "string",
            "description": "The exclusivity of this workflow. This determines how many times a workflow can be started for a specific resource.",
            "enum": [
              "RESOURCE_EXCLUSIVITY",
              "DEFINITION_EXCLUSIVITY",
              "UNCONSTRAINED"
            ]
          },
          "guestUserAccessible": {
            "type": "boolean",
            "description": "Whether this workflow definition is guest user accessible."
          },
          "registeredUserAccessible": {
            "type": "boolean",
            "description": "Whether the workflow definition is accessible by any registered user."
          },
          "candidateUserCheckEnabled": {
            "type": "boolean",
            "description": "Whether the candidate user check for this workflow is enabled."
          },
          "globalCreate": {
            "type": "boolean",
            "description": "Whether the workflow is accessible from the global create menu."
          },
          "startEvents": {
            "type": "array",
            "description": "The start events in a list of WorkflowStartEventType enums.",
            "items": {
              "type": "string",
              "description": "The start events in a list of WorkflowStartEventType enums.",
              "enum": [
                "ASSET_ADDED",
                "ASSET_REMOVED",
                "ASSET_STATUS_CHANGED",
                "ASSET_DOMAIN_CHANGED",
                "ASSET_TYPE_CHANGED",
                "ASSET_ATTRIBUTE_CHANGED",
                "ASSET_NAME_CHANGED",
                "ASSET_DISPLAY_NAME_CHANGED",
                "ASSET_ATTRIBUTE_ADDED",
                "ASSET_ATTRIBUTE_REMOVED",
                "DOMAIN_ADDED",
                "DOMAIN_REMOVED",
                "ROLE_GRANTED",
                "ROLE_REVOKED",
                "WORKFLOW_STARTED",
                "WORKFLOW_CANCELED",
                "WORKLFLOW_ESCALATION",
                "WORKFLOW_TASK_COMPLETED",
                "USER_ADDED",
                "USER_REMOVED",
                "USER_DISABLED",
                "COMMENT_ADDED",
                "COMMENT_REMOVED",
                "COMMENT_CHANGED",
                "RELATION_ADDED_AND_ASSET_IS_SOURCE",
                "RELATION_REMOVED_AND_ASSET_WAS_SOURCE",
                "RELATION_ADDED_AND_ASSET_IS_TARGET",
                "RELATION_REMOVED_AND_ASSET_WAS_TARGET",
                "TAG_ASSIGN_CHANGED",
                "CLASSIFICATION_MATCH_ACCEPTED",
                "CLASSIFICATION_MATCH_REJECTED",
                "CLASSIFICATION_MATCH_ADDED",
                "CLASSIFICATION_MATCH_REMOVED",
                "CLASSIFICATION_MATCH_UPDATED",
                "DATABASE_REGISTRATION_COMPLETED",
                "DATABASE_REGISTRATION_FAILED"
              ]
            }
          },
          "configurationVariables": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "The map of configuration variable key-value pairs."
            },
            "description": "The map of configuration variable key-value pairs."
          },
          "startRoles": {
            "type": "array",
            "description": "The roles allowed to start the process.",
            "items": {
              "$ref": "#/components/schemas/RoleImpl"
            }
          },
          "stopRoles": {
            "type": "array",
            "description": "The roles allowed to stop processes/tasks.",
            "items": {
              "$ref": "#/components/schemas/RoleImpl"
            }
          },
          "reassignRoles": {
            "type": "array",
            "description": "The roles allowed to reassign tasks.",
            "items": {
              "$ref": "#/components/schemas/RoleImpl"
            }
          }
        },
        "description": "Definition of a workflow. It contains the workflow logic, code, configuration and is usually represented by a diagram or a .bpmn file."
      },
      "ChangeWorkflowDefinitionRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 2000,
            "minLength": 1,
            "type": "string",
            "description": "The name of the workflow definition."
          },
          "description": {
            "type": "string",
            "description": "The new description for the workflow definition."
          },
          "configurationVariables": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "The configuration variables."
            },
            "description": "The configuration variables."
          },
          "startEvents": {
            "type": "array",
            "description": "The list of workflow start event types.",
            "items": {
              "type": "string",
              "description": "The list of workflow start event types.",
              "enum": [
                "ASSET_ADDED",
                "ASSET_REMOVED",
                "ASSET_STATUS_CHANGED",
                "ASSET_DOMAIN_CHANGED",
                "ASSET_TYPE_CHANGED",
                "ASSET_ATTRIBUTE_CHANGED",
                "ASSET_NAME_CHANGED",
                "ASSET_DISPLAY_NAME_CHANGED",
                "ASSET_ATTRIBUTE_ADDED",
                "ASSET_ATTRIBUTE_REMOVED",
                "DOMAIN_ADDED",
                "DOMAIN_REMOVED",
                "ROLE_GRANTED",
                "ROLE_REVOKED",
                "WORKFLOW_STARTED",
                "WORKFLOW_CANCELED",
                "WORKLFLOW_ESCALATION",
                "WORKFLOW_TASK_COMPLETED",
                "USER_ADDED",
                "USER_REMOVED",
                "USER_DISABLED",
                "COMMENT_ADDED",
                "COMMENT_REMOVED",
                "COMMENT_CHANGED",
                "RELATION_ADDED_AND_ASSET_IS_SOURCE",
                "RELATION_REMOVED_AND_ASSET_WAS_SOURCE",
                "RELATION_ADDED_AND_ASSET_IS_TARGET",
                "RELATION_REMOVED_AND_ASSET_WAS_TARGET",
                "TAG_ASSIGN_CHANGED",
                "CLASSIFICATION_MATCH_ACCEPTED",
                "CLASSIFICATION_MATCH_REJECTED",
                "CLASSIFICATION_MATCH_ADDED",
                "CLASSIFICATION_MATCH_REMOVED",
                "CLASSIFICATION_MATCH_UPDATED",
                "DATABASE_REGISTRATION_COMPLETED",
                "DATABASE_REGISTRATION_FAILED"
              ]
            }
          },
          "businessItemResourceType": {
            "type": "string",
            "description": "The type of the business item corresponding to the workflow.",
            "enum": [
              "ASSET",
              "DOMAIN",
              "COMMUNITY",
              "GLOBAL"
            ]
          },
          "exclusivity": {
            "type": "string",
            "description": "Defines the number of times a resource workflow is able to be start.",
            "enum": [
              "RESOURCE_EXCLUSIVITY",
              "DEFINITION_EXCLUSIVITY",
              "UNCONSTRAINED"
            ]
          },
          "guestUserAccessible": {
            "type": "boolean"
          },
          "registeredUserAccessible": {
            "type": "boolean",
            "description": "Whether the workflow should be accessible by the registered user."
          },
          "candidateUserCheckDisabled": {
            "type": "boolean",
            "description": "Whether the candidate user check for the workflow should be disabled."
          },
          "candidateUserCheckEnabled": {
            "type": "boolean",
            "description": "Whether the candidate user check for the workflow should be enabled."
          },
          "globalCreate": {
            "type": "boolean",
            "description": "Whether the workflow is accessible from the global create menu."
          },
          "enable": {
            "type": "boolean",
            "description": "Whether the workflow definition should be enabled."
          },
          "startLabel": {
            "type": "string",
            "description": "The start label of the workflow."
          },
          "startRoleIds": {
            "type": "array",
            "description": "The list of IDs identifying the roles allowing to start the workflow.",
            "items": {
              "type": "string",
              "description": "The list of IDs identifying the roles allowing to start the workflow.",
              "format": "uuid"
            }
          },
          "stopRoleIds": {
            "type": "array",
            "description": "The list of IDs identifying the roles allowing to stop the workflow.",
            "items": {
              "type": "string",
              "description": "The list of IDs identifying the roles allowing to stop the workflow.",
              "format": "uuid"
            }
          },
          "reassignRoleIds": {
            "type": "array",
            "description": "The list of IDs identifying the roles allowing to reassign the workflow.",
            "items": {
              "type": "string",
              "description": "The list of IDs identifying the roles allowing to reassign the workflow.",
              "format": "uuid"
            }
          }
        },
        "description": "Parameters for the workflow definition to be changed."
      },
      "WorkflowDefinitionPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/WorkflowDefinitionImpl"
            }
          }
        }
      },
      "PagedResponseWorkflowDefinition": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/WorkflowDefinitionImpl"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "DropdownValue": {
        "type": "object",
        "properties": {
          "idAsString": {
            "type": "string",
            "description": "Returns the id of the dropdown value."
          },
          "parents": {
            "type": "array",
            "description": "The list of parents.",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "The id of the dropdown value if it is possible to convert it to UUID.",
            "format": "uuid"
          },
          "text": {
            "type": "string",
            "description": "The text."
          }
        },
        "description": "Represents a dropdown value."
      },
      "FormProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the property."
          },
          "name": {
            "type": "string",
            "description": "The name of the property."
          },
          "type": {
            "type": "string",
            "description": "The property type."
          },
          "value": {
            "type": "string",
            "description": "The property (default) value."
          },
          "writable": {
            "type": "boolean",
            "description": "Whether the property is writable."
          },
          "required": {
            "type": "boolean",
            "description": "Whether the property is required."
          },
          "enumValues": {
            "type": "array",
            "description": "The property's enum values.",
            "items": {
              "$ref": "#/components/schemas/DropdownValue"
            }
          },
          "checkButtons": {
            "type": "array",
            "description": "The property's checkbox buttons.",
            "items": {
              "$ref": "#/components/schemas/OptionValue"
            }
          },
          "radioButtons": {
            "type": "array",
            "description": "The property's radio buttons.",
            "items": {
              "$ref": "#/components/schemas/OptionValue"
            }
          },
          "defaultDropdownValues": {
            "type": "array",
            "description": "The property's default dropdown values.",
            "items": {
              "$ref": "#/components/schemas/DropdownValue"
            }
          },
          "proposedDropdownValues": {
            "type": "array",
            "description": "The property's proposed dropdown values.",
            "items": {
              "$ref": "#/components/schemas/DropdownValue"
            }
          },
          "dateTimeType": {
            "type": "string",
            "description": "The datetime type in case the property is of type datetime."
          },
          "multiValue": {
            "type": "boolean",
            "description": "Whether the property allows multiple values."
          },
          "proposedFixed": {
            "type": "boolean",
            "description": "Whether the property's proposed values are the only set of allowed values to select."
          },
          "defaultFromResource": {
            "type": "boolean",
            "description": "Whether the property's default value is the current resource."
          },
          "multiDefaultDropdownValues": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "The multi default dropdown values.",
              "items": {
                "$ref": "#/components/schemas/DropdownValue"
              }
            },
            "description": "The multi default dropdown values."
          },
          "multiProposedDropdownValues": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "The multi proposed dropdown values.",
              "items": {
                "$ref": "#/components/schemas/DropdownValue"
              }
            },
            "description": "The multi proposed dropdown values."
          },
          "assetType": {
            "$ref": "#/components/schemas/ResourceReference"
          },
          "assetTypeIds": {
            "type": "array",
            "description": "The asset type ids.",
            "items": {
              "type": "string",
              "description": "The asset type ids.",
              "format": "uuid"
            }
          },
          "communityIds": {
            "type": "array",
            "description": "Community ids.",
            "items": {
              "type": "string",
              "description": "Community ids.",
              "format": "uuid"
            }
          },
          "domainIds": {
            "type": "array",
            "description": "Domain ids.",
            "items": {
              "type": "string",
              "description": "Domain ids.",
              "format": "uuid"
            }
          },
          "statusIds": {
            "type": "array",
            "description": "Status ids.",
            "items": {
              "type": "string",
              "description": "Status ids.",
              "format": "uuid"
            }
          },
          "helpText": {
            "type": "string",
            "description": "Help text."
          }
        },
        "description": "Represents one field in the form."
      },
      "OptionValue": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "The label of the option."
          },
          "value": {
            "type": "string",
            "description": "The value of the option."
          }
        },
        "description": "Represents option in the form."
      },
      "StartFormDataImpl": {
        "type": "object",
        "properties": {
          "formKey": {
            "type": "string",
            "description": "The form key."
          },
          "formProperties": {
            "type": "array",
            "description": "The list of form properties.",
            "items": {
              "$ref": "#/components/schemas/FormProperty"
            }
          },
          "processId": {
            "type": "string"
          }
        }
      },
      "NamedDescribedWorkflowStartEventType": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "description": "The event type identifier",
            "enum": [
              "ASSET_ADDED",
              "ASSET_REMOVED",
              "ASSET_STATUS_CHANGED",
              "ASSET_DOMAIN_CHANGED",
              "ASSET_TYPE_CHANGED",
              "ASSET_ATTRIBUTE_CHANGED",
              "ASSET_NAME_CHANGED",
              "ASSET_DISPLAY_NAME_CHANGED",
              "ASSET_ATTRIBUTE_ADDED",
              "ASSET_ATTRIBUTE_REMOVED",
              "DOMAIN_ADDED",
              "DOMAIN_REMOVED",
              "ROLE_GRANTED",
              "ROLE_REVOKED",
              "WORKFLOW_STARTED",
              "WORKFLOW_CANCELED",
              "WORKLFLOW_ESCALATION",
              "WORKFLOW_TASK_COMPLETED",
              "USER_ADDED",
              "USER_REMOVED",
              "USER_DISABLED",
              "COMMENT_ADDED",
              "COMMENT_REMOVED",
              "COMMENT_CHANGED",
              "RELATION_ADDED_AND_ASSET_IS_SOURCE",
              "RELATION_REMOVED_AND_ASSET_WAS_SOURCE",
              "RELATION_ADDED_AND_ASSET_IS_TARGET",
              "RELATION_REMOVED_AND_ASSET_WAS_TARGET",
              "TAG_ASSIGN_CHANGED",
              "CLASSIFICATION_MATCH_ACCEPTED",
              "CLASSIFICATION_MATCH_REJECTED",
              "CLASSIFICATION_MATCH_ADDED",
              "CLASSIFICATION_MATCH_REMOVED",
              "CLASSIFICATION_MATCH_UPDATED",
              "DATABASE_REGISTRATION_COMPLETED",
              "DATABASE_REGISTRATION_FAILED"
            ]
          },
          "name": {
            "type": "string",
            "description": "The event type name"
          },
          "description": {
            "type": "string",
            "description": "The event type description"
          }
        },
        "description": "Describes workflow start event with human-readable name and description."
      },
      "PagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "type": "object",
              "description": "The list of results."
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "PagedResponseWorkflowInstance": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/WorkflowInstance"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "WorkflowDefinitionReference": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the referenced resource.",
            "format": "uuid",
            "example": "2b7f3a1a-4e50-4077-96f0-a58a395c860d"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "example": "Community",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the referenced resource."
          },
          "processId": {
            "type": "string",
            "description": "The <code>id</code> of the process corresponding to the workflow."
          }
        },
        "description": "Represents reference to the workflow definition."
      },
      "WorkflowInstance": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this resource.",
            "format": "uuid",
            "example": "4d250cc5-e583-4640-9874-b93d82c7a6cb"
          },
          "createdOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the creation of this resource.",
            "format": "int64",
            "example": 1475503010320
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The id of the user who modified this resource the last time.",
            "format": "uuid",
            "example": "a073ff90-e7bc-4b35-ba90-c4d475f642fe"
          },
          "lastModifiedOn": {
            "type": "integer",
            "description": "The timestamp (in UTC time standard) of the last modification of this resource.",
            "format": "int64",
            "example": 1476703764163
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "workflowDefinition": {
            "$ref": "#/components/schemas/WorkflowDefinitionReference"
          },
          "subInstances": {
            "uniqueItems": true,
            "type": "array",
            "description": "The sub process instances of this instance.",
            "items": {
              "$ref": "#/components/schemas/WorkflowInstance"
            }
          },
          "subProcessInstancesCount": {
            "type": "integer",
            "description": "The count of sub process instances of this instance.",
            "format": "int64"
          },
          "parentWorkflowInstanceId": {
            "type": "string",
            "description": "The Id of the parent workflow instance."
          },
          "businessItem": {
            "$ref": "#/components/schemas/ResourceReference"
          },
          "tasks": {
            "type": "array",
            "description": "The list of workflow tasks in this process instance.",
            "items": {
              "$ref": "#/components/schemas/WorkflowTask"
            }
          },
          "startDate": {
            "type": "integer",
            "description": "The start date of this process instance.",
            "format": "int64"
          },
          "ended": {
            "type": "boolean",
            "description": "Whether this process instance is already ended."
          },
          "createdAssetId": {
            "type": "string",
            "description": "The optional identifier of the created asset if the process instance ended, created a term and it is configured for it.",
            "format": "uuid"
          },
          "inError": {
            "type": "boolean",
            "description": "Whether this process instance is in error. This means that there was a problem with a async continuation of the process instance."
          },
          "errorMessage": {
            "type": "string",
            "description": "The optional error message of any error in a async continuation of this process instance. Only present if inError is true."
          }
        },
        "description": "Represents an instance of a workflow."
      },
      "WorkflowTask": {
        "required": [
          "id",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the represented object (entity).",
            "format": "uuid"
          },
          "system": {
            "type": "boolean",
            "description": "Whether this is a system resource or not."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of this resource, i.e. [Community, Asset, Domain, Attribute, Relation, WorkflowInstance].",
            "enum": [
              "View",
              "Asset",
              "Community",
              "Domain",
              "AssetType",
              "DomainType",
              "Status",
              "User",
              "ClassificationMatch",
              "UserGroup",
              "Attribute",
              "StringAttribute",
              "ScriptAttribute",
              "BooleanAttribute",
              "DateAttribute",
              "NumericAttribute",
              "SingleValueListAttribute",
              "MultiValueListAttribute",
              "Comment",
              "Attachment",
              "Responsibility",
              "Workflow",
              "Job",
              "Relation",
              "RelationType",
              "ComplexRelation",
              "ComplexRelationType",
              "ArticulationRule",
              "Assignment",
              "Scope",
              "RelationTrace",
              "ValidationRule",
              "DataQualityRule",
              "DataQualityMetric",
              "Address",
              "InstantMessagingAccount",
              "Email",
              "PhoneNumber",
              "Website",
              "Activity",
              "FormProperty",
              "WorkflowTask",
              "ActivityChange",
              "WorkflowInstance",
              "Role",
              "AttributeType",
              "BooleanAttributeType",
              "DateAttributeType",
              "DateTimeAttributeType",
              "MultiValueListAttributeType",
              "NumericAttributeType",
              "ScriptAttributeType",
              "SingleValueListAttributeType",
              "StringAttributeType",
              "ViewSharingRule",
              "ViewAssignmentRule",
              "JdbcDriverFile",
              "JdbcDriver",
              "JdbcIngestionProperties",
              "CsvIngestionProperties",
              "ExcelIngestionProperties",
              "ConnectionStringParameter",
              "AssignedCharacteristicType",
              "Notification",
              "Tag",
              "ComplexRelationLegType",
              "ComplexRelationAttributeType",
              "ComplexRelationLeg",
              "BaseDataType",
              "AdvancedDataType",
              "DiagramPicture",
              "DiagramPictureSharingRule",
              "DiagramPictureAssignmentRule",
              "Rating",
              "Classification",
              "PhysicalDataConnector",
              "Context"
            ]
          },
          "workflowDefinition": {
            "$ref": "#/components/schemas/WorkflowDefinitionReference"
          },
          "workflowInstanceId": {
            "type": "string",
            "description": "The UUID of the workflow instance.",
            "format": "uuid"
          },
          "key": {
            "type": "string",
            "description": "The key."
          },
          "type": {
            "type": "string",
            "description": "The type."
          },
          "aggregationKey": {
            "type": "string",
            "description": "The key for aggregation purposes."
          },
          "priority": {
            "type": "integer",
            "description": "The priority.",
            "format": "int32"
          },
          "owner": {
            "type": "string",
            "description": "The owner."
          },
          "candidateUsers": {
            "type": "array",
            "description": "The list of candidate users.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "createTime": {
            "type": "integer",
            "description": "The create time.",
            "format": "int64"
          },
          "dueDate": {
            "type": "integer",
            "description": "The due date.",
            "format": "int64"
          },
          "cancelable": {
            "type": "boolean",
            "description": "Whether this workflow task is cancelable or not."
          },
          "reassignable": {
            "type": "boolean",
            "description": "Whether this workflow task is reassignable or not."
          },
          "formRequired": {
            "type": "boolean",
            "description": "Whether this task requires a form or not."
          },
          "formKeyAvailable": {
            "type": "boolean",
            "description": "Whether this task has form key available or not."
          },
          "containsActivityStream": {
            "type": "boolean",
            "description": "Whether this task contains an activity stream or not."
          },
          "inError": {
            "type": "boolean",
            "description": "Whether this task is in error or not."
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message in case this task is in error."
          },
          "customButtons": {
            "type": "array",
            "description": "The list of custom buttons.",
            "items": {
              "$ref": "#/components/schemas/FormProperty"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of the workflow task."
          },
          "title": {
            "type": "string",
            "description": "The title of the task."
          },
          "businessItem": {
            "$ref": "#/components/schemas/ResourceReference"
          },
          "businessItemReference": {
            "$ref": "#/components/schemas/NamedResourceReferenceImpl"
          }
        },
        "description": "Represents a workflow task."
      },
      "MessageEventReceivedRequest": {
        "type": "object",
        "properties": {
          "variables": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "The variables of the message event. They will be injected as variables in the running workflow."
            },
            "description": "The variables of the message event. They will be injected as variables in the running workflow."
          }
        },
        "description": "The properties of the message event to be received."
      },
      "StartWorkflowInstancesRequest": {
        "required": [
          "workflowDefinitionId"
        ],
        "type": "object",
        "properties": {
          "workflowDefinitionId": {
            "type": "string",
            "description": "The ID of the workflow definition.",
            "format": "uuid"
          },
          "businessItemIds": {
            "type": "array",
            "description": "The list of IDs for the business items.",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "businessItemType": {
            "type": "string",
            "description": "The resource type of the passed in business items.",
            "enum": [
              "ASSET",
              "DOMAIN",
              "COMMUNITY",
              "GLOBAL"
            ]
          },
          "formProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "The properties of the workflow."
            },
            "description": "The properties of the workflow."
          },
          "guestUserId": {
            "type": "string",
            "description": "The ID of the guest user starting the workflow.",
            "format": "uuid"
          },
          "sendNotification": {
            "type": "boolean",
            "description": "Whether a mail notification on starting the workflows should be sent. This notification is only used in the asynchronous api version (in a job)."
          }
        },
        "description": "The properties of the workflow to be started."
      },
      "CompleteWorkflowTasksRequest": {
        "required": [
          "taskIds"
        ],
        "type": "object",
        "properties": {
          "taskIds": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The list of IDs for tasks that should be completed.",
            "items": {
              "type": "string",
              "description": "The list of IDs for tasks that should be completed.",
              "format": "uuid"
            }
          },
          "formProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "The form properties for the workflow tasks to be completed. It allows users to complete workflow tasks using regular forms. This field's value will be ignored if the taskFormProperties field is populated.\nThis field will be removed. Please use the 'taskFormProperties' field instead.",
              "deprecated": true
            },
            "description": "The form properties for the workflow tasks to be completed. It allows users to complete workflow tasks using regular forms. This field's value will be ignored if the taskFormProperties field is populated.\nThis field will be removed. Please use the 'taskFormProperties' field instead.",
            "deprecated": true
          },
          "taskFormProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "The form properties for the workflow tasks to be completed. It allows users to complete workflow tasks using either regular forms or external json form definitions."
            },
            "description": "The form properties for the workflow tasks to be completed. It allows users to complete workflow tasks using either regular forms or external json form definitions."
          },
          "guestUserId": {
            "type": "string",
            "description": "The ID of the guest user.\nThis field will be removed without a replacement.",
            "format": "uuid",
            "deprecated": true
          }
        },
        "description": "Parameters of the workflow tasks to be completed."
      },
      "WorkflowTaskPagedResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/WorkflowTask"
            }
          }
        }
      },
      "PagedResponseWorkflowTask": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of results.",
            "format": "int64",
            "example": 1000
          },
          "offset": {
            "type": "integer",
            "description": "The offset for the results.",
            "format": "int64",
            "example": 10
          },
          "limit": {
            "type": "integer",
            "description": "The maximum number of results to be returned.",
            "format": "int64",
            "example": 100
          },
          "results": {
            "type": "array",
            "description": "The list of results.",
            "items": {
              "$ref": "#/components/schemas/WorkflowTask"
            }
          }
        },
        "description": "Response containing the paged information."
      },
      "TaskFormData": {
        "type": "object",
        "properties": {
          "formKey": {
            "type": "string",
            "description": "The form key."
          },
          "formProperties": {
            "type": "array",
            "description": "The list of form properties.",
            "items": {
              "$ref": "#/components/schemas/FormProperty"
            }
          },
          "taskId": {
            "type": "string",
            "description": "The <code>id</code> of the task."
          },
          "containsActivityStream": {
            "type": "boolean",
            "description": "Whether the task form contains a activity stream."
          },
          "subtitle": {
            "type": "string",
            "description": "The subtitle of the task if any."
          }
        },
        "description": "Represents all task related form data."
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}