{
  "openapi": "3.0.3",
  "info": {
    "description": "Collibra Management Console public REST API \\n Please ensure that cookies are not present within the API request. Including cookies within the call will cause 403 error.",
    "title": "Collibra Management Console",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/rest"
    }
  ],
  "paths": {
    "/backup": {
      "get": {
        "operationId": "findAll",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackupModel"
                  }
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "List all backups",
        "tags": [
          "backup"
        ]
      },
      "post": {
        "operationId": "uploadBackup",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "files[]": {
                    "$ref": "#/components/schemas/FormDataBodyPart"
                  },
                  "key": {
                    "type": "string",
                    "default": "",
                    "description": "The backup password"
                  }
                },
                "required": [
                  "files[]"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Upload a backup file",
        "tags": [
          "backup"
        ]
      }
    },
    "/backup/async": {
      "post": {
        "operationId": "uploadBackupAsyncValidation",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "object",
                "properties": {
                  "files[]": {
                    "$ref": "#/components/schemas/FormDataBodyPart"
                  },
                  "key": {
                    "type": "string",
                    "default": "",
                    "description": "The backup password"
                  }
                },
                "required": [
                  "files[]"
                ]
              }
            }
          }
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {}
            },
            "description": "default response"
          }
        },
        "summary": "Upload a backup file and process it asynchronously",
        "tags": [
          "backup"
        ]
      }
    },
    "/backup/file/{id}": {
      "delete": {
        "operationId": "deleteBackup",
        "parameters": [
          {
            "description": "The ID of the backup to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "Delete a backup",
        "tags": [
          "backup"
        ]
      },
      "post": {
        "operationId": "getFile",
        "parameters": [
          {
            "description": "The backup id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "The backup password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "not found"
          }
        },
        "summary": "Download a backup file",
        "tags": [
          "backup"
        ]
      }
    },
    "/backup/id/{backupId}": {
      "get": {
        "operationId": "getById",
        "parameters": [
          {
            "description": "The ID of the backup to retrieve",
            "in": "path",
            "name": "backupId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get a backup by ID",
        "tags": [
          "backup"
        ]
      }
    },
    "/backup/{environmentId}": {
      "post": {
        "operationId": "backup",
        "parameters": [
          {
            "description": "The ID of the environment to backup",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupSpecificationModel"
              }
            }
          },
          "description": "The specification for the backup to create"
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Create a backup for the specified environment",
        "tags": [
          "backup"
        ]
      }
    },
    "/backup/{environmentId}/globalState": {
      "get": {
        "operationId": "isEnvironmentBackingUp",
        "parameters": [
          {
            "description": "The ID of the environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get the global status of the current backup for the specified environment",
        "tags": [
          "backup"
        ]
      }
    },
    "/backup/{environmentId}/state": {
      "get": {
        "operationId": "getCurrentStateMap",
        "parameters": [
          {
            "description": "The ID of the environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {}
            },
            "description": "default response"
          }
        },
        "summary": "Get the state of the current backup for the specified environment",
        "tags": [
          "backup"
        ]
      }
    },
    "/backup/{id}/backupinformation": {
      "post": {
        "operationId": "updateBackupInformation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "The new description for the backup"
                  },
                  "name": {
                    "type": "string",
                    "description": "The new name for the backup"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "not found"
          }
        },
        "summary": "Update name and/or description of an existing backup",
        "tags": [
          "backup"
        ]
      }
    },
    "/backupSchedule": {
      "get": {
        "operationId": "getAll",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackupScheduleModel"
                  }
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Retrieve all backup schedules",
        "tags": [
          "backup-schedule"
        ]
      },
      "post": {
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupScheduleCreateRequest"
              }
            }
          },
          "description": "The model from which to create the schedule"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupScheduleModel"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "summary": "Create a backup schedule",
        "tags": [
          "backup-schedule"
        ]
      }
    },
    "/backupSchedule/environment/{environmentId}": {
      "get": {
        "operationId": "getByEnvironmentId",
        "parameters": [
          {
            "description": "The id of the environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackupScheduleModel"
                  }
                }
              }
            },
            "description": "List of backup schedules for the given environment"
          },
          "204": {
            "description": "No backup schedules for the given environment"
          },
          "404": {
            "description": "Environment could not be found"
          }
        },
        "summary": "Retrieve all backup schedules for the given environment",
        "tags": [
          "backup-schedule"
        ]
      }
    },
    "/backupSchedule/{id}": {
      "delete": {
        "operationId": "delete",
        "parameters": [
          {
            "description": "The id of the schedule to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "Delete a backup schedule",
        "tags": [
          "backup-schedule"
        ]
      },
      "get": {
        "operationId": "getById_1",
        "parameters": [
          {
            "description": "The id of the schedule",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupScheduleModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Retrieve a backup schedule",
        "tags": [
          "backup-schedule"
        ]
      },
      "put": {
        "operationId": "update",
        "parameters": [
          {
            "description": "The id of the schedule to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupScheduleUpdateRequest"
              }
            }
          },
          "description": "The updated schedule"
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupScheduleModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Update a backup schedule",
        "tags": [
          "backup-schedule"
        ]
      }
    },
    "/backupSchedule/{id}/backups": {
      "get": {
        "operationId": "getBackupsByScheduleId",
        "parameters": [
          {
            "description": "The id of the schedule",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackupModel"
                  }
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Retrieve all backups created by a backup schedule",
        "tags": [
          "backup-schedule"
        ]
      }
    },
    "/console/configuration": {
      "get": {
        "operationId": "getConfiguration",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Get the console configuration.",
        "tags": [
          "console-configuration"
        ]
      }
    },
    "/console/configuration/jvm": {
      "get": {
        "operationId": "getConsoleJVMConfiguration",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Get Console's JVM configuration. Requires super role.",
        "tags": [
          "console-configuration"
        ]
      },
      "post": {
        "operationId": "updateConsoleJvmConfiguration",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/JvmConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Update Console's JVM configuration. Requires super role.",
        "tags": [
          "console-configuration"
        ]
      }
    },
    "/console/configuration/jvm/json": {
      "post": {
        "operationId": "updateConsoleJVMWithJson",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Update Console's JVM configuration with JSON. Requires super role.",
        "tags": [
          "console-configuration"
        ]
      }
    },
    "/console/configuration/jvm/restoreDefaults": {
      "post": {
        "operationId": "restoreDefaults",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Restore Console's JVM configuration to default. Requires super role.",
        "tags": [
          "console-configuration"
        ]
      }
    },
    "/dgc/configuration/applicationServer/{nodeId}": {
      "get": {
        "operationId": "getApplicationServerConfiguration_1",
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationServerConfiguration"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get DGC's Application Server configuration.",
        "tags": [
          "dgc-configuration"
        ]
      },
      "post": {
        "operationId": "updateApplicationServerConfiguration_1",
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationServerConfiguration"
              }
            }
          }
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationServerConfiguration"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Update DGC's Application Server configuration.",
        "tags": [
          "dgc-configuration"
        ]
      }
    },
    "/dgc/configuration/applicationServer/{nodeId}/json": {
      "post": {
        "operationId": "updateApplicationServerConfigurationWithJson_1",
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationServerConfiguration"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Update DGC's Application Server configuration with JSON.",
        "tags": [
          "dgc-configuration"
        ]
      }
    },
    "/dgc/configuration/applicationServer/{nodeId}/restoreDefaults": {
      "post": {
        "operationId": "restoreDefaultApplicationServerConfiguration_1",
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationServerConfiguration"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Restore DGC's Application Server configuration to default. Requires super role.",
        "tags": [
          "dgc-configuration"
        ]
      }
    },
    "/dgc/configuration/jvm/{managedServiceId}": {
      "get": {
        "operationId": "getJvmConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Get DGC's JVM configuration. Requires super role.",
        "tags": [
          "dgc-configuration"
        ]
      },
      "post": {
        "operationId": "updateJvmConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/JvmConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Update DGC's JVM configuration. Requires super role.",
        "tags": [
          "dgc-configuration"
        ]
      }
    },
    "/dgc/configuration/jvm/{managedServiceId}/json": {
      "post": {
        "operationId": "updateJvmConfigurationWithJson",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Update DGC's JVM configuration with JSON. Requires super role.",
        "tags": [
          "dgc-configuration"
        ]
      }
    },
    "/dgc/configuration/jvm/{managedServiceId}/restoreDefaults": {
      "post": {
        "operationId": "restoreDefaultJvmConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Restore DGC's JVM configuration to default",
        "tags": [
          "dgc-configuration"
        ]
      }
    },
    "/dgcLog": {
      "post": {
        "operationId": "setLoggerLevel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetLoggerLevelRequest"
              }
            }
          },
          "description": "the logger identified by its name and the dgc managed service id"
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DGCManagedServiceModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Adjust the level of the given DGC logger",
        "tags": [
          "dgc-logger"
        ]
      }
    },
    "/dgcLog/{managedServiceId}/{logger}": {
      "delete": {
        "operationId": "deleteLoggerLevel",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "logger",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "OFF",
                    "ERROR",
                    "WARN",
                    "INFO",
                    "DEBUG",
                    "TRACE",
                    "ALL"
                  ]
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Remove the given DGC logger",
        "tags": [
          "dgc-logger"
        ]
      },
      "get": {
        "operationId": "getLoggerLevel",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "logger",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "OFF",
                    "ERROR",
                    "WARN",
                    "INFO",
                    "DEBUG",
                    "TRACE",
                    "ALL"
                  ]
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Retrieve the level of the given DGC logger",
        "tags": [
          "dgc-logger"
        ]
      }
    },
    "/environment": {
      "get": {
        "operationId": "findAll_1",
        "responses": {
          "default": {
            "content": {
              "application/json": {}
            },
            "description": "default response"
          }
        },
        "summary": "List all environments",
        "tags": [
          "environment"
        ]
      },
      "post": {
        "operationId": "add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentModel"
              }
            }
          },
          "description": "The model of the environment to create"
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Create a new environment",
        "tags": [
          "environment"
        ]
      }
    },
    "/environment/{environmentId}": {
      "delete": {
        "operationId": "remove_2",
        "parameters": [
          {
            "description": "The ID of the environment to delete",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "Delete an environment",
        "tags": [
          "environment"
        ]
      },
      "get": {
        "operationId": "getById_2",
        "parameters": [
          {
            "description": "The ID of the environment to retrieve",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get an environment by ID",
        "tags": [
          "environment"
        ]
      },
      "put": {
        "operationId": "change",
        "parameters": [
          {
            "description": "The ID of the environment to change",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentModel"
              }
            }
          },
          "description": "The new model for the environment to change"
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Change an existing environment",
        "tags": [
          "environment"
        ]
      }
    },
    "/environment/{environmentId}/add/{managedServiceId}": {
      "post": {
        "operationId": "addService",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "The ID of the managed service to add to the environment",
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Add a managed service to an environment",
        "tags": [
          "environment"
        ]
      }
    },
    "/environment/{environmentId}/addServiceProvider/{serviceProviderId}": {
      "post": {
        "operationId": "addServiceProvider",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "The ID of the service provider to add to the environment",
            "in": "path",
            "name": "serviceProviderId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Add a service provider to an environment",
        "tags": [
          "environment"
        ]
      }
    },
    "/environment/{environmentId}/remove/{serviceProviderId}": {
      "post": {
        "operationId": "removeService",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "The ID of the service provider to remove from the environment",
            "in": "path",
            "name": "serviceProviderId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Remove a service provider from an environment",
        "tags": [
          "environment"
        ]
      }
    },
    "/environment/{environmentId}/start": {
      "post": {
        "operationId": "start",
        "parameters": [
          {
            "description": "The ID of the environment to start",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successful operation"
          }
        },
        "summary": "Start an environment",
        "tags": [
          "environment"
        ]
      }
    },
    "/environment/{environmentId}/stop": {
      "post": {
        "operationId": "stop",
        "parameters": [
          {
            "description": "The ID of the environment to stop",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successful operation"
          }
        },
        "summary": "Stop an environment",
        "tags": [
          "environment"
        ]
      }
    },
    "/jvm/definition": {
      "get": {
        "operationId": "getConfigurationDefinition_1",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Get JVM configuration definition",
        "tags": [
          "jvm"
        ]
      }
    },
    "/license/{environmentId}/licenseFile": {
      "post": {
        "operationId": "updateLicense_1",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FormDataMultiPart"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {}
            },
            "description": "default response"
          }
        },
        "summary": "Update the license by uploading a new license file",
        "tags": [
          "dgc-license"
        ]
      }
    },
    "/license/{environmentId}/licenseText": {
      "post": {
        "operationId": "updateLicense",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Update the license by providing the content of the new license file",
        "tags": [
          "dgc-license"
        ]
      }
    },
    "/node": {
      "get": {
        "operationId": "findAll_3",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeModel"
                  }
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "List all nodes",
        "tags": [
          "node"
        ]
      },
      "post": {
        "operationId": "add_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeModel"
              }
            }
          },
          "description": "The model of the node to add"
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Add a node",
        "tags": [
          "node"
        ]
      }
    },
    "/node/configuration/jvm/{nodeId}": {
      "get": {
        "operationId": "getNodeJvmConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Get Node's JVM configuration. Requires super role.",
        "tags": [
          "node-configuration"
        ]
      },
      "post": {
        "operationId": "updateNodeJvmConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/JvmConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Update Node's JVM configuration. Requires super role.",
        "tags": [
          "node-configuration"
        ]
      }
    },
    "/node/configuration/jvm/{nodeId}/json": {
      "post": {
        "operationId": "updateNodeJVMWithJson",
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Update Node's JVM configuration with JSON. Requires super role.",
        "tags": [
          "node-configuration"
        ]
      }
    },
    "/node/configuration/jvm/{nodeId}/restoreDefaults": {
      "post": {
        "operationId": "restoreDefaultNodeJVMConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Restore Node's JVM configuration to default. Requires super role.",
        "tags": [
          "node-configuration"
        ]
      }
    },
    "/node/{nodeId}": {
      "delete": {
        "operationId": "remove_3",
        "parameters": [
          {
            "description": "The ID of the target node",
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "Remove a node",
        "tags": [
          "node"
        ]
      },
      "get": {
        "operationId": "getById_4",
        "parameters": [
          {
            "description": "The ID of the target node",
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get a node by ID",
        "tags": [
          "node"
        ]
      },
      "put": {
        "operationId": "change_2",
        "parameters": [
          {
            "description": "The ID of the target node",
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeModel"
              }
            }
          },
          "description": "The new model for the node to change"
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Change an existing node",
        "tags": [
          "node"
        ]
      }
    },
    "/node/{nodeId}/status": {
      "get": {
        "operationId": "status",
        "parameters": [
          {
            "description": "The ID of the target node",
            "in": "path",
            "name": "nodeId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "UP",
                    "UNREACHABLE"
                  ]
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get the status of a node",
        "tags": [
          "node"
        ]
      }
    },
    "/restore/{environmentId}": {
      "post": {
        "operationId": "restoreBackupFromId",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreSpecificationModel"
              }
            }
          },
          "description": "The model to describe what to restore"
        },
        "responses": {
          "default": {
            "content": {
              "*/*": {}
            },
            "description": "default response"
          }
        },
        "summary": "Restore a backup to an environment",
        "tags": [
          "restore"
        ]
      }
    },
    "/restore/{environmentId}/cancel": {
      "put": {
        "operationId": "cancelRestore",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {}
            },
            "description": "default response"
          }
        },
        "summary": "Cancel a restore operation in progress",
        "tags": [
          "restore"
        ]
      }
    },
    "/restore/{environmentId}/factoryDefaults": {
      "post": {
        "operationId": "restoreToFactoryDefaults",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {}
            },
            "description": "default response"
          }
        },
        "summary": "Restore an environment to factory defaults",
        "tags": [
          "restore"
        ]
      }
    },
    "/restore/{environmentId}/state": {
      "get": {
        "operationId": "stateMap",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {}
            },
            "description": "default response"
          }
        },
        "summary": "Retrieve the state of all steps of the restore operation on a specified environment",
        "tags": [
          "restore"
        ]
      }
    },
    "/saml/{environmentId}": {
      "delete": {
        "operationId": "remove_1",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File removed"
          },
          "404": {
            "description": "Environment or DGC service could not be found"
          }
        },
        "summary": "Remove the saml.xml configuration file",
        "tags": [
          "dgc-saml"
        ]
      },
      "get": {
        "operationId": "getContent",
        "parameters": [
          {
            "description": "The ID of the environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content of the file"
          },
          "204": {
            "description": "File does not exist"
          },
          "404": {
            "description": "Environment or DGC service could not be found"
          }
        },
        "summary": "Get the contents of the saml.xml configuration file",
        "tags": [
          "dgc-saml"
        ]
      }
    },
    "/saml/{environmentId}/file": {
      "get": {
        "operationId": "getFile_2",
        "parameters": [
          {
            "description": "The ID of the environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The file"
          },
          "204": {
            "description": "File does not exist"
          },
          "404": {
            "description": "Environment or DGC service could not be found"
          }
        },
        "summary": "Download the saml.xml configuration file",
        "tags": [
          "dgc-saml"
        ]
      },
      "post": {
        "operationId": "uploadFile_1",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FormDataMultiPart"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "File uploaded"
          },
          "404": {
            "description": "Environment or DGC service could not be found"
          },
          "500": {
            "description": "File failed to upload"
          }
        },
        "summary": "Update the saml.xml configuration by uploading a new file",
        "tags": [
          "dgc-saml"
        ]
      }
    },
    "/samlconsole": {
      "delete": {
        "operationId": "remove",
        "responses": {
          "200": {
            "description": "File removed"
          }
        },
        "summary": "Remove the saml.xml configuration file",
        "tags": [
          "console-saml"
        ]
      },
      "get": {
        "operationId": "getFile_1",
        "responses": {
          "200": {
            "description": "The file"
          },
          "204": {
            "description": "File does not exist"
          }
        },
        "summary": "Download the saml.xml configuration file",
        "tags": [
          "console-saml"
        ]
      },
      "post": {
        "operationId": "uploadFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FormDataMultiPart"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "File uploaded"
          },
          "500": {
            "description": "File failed to upload"
          }
        },
        "summary": "Update the saml.xml configuration by uploading a new file",
        "tags": [
          "console-saml"
        ]
      }
    },
    "/samlconsole/certificate": {
      "delete": {
        "description": "Delete the certificate from the SAML keystore and replace it with a generated certificate as done by default.",
        "operationId": "deleteCertificate",
        "responses": {
          "200": {
            "description": "The certificate was successfully deleted."
          }
        },
        "summary": "Delete the specified SAML certificate from the SAML keystore.",
        "tags": [
          "console-saml"
        ]
      },
      "post": {
        "description": "Replaces the currently used certificate with the one uploaded in PEM format. The PEM file must be unencrypted (no password) and contain both the certificate and the private key.",
        "operationId": "changeCertificate",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Certificate successfully changed"
          }
        },
        "summary": "Changes the certificate to be used with SAML",
        "tags": [
          "console-saml"
        ]
      }
    },
    "/samlconsole/metadata": {
      "get": {
        "operationId": "getSPMetadataAsString",
        "parameters": [
          {
            "in": "query",
            "name": "complete",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "metadata successfully found."
          }
        },
        "summary": "Returns the SAML Service Provider metadata for this instance.",
        "tags": [
          "console-saml"
        ]
      }
    },
    "/service": {
      "get": {
        "operationId": "findAll_2",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "List all managed services",
        "tags": [
          "managed-services"
        ]
      }
    },
    "/service/{managedServiceId}": {
      "get": {
        "operationId": "getById_3",
        "parameters": [
          {
            "description": "The ID of the managed service",
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedServiceModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get a managed service by ID",
        "tags": [
          "managed-services"
        ]
      },
      "put": {
        "operationId": "change_1",
        "parameters": [
          {
            "description": "The ID of the managed service to change",
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagedServiceModel"
              }
            }
          },
          "description": "The new model for the managed service to change"
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedServiceModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Change an existing managed service",
        "tags": [
          "managed-services"
        ]
      }
    },
    "/service/{managedServiceId}/start": {
      "post": {
        "operationId": "start_1",
        "parameters": [
          {
            "description": "The ID of the managed service to start",
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successful operation"
          }
        },
        "summary": "Start a managed service",
        "tags": [
          "managed-services"
        ]
      }
    },
    "/service/{managedServiceId}/stop": {
      "post": {
        "operationId": "stop_1",
        "parameters": [
          {
            "description": "The ID of the managed service to stop",
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successful operation"
          }
        },
        "summary": "Stop a managed service",
        "tags": [
          "managed-services"
        ]
      }
    },
    "/serviceProvider": {
      "get": {
        "operationId": "findAll_4",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceProviderModel"
                  }
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "List all service providers",
        "tags": [
          "service-provider"
        ]
      }
    },
    "/serviceProvider/repositorycluster/create": {
      "post": {
        "operationId": "createRepositoryCluster",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "description": "The name of the cluster to create"
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceProviderModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Create a new repository cluster",
        "tags": [
          "service-provider"
        ]
      }
    },
    "/serviceProvider/repositorycluster/{serviceProviderId}/addSlave/{managedServiceId}": {
      "post": {
        "operationId": "addSlaveToRepositoryCluster",
        "parameters": [
          {
            "description": "The id of the target cluster",
            "in": "path",
            "name": "serviceProviderId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "The id of the repository managed service",
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "409": {
            "description": "The slave cannot be added to the repository cluster due to the current state of the cluster or the repository"
          }
        },
        "summary": "Add a slave repository to a repository cluster",
        "tags": [
          "service-provider"
        ]
      }
    },
    "/serviceProvider/repositorycluster/{serviceProviderId}/remove/{managedServiceId}": {
      "post": {
        "operationId": "removeFromRepositoryCluster",
        "parameters": [
          {
            "description": "The id of the target cluster",
            "in": "path",
            "name": "serviceProviderId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "The id of the repository managed service",
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "409": {
            "description": "The repository in the cluster can't be removed due to the current state of the cluster or the repository"
          }
        },
        "summary": "Remove a repository from the cluster",
        "tags": [
          "service-provider"
        ]
      }
    },
    "/serviceProvider/repositorycluster/{serviceProviderId}/setMaster/{managedServiceId}": {
      "post": {
        "operationId": "setMasterInRepositoryCluster",
        "parameters": [
          {
            "description": "The id of the target cluster",
            "in": "path",
            "name": "serviceProviderId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "The id of the repository managed service",
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "409": {
            "description": "The master cannot be set to the cluster due to the current state of the cluster or the repository"
          }
        },
        "summary": "Set the master repository of a repository cluster",
        "tags": [
          "service-provider"
        ]
      }
    },
    "/serviceProvider/serviceProvider/{serviceProviderId}/start": {
      "post": {
        "operationId": "start_2",
        "parameters": [
          {
            "description": "The ID of the service provider to start",
            "in": "path",
            "name": "serviceProviderId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successful operation"
          }
        },
        "summary": "Start a service provider",
        "tags": [
          "service-provider"
        ]
      }
    },
    "/serviceProvider/serviceProvider/{serviceProviderId}/stop": {
      "post": {
        "operationId": "stop_2",
        "parameters": [
          {
            "description": "The ID of the service provider to stop",
            "in": "path",
            "name": "serviceProviderId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "successful operation"
          }
        },
        "summary": "Stop a service provider",
        "tags": [
          "service-provider"
        ]
      }
    },
    "/serviceProvider/{serviceProviderId}": {
      "delete": {
        "operationId": "remove_4",
        "parameters": [
          {
            "description": "The id of the service provider to delete",
            "in": "path",
            "name": "serviceProviderId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "Delete a service provider",
        "tags": [
          "service-provider"
        ]
      },
      "get": {
        "operationId": "getById_5",
        "parameters": [
          {
            "description": "The ID of the service provider",
            "in": "path",
            "name": "serviceProviderId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceProviderModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get a service provider by ID",
        "tags": [
          "service-provider"
        ]
      }
    },
    "/spark/configuration/contextJvm/{managedServiceId}": {
      "get": {
        "operationId": "getJobserverContextJvmConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Get Jobserver's Monitoring JVM configuration. Requires super role.",
        "tags": [
          "jobserver-configuration"
        ]
      },
      "post": {
        "operationId": "updateJobserverContextJvmConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JvmConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Update Jobserver's Monitoring JVM configuration. Requires super role.",
        "tags": [
          "jobserver-configuration"
        ]
      }
    },
    "/spark/configuration/contextJvm/{managedServiceId}/json": {
      "post": {
        "operationId": "updateJobserverContextJvmWithJson",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Update Jobserver's Monitoring JVM configuration with JSON. Requires super role.",
        "tags": [
          "jobserver-configuration"
        ]
      }
    },
    "/spark/configuration/contextJvm/{managedServiceId}/restoreDefaults": {
      "post": {
        "operationId": "restoreDefaultJobserverContextJVMConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Restore Jobserver's Monitoring JVM configuration to default. Requires super role.",
        "tags": [
          "jobserver-configuration"
        ]
      }
    },
    "/spark/configuration/jvm/{managedServiceId}": {
      "get": {
        "operationId": "getJobserverJvmConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Get Jobserver's JVM configuration. Requires super role.",
        "tags": [
          "jobserver-configuration"
        ]
      },
      "post": {
        "operationId": "updateJobserverJvmConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JvmConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Update Jobserver's JVM configuration. Requires super role.",
        "tags": [
          "jobserver-configuration"
        ]
      }
    },
    "/spark/configuration/jvm/{managedServiceId}/json": {
      "post": {
        "operationId": "updateJobserverJvmWithJson",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Update Jobserver's JVM configuration with JSON. Requires super role.",
        "tags": [
          "jobserver-configuration"
        ]
      }
    },
    "/spark/configuration/jvm/{managedServiceId}/restoreDefaults": {
      "post": {
        "operationId": "restoreDefaultJobserverJVMConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Restore Jobserver's JVM configuration to default. Requires super role.",
        "tags": [
          "jobserver-configuration"
        ]
      }
    },
    "/spark/configuration/server/definition": {
      "get": {
        "operationId": "getJobserverServerConfigurationDefinition",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Get Jobserver's Server configuration definition. ",
        "tags": [
          "jobserver-configuration"
        ]
      }
    },
    "/spark/configuration/server/{managedServiceId}": {
      "get": {
        "operationId": "getJobserverServerConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Get Jobserver's Server configuration. ",
        "tags": [
          "jobserver-configuration"
        ]
      },
      "post": {
        "operationId": "overwriteJobserverServerConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobserverServerConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Overwrite Jobserver's JVM configuration. Requires super role.",
        "tags": [
          "jobserver-configuration"
        ]
      }
    },
    "/spark/configuration/server/{managedServiceId}/json": {
      "post": {
        "operationId": "updateJobserverServerConfigurationWithJson",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Overwrite Jobserver's JVM configuration. Requires super role.",
        "tags": [
          "jobserver-configuration"
        ]
      }
    },
    "/spark/configuration/server/{managedServiceId}/restoreDefaults": {
      "post": {
        "operationId": "restoreDefaultJobserverServerConfiguration",
        "parameters": [
          {
            "in": "path",
            "name": "managedServiceId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Get Jobserver's Server configuration. ",
        "tags": [
          "jobserver-configuration"
        ]
      }
    },
    "/support": {
      "get": {
        "operationId": "findAll_5",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupportModel"
                  }
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "List all diagnostic files",
        "tags": [
          "support"
        ]
      }
    },
    "/support/{environmentId}/zip": {
      "post": {
        "operationId": "createSupportFile",
        "parameters": [
          {
            "description": "The ID of the target environment",
            "in": "path",
            "name": "environmentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportSpecificationModel"
              }
            }
          },
          "description": "The model to describe what to include in the diagnostic file"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportModel"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "summary": "Create a diagnostic file for a specified environment",
        "tags": [
          "support"
        ]
      }
    },
    "/support/{id}": {
      "delete": {
        "operationId": "deleteSupportFile",
        "parameters": [
          {
            "description": "The ID of the target diagnostic file",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "*/*": {}
            },
            "description": "default response"
          }
        },
        "summary": "Delete a diagnostic file",
        "tags": [
          "support"
        ]
      },
      "get": {
        "operationId": "getFile_3",
        "parameters": [
          {
            "description": "The ID of the target diagnostic file",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "summary": "Download a diagnostic file",
        "tags": [
          "support"
        ]
      }
    },
    "/user": {
      "get": {
        "operationId": "findAll_6",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserModel"
                  }
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "List all users",
        "tags": [
          "user"
        ]
      },
      "post": {
        "operationId": "add_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserModel"
              }
            }
          },
          "description": "The model for the user to create"
        },
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Create a new user",
        "tags": [
          "user"
        ]
      }
    },
    "/user/name/{userName}": {
      "get": {
        "operationId": "getByUserName",
        "parameters": [
          {
            "description": "The username to look for",
            "in": "path",
            "name": "userName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "not found"
          }
        },
        "summary": "Get a user by user name",
        "tags": [
          "user"
        ]
      }
    },
    "/user/passwordPolicy": {
      "get": {
        "operationId": "getPasswordPolicy",
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordPolicyModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get password policy",
        "tags": [
          "user"
        ]
      }
    },
    "/user/passwordReset/passwordPolicy": {
      "get": {
        "operationId": "getPasswordPolicy_1",
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordPolicyModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Get password policy per token",
        "tags": [
          "user"
        ]
      }
    },
    "/user/passwordReset/request": {
      "post": {
        "operationId": "resetPasswordRequest",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email of the target user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "successful operation"
          }
        },
        "summary": "Request an email for a user to reset his password",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{userId}": {
      "delete": {
        "operationId": "remove_5",
        "parameters": [
          {
            "description": "The ID of the target user",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "summary": "Delete a user",
        "tags": [
          "user"
        ]
      },
      "get": {
        "operationId": "getById_6",
        "parameters": [
          {
            "description": "The ID of the target user",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "not found"
          }
        },
        "summary": "Get a user by ID",
        "tags": [
          "user"
        ]
      }
    },
    "/user/{userId}/role": {
      "put": {
        "operationId": "changeRole",
        "parameters": [
          {
            "description": "The ID of the target user",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "The new role for the target user",
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "READ",
                "ADMIN",
                "SUPER"
              ]
            }
          }
        ],
        "responses": {
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            },
            "description": "default response"
          }
        },
        "summary": "Change the role of a user",
        "tags": [
          "user"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AjpConnectorConfiguration": {
        "type": "object",
        "properties": {
          "acceptCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "acceptorThreadCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "address": {
            "type": "string"
          },
          "compressableMimeType": {
            "type": "string"
          },
          "compression": {
            "type": "string"
          },
          "compressionMinSize": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "connectionTimeOut": {
            "type": "integer",
            "format": "int32",
            "minimum": -1
          },
          "maxThreads": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "minSpareThreads": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "minimum": -1
          },
          "protocol": {
            "type": "string"
          },
          "redirectPort": {
            "type": "integer",
            "format": "int32"
          },
          "socketReuseAddress": {
            "type": "boolean"
          },
          "uriEncoding": {
            "type": "string"
          }
        },
        "required": [
          "acceptCount",
          "acceptorThreadCount",
          "address",
          "compression",
          "compressionMinSize",
          "connectionTimeOut",
          "maxThreads",
          "minSpareThreads",
          "port",
          "protocol",
          "redirectPort",
          "socketReuseAddress",
          "uriEncoding"
        ]
      },
      "ApplicationServerConfiguration": {
        "type": "object",
        "properties": {
          "ajpConnector": {
            "$ref": "#/components/schemas/AjpConnectorConfiguration"
          },
          "collibraDataDirectory": {
            "type": "string"
          },
          "contextPath": {
            "type": "string"
          },
          "httpConnector": {
            "$ref": "#/components/schemas/HttpConnectorConfiguration"
          },
          "httpsConnector": {
            "$ref": "#/components/schemas/HttpsConnectorConfiguration"
          },
          "installationDirectory": {
            "type": "string"
          },
          "jksPasswordFile": {
            "type": "string"
          },
          "resources": {
            "$ref": "#/components/schemas/ResourcesConfiguration"
          },
          "shutDownPort": {
            "type": "integer",
            "format": "int32"
          },
          "shutdownAddress": {
            "type": "string"
          },
          "wantHttpsOnly": {
            "type": "boolean"
          },
          "warPath": {
            "type": "string"
          },
          "workDirectory": {
            "type": "string"
          }
        },
        "required": [
          "collibraDataDirectory",
          "installationDirectory",
          "shutDownPort",
          "shutdownAddress",
          "warPath",
          "workDirectory"
        ]
      },
      "AttributeFields": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "string"
          },
          "groupField": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ]
      },
      "BackupConfiguration": {
        "type": "object",
        "properties": {
          "backupRetry": {
            "$ref": "#/components/schemas/BackupRetryConfiguration"
          },
          "backupSchedule": {
            "$ref": "#/components/schemas/BackupScheduleConfiguration"
          },
          "cleanupInterval": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "timeoutInMillis": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "timeoutInMillis"
        ]
      },
      "BackupInformationModel": {
        "type": "object",
        "properties": {
          "appVersion": {
            "type": "string"
          },
          "backupSpecificationId": {
            "type": "string",
            "format": "uuid"
          },
          "createdByEmail": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "dgcBackupOptions": {
            "type": "array",
            "example": [
              "CUSTOMIZATIONS",
              "CONFIGURATION"
            ],
            "items": {
              "type": "string",
              "enum": [
                "CONFIGURATION",
                "CUSTOMIZATIONS"
              ],
              "example": "[\"CUSTOMIZATIONS\",\"CONFIGURATION\"]"
            },
            "uniqueItems": true
          },
          "environmentId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "repoBackupOptions": {
            "type": "array",
            "example": [
              "DATA",
              "HISTORY"
            ],
            "items": {
              "type": "string",
              "enum": [
                "DATA",
                "HISTORY"
              ],
              "example": "[\"DATA\",\"HISTORY\"]"
            },
            "uniqueItems": true
          }
        }
      },
      "BackupModel": {
        "type": "object",
        "properties": {
          "backupInformation": {
            "$ref": "#/components/schemas/BackupInformationModel"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "inProgress": {
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "stepStateMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/StepStateModel"
            }
          }
        }
      },
      "BackupRetryConfiguration": {
        "type": "object",
        "properties": {
          "agentBackupTransferRetryDelay": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "agentBackupTransferRetryMax": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "checkAgentUpTimeoutInMillis": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "required": [
          "agentBackupTransferRetryDelay",
          "agentBackupTransferRetryMax",
          "checkAgentUpTimeoutInMillis"
        ]
      },
      "BackupScheduleConfiguration": {
        "type": "object",
        "properties": {
          "defaultMaxRetained": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "required": [
          "defaultMaxRetained"
        ]
      },
      "BackupScheduleCreateRequest": {
        "type": "object",
        "properties": {
          "cronExpression": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dgcBackupOptions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CONFIGURATION",
                "CUSTOMIZATIONS"
              ]
            },
            "uniqueItems": true
          },
          "environmentId": {
            "type": "string",
            "format": "uuid"
          },
          "maxRetained": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "repoBackupOptions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DATA",
                "HISTORY"
              ]
            },
            "uniqueItems": true
          }
        }
      },
      "BackupScheduleModel": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "cronExpression": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dgcBackupOptions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CONFIGURATION",
                "CUSTOMIZATIONS"
              ]
            },
            "uniqueItems": true
          },
          "environmentId": {
            "type": "string",
            "format": "uuid"
          },
          "frequencyWarning": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "maxRetained": {
            "type": "integer",
            "format": "int32"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "nextExecution": {
            "type": "string",
            "format": "date-time"
          },
          "numberOfBackups": {
            "type": "integer",
            "format": "int32"
          },
          "repoBackupOptions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DATA",
                "HISTORY"
              ]
            },
            "uniqueItems": true
          },
          "serverTimeZoneOffset": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "rules": {
                "type": "object",
                "properties": {
                  "fixedOffset": {
                    "type": "boolean"
                  },
                  "transitionRules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dayOfMonthIndicator": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "dayOfWeek": {
                          "type": "string",
                          "enum": [
                            "MONDAY",
                            "TUESDAY",
                            "WEDNESDAY",
                            "THURSDAY",
                            "FRIDAY",
                            "SATURDAY",
                            "SUNDAY"
                          ]
                        },
                        "localTime": {
                          "$ref": "#/components/schemas/LocalTime"
                        },
                        "midnightEndOfDay": {
                          "type": "boolean"
                        },
                        "month": {
                          "type": "string",
                          "enum": [
                            "JANUARY",
                            "FEBRUARY",
                            "MARCH",
                            "APRIL",
                            "MAY",
                            "JUNE",
                            "JULY",
                            "AUGUST",
                            "SEPTEMBER",
                            "OCTOBER",
                            "NOVEMBER",
                            "DECEMBER"
                          ]
                        },
                        "offsetAfter": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "offsetBefore": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "standardOffset": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "timeDefinition": {
                          "type": "string",
                          "enum": [
                            "UTC",
                            "WALL",
                            "STANDARD"
                          ]
                        }
                      }
                    }
                  },
                  "transitions": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "dateTimeAfter": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "dateTimeBefore": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "duration": {
                          "type": "object",
                          "properties": {
                            "nano": {
                              "type": "integer",
                              "format": "int32"
                            },
                            "negative": {
                              "type": "boolean"
                            },
                            "seconds": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "units": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "dateBased": {
                                    "type": "boolean"
                                  },
                                  "durationEstimated": {
                                    "type": "boolean"
                                  },
                                  "timeBased": {
                                    "type": "boolean"
                                  }
                                }
                              }
                            },
                            "zero": {
                              "type": "boolean"
                            }
                          }
                        },
                        "gap": {
                          "type": "boolean"
                        },
                        "instant": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "offsetAfter": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "offsetBefore": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "totalSeconds": {
                              "type": "integer",
                              "format": "int32"
                            }
                          }
                        },
                        "overlap": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              },
              "totalSeconds": {
                "type": "integer",
                "format": "int32"
              }
            },
            "x-scope": "private"
          }
        }
      },
      "BackupScheduleUpdateRequest": {
        "type": "object",
        "properties": {
          "backupScheduleId": {
            "type": "string",
            "format": "uuid"
          },
          "cronExpression": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "dgcBackupOptions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CONFIGURATION",
                "CUSTOMIZATIONS"
              ]
            },
            "uniqueItems": true
          },
          "maxRetained": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "repoBackupOptions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DATA",
                "HISTORY"
              ]
            },
            "uniqueItems": true
          }
        }
      },
      "BackupSpecificationModel": {
        "type": "object",
        "properties": {
          "database": {
            "type": "string",
            "x-scope": "private"
          },
          "description": {
            "type": "string"
          },
          "dgcBackupOptions": {
            "type": "array",
            "example": [
              "CUSTOMIZATIONS",
              "CONFIGURATION"
            ],
            "items": {
              "type": "string",
              "enum": [
                "CONFIGURATION",
                "CUSTOMIZATIONS"
              ],
              "example": "[\"CUSTOMIZATIONS\",\"CONFIGURATION\"]"
            },
            "uniqueItems": true
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "repoBackupOptions": {
            "type": "array",
            "example": [
              "DATA",
              "HISTORY"
            ],
            "items": {
              "type": "string",
              "enum": [
                "DATA",
                "HISTORY"
              ],
              "example": "[\"DATA\",\"HISTORY\"]"
            },
            "uniqueItems": true
          },
          "skipAppVersion": {
            "type": "boolean",
            "x-scope": "private"
          }
        }
      },
      "BaseField": {
        "type": "object",
        "properties": {
          "allowedValues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defaultValue": {
            "type": "object"
          },
          "description": {
            "type": "string"
          },
          "encrypted": {
            "type": "boolean"
          },
          "fieldGroups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "name": {
            "type": "string"
          },
          "orderIndex": {
            "type": "integer",
            "format": "int32"
          },
          "required": {
            "type": "boolean"
          },
          "restart": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "STRING",
              "CHARACTER",
              "UUID",
              "ENUM",
              "INTEGER",
              "FLOAT",
              "BOOLEAN",
              "ARRAY",
              "DATE",
              "MAP",
              "OBJECT",
              "TEXT_AREA"
            ]
          },
          "uiHints": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "unsupported": {
            "type": "boolean"
          }
        }
      },
      "BeanDefinition": {
        "type": "object",
        "properties": {
          "_type": {
            "type": "string"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/BaseField"
            }
          },
          "isRootObject": {
            "type": "boolean"
          }
        }
      },
      "BodyPart": {
        "type": "object",
        "properties": {
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          },
          "entity": {
            "type": "object"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            }
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "messageBodyWorkers": {
            "$ref": "#/components/schemas/MessageBodyWorkers"
          },
          "parameterizedHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ParameterizedHeader"
              }
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            }
          },
          "parent": {
            "$ref": "#/components/schemas/MultiPart"
          },
          "providers": {
            "$ref": "#/components/schemas/Providers"
          }
        }
      },
      "ConsoleConfiguration": {
        "type": "object",
        "properties": {
          "backup": {
            "$ref": "#/components/schemas/BackupConfiguration"
          },
          "baseUrl": {
            "type": "string"
          },
          "createDefaultEnvironmentsAtStartup": {
            "type": "boolean"
          },
          "csrf": {
            "$ref": "#/components/schemas/CsrfConfiguration"
          },
          "dataSourceConfiguration": {
            "$ref": "#/components/schemas/ConsoleDataSourceConfiguration"
          },
          "defaultEnvironmentSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentConfiguration"
            },
            "uniqueItems": true
          },
          "dgcStartupTimeout": {
            "type": "integer",
            "format": "int64"
          },
          "enableServiceMonitor": {
            "type": "boolean"
          },
          "getxFrameOptions": {
            "type": "string"
          },
          "jobserverStartupTimeout": {
            "type": "integer",
            "format": "int64"
          },
          "ldap": {
            "$ref": "#/components/schemas/ConsoleLdapConfiguration"
          },
          "mailConfiguration": {
            "$ref": "#/components/schemas/MailConfiguration"
          },
          "postgresqlPath": {
            "type": "string"
          },
          "repositoryStartupTimeout": {
            "type": "integer",
            "format": "int64"
          },
          "securityConfiguration": {
            "$ref": "#/components/schemas/SecurityConfiguration"
          },
          "sessionConfiguration": {
            "$ref": "#/components/schemas/SessionConfiguration"
          },
          "ui": {
            "$ref": "#/components/schemas/UiConfiguration"
          }
        },
        "required": [
          "baseUrl",
          "createDefaultEnvironmentsAtStartup",
          "dgcStartupTimeout",
          "enableServiceMonitor",
          "jobserverStartupTimeout",
          "postgresqlPath",
          "repositoryStartupTimeout"
        ]
      },
      "ConsoleDataSourceConfiguration": {
        "type": "object",
        "properties": {
          "adminPassword": {
            "type": "string"
          },
          "consolePassword": {
            "type": "string"
          },
          "useExternalDatabase": {
            "type": "boolean"
          }
        },
        "required": [
          "adminPassword",
          "consolePassword",
          "useExternalDatabase"
        ]
      },
      "ConsoleLdapConfiguration": {
        "type": "object",
        "properties": {
          "allowLdapSuperUsers": {
            "type": "boolean"
          },
          "defaultRole": {
            "type": "string",
            "enum": [
              "READ",
              "ADMIN",
              "SUPER"
            ]
          },
          "enabled": {
            "type": "boolean"
          },
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsoleLdapServer"
            }
          },
          "timeout": {
            "type": "integer",
            "format": "int32"
          },
          "userFields": {
            "$ref": "#/components/schemas/ConsoleLdapUserFields"
          }
        },
        "required": [
          "enabled",
          "timeout"
        ]
      },
      "ConsoleLdapServer": {
        "type": "object",
        "properties": {
          "authType": {
            "type": "string"
          },
          "authUserFilter": {
            "type": "string"
          },
          "base": {
            "type": "string"
          },
          "bindDn": {
            "type": "string"
          },
          "bindPassword": {
            "type": "string"
          },
          "groupBase": {
            "type": "string"
          },
          "groupFilter": {
            "type": "string"
          },
          "ldapUserGroupsToRolesMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "READ",
                "ADMIN",
                "SUPER"
              ]
            }
          },
          "membershipAttribute": {
            "type": "string"
          },
          "referral": {
            "type": "string"
          },
          "shutdownTlsGracefully": {
            "type": "boolean"
          },
          "syncUserFilter": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "userBase": {
            "type": "string"
          }
        }
      },
      "ConsoleLdapUserFields": {
        "type": "object",
        "properties": {
          "emailField": {
            "type": "string"
          },
          "roleField": {
            "type": "string"
          },
          "userNameField": {
            "type": "string"
          }
        },
        "required": [
          "emailField",
          "roleField",
          "userNameField"
        ]
      },
      "ContentDisposition": {
        "type": "object",
        "properties": {
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "fileName": {
            "type": "string"
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "readDate": {
            "type": "string",
            "format": "date-time"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "CsrfConfiguration": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "DGCManagedServiceModel": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "errorMessage": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "nodeId": {
            "type": "string",
            "format": "uuid"
          },
          "optionalDependencies": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "REPOSITORY",
                "SPARK",
                "DGC",
                "SEARCH"
              ]
            }
          },
          "requiredDependencies": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "REPOSITORY",
                "SPARK",
                "DGC",
                "SEARCH"
              ]
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "STARTING",
              "RUNNING",
              "STOPPING",
              "STOPPED",
              "ERROR",
              "UNKNOWN"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "REPOSITORY",
              "SPARK",
              "DGC",
              "SEARCH"
            ]
          }
        }
      },
      "EnvironmentConfiguration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0
          },
          "serviceConfigurationSet": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManagedServiceConfiguration"
            },
            "uniqueItems": true
          }
        }
      },
      "EnvironmentModel": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "serviceIdSet": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "uniqueItems": true
          },
          "status": {
            "type": "string",
            "enum": [
              "INCOMPLETE",
              "RUNNING",
              "PARTIALLY_RUNNING",
              "STOPPED",
              "ERROR",
              "STARTING",
              "STOPPING",
              "UPGRADING",
              "RESTORING_BACKUP"
            ]
          }
        }
      },
      "FetchBackupRequest": {
        "type": "object",
        "properties": {
          "fetchUrl": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        }
      },
      "FormDataBodyPart": {
        "type": "object",
        "properties": {
          "content": {
            "type": "object"
          },
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          },
          "entity": {
            "type": "object"
          },
          "fileName": {
            "type": "string"
          },
          "formDataContentDisposition": {
            "$ref": "#/components/schemas/FormDataContentDisposition"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            }
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "messageBodyWorkers": {
            "$ref": "#/components/schemas/MessageBodyWorkers"
          },
          "name": {
            "type": "string"
          },
          "parameterizedHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ParameterizedHeader"
              }
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            }
          },
          "parent": {
            "$ref": "#/components/schemas/MultiPart"
          },
          "providers": {
            "$ref": "#/components/schemas/Providers"
          },
          "simple": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "FormDataContentDisposition": {
        "type": "object",
        "properties": {
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "fileName": {
            "type": "string"
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "readDate": {
            "type": "string",
            "format": "date-time"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "FormDataMultiPart": {
        "type": "object",
        "properties": {
          "bodyParts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BodyPart"
            }
          },
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          },
          "entity": {
            "type": "object"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FormDataBodyPart"
              }
            }
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            }
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "messageBodyWorkers": {
            "$ref": "#/components/schemas/MessageBodyWorkers"
          },
          "parameterizedHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ParameterizedHeader"
              }
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            }
          },
          "parent": {
            "$ref": "#/components/schemas/MultiPart"
          },
          "providers": {
            "$ref": "#/components/schemas/Providers"
          }
        }
      },
      "HeadersScopeConfiguration": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string"
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "HttpConnectorConfiguration": {
        "type": "object",
        "properties": {
          "acceptCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "acceptorThreadCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "address": {
            "type": "string"
          },
          "compressableMimeType": {
            "type": "string"
          },
          "compression": {
            "type": "string"
          },
          "compressionMinSize": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "connectionTimeOut": {
            "type": "integer",
            "format": "int32",
            "minimum": -1
          },
          "maxThreads": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "minSpareThreads": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "minimum": -1
          },
          "protocol": {
            "type": "string"
          },
          "redirectPort": {
            "type": "integer",
            "format": "int32"
          },
          "socketReuseAddress": {
            "type": "boolean"
          },
          "uriEncoding": {
            "type": "string"
          }
        },
        "required": [
          "acceptCount",
          "acceptorThreadCount",
          "address",
          "compression",
          "compressionMinSize",
          "connectionTimeOut",
          "maxThreads",
          "minSpareThreads",
          "port",
          "protocol",
          "redirectPort",
          "socketReuseAddress",
          "uriEncoding"
        ]
      },
      "HttpsConnectorConfiguration": {
        "type": "object",
        "properties": {
          "acceptCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "acceptorThreadCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "address": {
            "type": "string"
          },
          "ciphers": {
            "type": "string"
          },
          "clientAuth": {
            "type": "string"
          },
          "compressableMimeType": {
            "type": "string"
          },
          "compression": {
            "type": "string"
          },
          "compressionMinSize": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "connectionTimeOut": {
            "type": "integer",
            "format": "int32",
            "minimum": -1
          },
          "keyAlias": {
            "type": "string"
          },
          "keyPass": {
            "type": "string"
          },
          "keystoreFile": {
            "type": "string"
          },
          "keystorePass": {
            "type": "string"
          },
          "keystoreProvider": {
            "type": "string"
          },
          "keystoreType": {
            "type": "string"
          },
          "maxThreads": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "minSpareThreads": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "minimum": -1
          },
          "protocol": {
            "type": "string"
          },
          "redirectPort": {
            "type": "integer",
            "format": "int32"
          },
          "socketReuseAddress": {
            "type": "boolean"
          },
          "truststoreFile": {
            "type": "string"
          },
          "truststorePass": {
            "type": "string"
          },
          "truststoreProvider": {
            "type": "string"
          },
          "truststoreType": {
            "type": "string"
          },
          "uriEncoding": {
            "type": "string"
          }
        },
        "required": [
          "acceptCount",
          "acceptorThreadCount",
          "address",
          "compression",
          "compressionMinSize",
          "connectionTimeOut",
          "maxThreads",
          "minSpareThreads",
          "port",
          "protocol",
          "redirectPort",
          "socketReuseAddress",
          "uriEncoding"
        ]
      },
      "JobserverSecurityConfiguration": {
        "type": "object",
        "properties": {
          "authentication": {
            "type": "string",
            "enum": [
              "NONE",
              "SERVER",
              "MUTUAL"
            ]
          },
          "certificateChain": {
            "type": "string"
          },
          "privateKey": {
            "type": "string"
          },
          "trustedCertificate": {
            "type": "string"
          }
        }
      },
      "JobserverServerConfiguration": {
        "type": "object",
        "properties": {
          "jobserverMemory": {
            "type": "string"
          },
          "jobserverMonitoringPort": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535,
            "minimum": 0
          },
          "jobserverSecurityConfiguration": {
            "$ref": "#/components/schemas/JobserverSecurityConfiguration"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535,
            "minimum": 0
          },
          "sparkMemory": {
            "type": "string"
          },
          "sparkMonitoringPort": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535,
            "minimum": 0
          }
        },
        "required": [
          "jobserverMemory",
          "jobserverMonitoringPort",
          "port",
          "sparkMemory",
          "sparkMonitoringPort"
        ]
      },
      "JvmConfiguration": {
        "type": "object",
        "properties": {
          "jvmParameters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LicenseInfoModel": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "integer",
            "format": "int64"
          },
          "expired": {
            "type": "boolean"
          },
          "valid": {
            "type": "boolean"
          }
        }
      },
      "LocalTime": {
        "type": "object",
        "properties": {
          "hour": {
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "type": "integer",
            "format": "int32"
          },
          "nano": {
            "type": "integer",
            "format": "int32"
          },
          "second": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MailConfiguration": {
        "type": "object",
        "properties": {
          "fromAddress": {
            "type": "string",
            "pattern": ".+@.+\\..+"
          },
          "host": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535,
            "minimum": 0
          },
          "startTls": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "fromAddress",
          "host",
          "port"
        ]
      },
      "ManagedServiceConfiguration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "nodeConfiguration": {
            "$ref": "#/components/schemas/NodeConfiguration"
          },
          "type": {
            "type": "string",
            "enum": [
              "REPOSITORY",
              "SPARK",
              "DGC",
              "SEARCH"
            ]
          }
        }
      },
      "ManagedServiceModel": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "errorMessage": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "nodeId": {
            "type": "string",
            "format": "uuid"
          },
          "optionalDependencies": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "REPOSITORY",
                "SPARK",
                "DGC",
                "SEARCH"
              ]
            }
          },
          "requiredDependencies": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "REPOSITORY",
                "SPARK",
                "DGC",
                "SEARCH"
              ]
            }
          },
          "status": {
            "$ref": "#/components/schemas/ManagedServiceStatus"
          },
          "type": {
            "type": "string",
            "enum": [
              "REPOSITORY",
              "SPARK",
              "DGC",
              "SEARCH"
            ]
          }
        }
      },
      "ManagedServiceStatus": {
        "type": "object"
      },
      "MediaType": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "subtype": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "wildcardSubtype": {
            "type": "boolean"
          },
          "wildcardType": {
            "type": "boolean"
          }
        }
      },
      "MessageBodyWorkers": {
        "type": "object"
      },
      "MonitoringValueModelLong": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "enum": [
              "BYTE",
              "KILO_BYTE",
              "MEGA_BYTE",
              "MILLISECOND",
              "SECOND",
              "COUNT",
              "PERCENTAGE",
              "LOAD"
            ]
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "MonitoringValueModelMutableMemoryUsage": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "enum": [
              "BYTE",
              "KILO_BYTE",
              "MEGA_BYTE",
              "MILLISECOND",
              "SECOND",
              "COUNT",
              "PERCENTAGE",
              "LOAD"
            ]
          },
          "value": {
            "$ref": "#/components/schemas/MutableMemoryUsage"
          }
        }
      },
      "MultiPart": {
        "type": "object",
        "properties": {
          "bodyParts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BodyPart"
            }
          },
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDisposition"
          },
          "entity": {
            "type": "object"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            }
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "messageBodyWorkers": {
            "$ref": "#/components/schemas/MessageBodyWorkers"
          },
          "parameterizedHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ParameterizedHeader"
              }
            },
            "properties": {
              "empty": {
                "type": "boolean"
              }
            }
          },
          "parent": {
            "$ref": "#/components/schemas/MultiPart"
          },
          "providers": {
            "$ref": "#/components/schemas/Providers"
          }
        }
      },
      "MultivaluedMapStringParameterizedHeader": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/ParameterizedHeader"
          }
        },
        "properties": {
          "empty": {
            "type": "boolean"
          }
        }
      },
      "MultivaluedMapStringString": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "empty": {
            "type": "boolean"
          }
        }
      },
      "MutableMemoryUsage": {
        "type": "object",
        "properties": {
          "committed": {
            "type": "integer",
            "format": "int64"
          },
          "init": {
            "type": "integer",
            "format": "int64"
          },
          "max": {
            "type": "integer",
            "format": "int64"
          },
          "used": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "NodeConfiguration": {
        "type": "object",
        "properties": {
          "hostName": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "maxLength": 80,
            "minLength": 0
          },
          "port": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NodeModel": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "hostName": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "managedServiceIdSet": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "uniqueItems": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ParameterizedHeader": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "value": {
            "type": "string"
          }
        }
      },
      "PasswordConfiguration": {
        "type": "object",
        "properties": {
          "digitRequired": {
            "type": "boolean"
          },
          "lowercaseRequired": {
            "type": "boolean"
          },
          "maximumLength": {
            "type": "integer",
            "format": "int32",
            "maximum": 2048,
            "minimum": 1
          },
          "minimumLength": {
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "nonAlphanumericRequired": {
            "type": "boolean"
          },
          "resetLinkValidityMinutes": {
            "type": "integer",
            "format": "int32",
            "maximum": 1440,
            "minimum": 15
          },
          "uppercaseRequired": {
            "type": "boolean"
          },
          "usernameDisallowed": {
            "type": "boolean"
          }
        },
        "required": [
          "maximumLength",
          "minimumLength"
        ]
      },
      "PasswordPolicyModel": {
        "type": "object",
        "properties": {
          "digitRequired": {
            "type": "boolean"
          },
          "lowercaseRequired": {
            "type": "boolean"
          },
          "maximumLength": {
            "type": "integer",
            "format": "int32"
          },
          "minimumLength": {
            "type": "integer",
            "format": "int32"
          },
          "nonAlphanumericRequired": {
            "type": "boolean"
          },
          "uppercaseRequired": {
            "type": "boolean"
          },
          "username": {
            "type": "string"
          },
          "usernameDisallowed": {
            "type": "boolean"
          }
        }
      },
      "PgHbaConfiguration": {
        "type": "object",
        "properties": {
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostgresqlAuthorizationFileRow"
            }
          }
        }
      },
      "PostgresqlAuthorizationFileRow": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "authMethod": {
            "type": "string",
            "enum": [
              "trust",
              "reject",
              "md5",
              "password",
              "gss",
              "sspi",
              "krb5",
              "ident",
              "peer",
              "ldap",
              "radius",
              "cert",
              "pam",
              "scram-sha-256"
            ]
          },
          "authOptions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "comment": {
            "type": "string"
          },
          "commented": {
            "type": "boolean"
          },
          "database": {
            "type": "string"
          },
          "ipMask": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "local",
              "host",
              "hostssl",
              "hostnossl"
            ]
          },
          "user": {
            "type": "string"
          }
        }
      },
      "Providers": {
        "type": "object"
      },
      "ReplicationStateModel": {
        "type": "object",
        "properties": {
          "isInRecovery": {
            "type": "boolean"
          },
          "lastReceive": {
            "type": "string"
          },
          "lastReplay": {
            "type": "string"
          },
          "lastReplayTimeStamp": {
            "type": "integer",
            "format": "int64"
          },
          "logDelay": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ResourcesConfiguration": {
        "type": "object",
        "properties": {
          "cacheMaxSize": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "cacheMaxSize"
        ]
      },
      "RestoreSpecificationModel": {
        "type": "object",
        "properties": {
          "backupId": {
            "type": "string",
            "format": "uuid"
          },
          "backupVersion": {
            "type": "string",
            "x-scope": "private"
          },
          "database": {
            "type": "string",
            "x-scope": "private"
          },
          "dgcRestoreOptions": {
            "type": "array",
            "example": [
              "CUSTOMIZATIONS",
              "CONFIGURATION"
            ],
            "items": {
              "type": "string",
              "enum": [
                "CUSTOMIZATIONS",
                "NO_INDEXING",
                "CONFIGURATION"
              ],
              "example": "[\"CUSTOMIZATIONS\",\"CONFIGURATION\"]"
            },
            "uniqueItems": true
          },
          "key": {
            "type": "string"
          },
          "managedServiceTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "REPOSITORY",
                "SPARK",
                "DGC",
                "SEARCH"
              ],
              "x-scope": "private"
            },
            "uniqueItems": true,
            "x-scope": "private"
          },
          "repoRestoreOptions": {
            "type": "array",
            "example": [
              "DATA",
              "HISTORY"
            ],
            "items": {
              "type": "string",
              "enum": [
                "DATA",
                "HISTORY"
              ],
              "example": "[\"DATA\",\"HISTORY\"]"
            },
            "uniqueItems": true
          },
          "resetCustomizations": {
            "type": "boolean",
            "x-scope": "private"
          },
          "skipRestorePostprocessing": {
            "type": "boolean",
            "x-scope": "private"
          }
        }
      },
      "SamlConfiguration": {
        "type": "object",
        "properties": {
          "attributeFields": {
            "$ref": "#/components/schemas/AttributeFields"
          },
          "consumerServiceUrl": {
            "type": "string"
          },
          "disableClientAddress": {
            "type": "boolean"
          },
          "disableRelayState": {
            "type": "boolean"
          },
          "entityId": {
            "type": "string"
          },
          "forceAuthn": {
            "type": "boolean"
          },
          "forceNameId": {
            "type": "string"
          },
          "forceNameIdAllowCreate": {
            "type": "boolean"
          },
          "forcePassive": {
            "type": "boolean"
          },
          "groupRoleMapping": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "READ",
                "ADMIN",
                "SUPER"
              ]
            }
          },
          "metadataHTTP": {
            "type": "string"
          },
          "requestSigned": {
            "type": "boolean"
          },
          "samlRequestedAuthnContextConfiguration": {
            "$ref": "#/components/schemas/SamlRequestedAuthnContextConfiguration"
          }
        }
      },
      "SamlRequestedAuthnContextConfiguration": {
        "type": "object",
        "properties": {
          "classDeclList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classRefList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "comparison": {
            "type": "string"
          },
          "disable": {
            "type": "boolean"
          }
        }
      },
      "SearchConfiguration": {
        "type": "object",
        "properties": {
          "elasticPassword": {
            "type": "string"
          },
          "hostName": {
            "type": "string"
          },
          "httpPort": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535,
            "minimum": 0
          },
          "keystorePassword": {
            "type": "string"
          },
          "transportPort": {
            "type": "integer",
            "format": "int32",
            "maximum": 65535,
            "minimum": 0
          },
          "truststorePassword": {
            "type": "string"
          }
        },
        "required": [
          "elasticPassword",
          "hostName",
          "httpPort",
          "keystorePassword",
          "transportPort",
          "truststorePassword"
        ]
      },
      "SecurityConfiguration": {
        "type": "object",
        "properties": {
          "disclaimerEnabled": {
            "type": "boolean"
          },
          "disclaimerMessage": {
            "type": "string"
          },
          "headers": {
            "$ref": "#/components/schemas/SecurityHeadersConfiguration"
          },
          "intervalToAttemptLogins": {
            "type": "integer",
            "format": "int64",
            "minimum": 1
          },
          "loginAttempts": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "passwordConfiguration": {
            "$ref": "#/components/schemas/PasswordConfiguration"
          },
          "sso": {
            "$ref": "#/components/schemas/SsoConfiguration"
          },
          "userLockedOutInterval": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "usersAllowedConcurrentSessions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "whitelistConfiguration": {
            "$ref": "#/components/schemas/WhitelistConfiguration"
          }
        },
        "required": [
          "intervalToAttemptLogins",
          "loginAttempts",
          "userLockedOutInterval"
        ]
      },
      "SecurityHeadersConfiguration": {
        "type": "object",
        "properties": {
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HeadersScopeConfiguration"
            }
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ServiceProviderModel": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "optionalDependencies": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "REPOSITORY",
                "SPARK",
                "DGC",
                "SEARCH"
              ]
            }
          },
          "requiredDependencies": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "REPOSITORY",
                "SPARK",
                "DGC",
                "SEARCH"
              ]
            }
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "REPOSITORY",
              "SPARK",
              "DGC",
              "SEARCH"
            ]
          }
        }
      },
      "SessionConfiguration": {
        "type": "object",
        "properties": {
          "sessionIdleTimeout": {
            "type": "integer",
            "format": "int32",
            "maximum": 86400,
            "minimum": 900
          }
        },
        "required": [
          "sessionIdleTimeout"
        ]
      },
      "SetLoggerLevelRequest": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "enum": [
              "OFF",
              "ERROR",
              "WARN",
              "INFO",
              "DEBUG",
              "TRACE",
              "ALL"
            ]
          },
          "loggerName": {
            "type": "string"
          },
          "managedServiceId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "SignoutConfiguration": {
        "type": "object",
        "properties": {
          "overrideRedirect": {
            "type": "boolean"
          },
          "redirectUrl": {
            "type": "string"
          }
        }
      },
      "SsoConfiguration": {
        "type": "object",
        "properties": {
          "allowSsoSuperUsers": {
            "type": "boolean"
          },
          "defaultRole": {
            "type": "string",
            "enum": [
              "READ",
              "ADMIN",
              "SUPER"
            ]
          },
          "disableSignInPage": {
            "type": "boolean"
          },
          "mode": {
            "type": "string",
            "enum": [
              "SAML_ATTRIBUTES",
              "DISABLED"
            ]
          },
          "samlConfiguration": {
            "$ref": "#/components/schemas/SamlConfiguration"
          },
          "signout": {
            "$ref": "#/components/schemas/SignoutConfiguration"
          }
        }
      },
      "StepStateModel": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "WAITING",
              "RUNNING",
              "COMPLETED",
              "ERROR",
              "CANCELLED"
            ]
          }
        }
      },
      "SupportModel": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "environmentId": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "state": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "DONE"
            ]
          },
          "supportSpecification": {
            "$ref": "#/components/schemas/SupportSpecificationModel"
          }
        }
      },
      "SupportSpecificationModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "supportOptions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "CONSOLE",
                "DGC",
                "REPOSITORY",
                "JOBSERVER",
                "NODE",
                "BENCHMARKS",
                "SEARCH"
              ]
            },
            "uniqueItems": true
          }
        }
      },
      "UiConfiguration": {
        "type": "object",
        "properties": {
          "concatenateJavascript": {
            "type": "boolean"
          },
          "moduleJsonOverrides": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "modulePropertiesOverrides": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "optimizeCss": {
            "type": "boolean"
          },
          "optimizeJavascript": {
            "type": "boolean"
          },
          "pageDefinitionOverrides": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "READ",
              "ADMIN",
              "SUPER"
            ]
          },
          "username": {
            "type": "string"
          }
        }
      },
      "WhitelistConfiguration": {
        "type": "object",
        "properties": {
          "connectSrcWl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhitelistDomain"
            }
          },
          "fontSrcWl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhitelistDomain"
            }
          },
          "frameAncestorsWl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhitelistDomain"
            }
          },
          "frameSrcWl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhitelistDomain"
            }
          },
          "imgSrcWl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhitelistDomain"
            }
          },
          "scriptSrcWl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhitelistDomain"
            }
          },
          "styleSrcWl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhitelistDomain"
            }
          },
          "tableauFrameAncestorsWl": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WhitelistDomain"
            }
          }
        }
      },
      "WhitelistDomain": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "pattern": "^((?:(?<scheme>[a-zA-Z][a-zA-Z0-9+\\-.]*)://)?(?<host>(?:\\*\\.)?[a-zA-Z0-9\\-._~%]+|\\[[a-fA-F0-9:.]+\\]|\\[v[a-fA-F0-9][a-zA-Z0-9\\-._~%!$&'()*+,;=:]+\\])(?<port>:(?:\\*|[0-9]+))?)$"
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      }
    }
  }
}